
ATSAM3X8C_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000348c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000a1c  20070000  0008348c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000029c  20070a1c  00083ea8  00010a1c  2**2
                  ALLOC
  3 .stack        00002000  20070cb8  00084144  00010a1c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f8de  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ae5  00000000  00000000  0002037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000cb0  00000000  00000000  00022e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  000185ac  00000000  00000000  00023b13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00010c33  00000000  00000000  0003c0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0006669e  00000000  00000000  0004ccf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006c6b  00000000  00000000  000b3390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000c78  00000000  00000000  000b9ffb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f24  00000000  00000000  000bac74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072cb8 	.word	0x20072cb8
   80004:	00082809 	.word	0x00082809
   80008:	00082805 	.word	0x00082805
   8000c:	00082805 	.word	0x00082805
   80010:	00082805 	.word	0x00082805
   80014:	00082805 	.word	0x00082805
   80018:	00082805 	.word	0x00082805
	...
   8002c:	00082805 	.word	0x00082805
   80030:	00082805 	.word	0x00082805
   80034:	00000000 	.word	0x00000000
   80038:	00082805 	.word	0x00082805
   8003c:	00082805 	.word	0x00082805
   80040:	00082805 	.word	0x00082805
   80044:	00082805 	.word	0x00082805
   80048:	00082805 	.word	0x00082805
   8004c:	00082805 	.word	0x00082805
   80050:	00082805 	.word	0x00082805
   80054:	00082805 	.word	0x00082805
   80058:	00082805 	.word	0x00082805
   8005c:	00082805 	.word	0x00082805
   80060:	00082805 	.word	0x00082805
	...
   8006c:	00080f31 	.word	0x00080f31
   80070:	00080f45 	.word	0x00080f45
	...
   80084:	00082805 	.word	0x00082805
   80088:	00082805 	.word	0x00082805
   8008c:	00082805 	.word	0x00082805
   80090:	00000000 	.word	0x00000000
   80094:	00082805 	.word	0x00082805
   80098:	00082805 	.word	0x00082805
   8009c:	00082805 	.word	0x00082805
   800a0:	00082805 	.word	0x00082805
   800a4:	00000000 	.word	0x00000000
   800a8:	00082805 	.word	0x00082805
   800ac:	00082805 	.word	0x00082805
   800b0:	00082805 	.word	0x00082805
   800b4:	00082805 	.word	0x00082805
   800b8:	00082805 	.word	0x00082805
   800bc:	00082805 	.word	0x00082805
   800c0:	00082805 	.word	0x00082805
	...
   800d0:	00082805 	.word	0x00082805
   800d4:	00082805 	.word	0x00082805
   800d8:	00082805 	.word	0x00082805
   800dc:	00082805 	.word	0x00082805
   800e0:	00081ab9 	.word	0x00081ab9
   800e4:	00082805 	.word	0x00082805
   800e8:	00082805 	.word	0x00082805
   800ec:	00082805 	.word	0x00082805
   800f0:	00082805 	.word	0x00082805

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a1c 	.word	0x20070a1c
   80110:	00000000 	.word	0x00000000
   80114:	0008348c 	.word	0x0008348c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008348c 	.word	0x0008348c
   80144:	20070a20 	.word	0x20070a20
   80148:	0008348c 	.word	0x0008348c
   8014c:	00000000 	.word	0x00000000

00080150 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80150:	4a02      	ldr	r2, [pc, #8]	; (8015c <udi_cdc_comm_disable+0xc>)
   80152:	7813      	ldrb	r3, [r2, #0]
   80154:	3b01      	subs	r3, #1
   80156:	b2db      	uxtb	r3, r3
   80158:	7013      	strb	r3, [r2, #0]
   8015a:	4770      	bx	lr
   8015c:	20070ad0 	.word	0x20070ad0

00080160 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80160:	2000      	movs	r0, #0
   80162:	4770      	bx	lr

00080164 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80164:	2000      	movs	r0, #0
   80166:	4770      	bx	lr

00080168 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   80168:	4b1d      	ldr	r3, [pc, #116]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8016a:	781b      	ldrb	r3, [r3, #0]
   8016c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80170:	d012      	beq.n	80198 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80172:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80176:	2b20      	cmp	r3, #32
   80178:	d128      	bne.n	801cc <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8017a:	4b19      	ldr	r3, [pc, #100]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8017c:	785b      	ldrb	r3, [r3, #1]
   8017e:	2b21      	cmp	r3, #33	; 0x21
   80180:	d126      	bne.n	801d0 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   80182:	4b17      	ldr	r3, [pc, #92]	; (801e0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   80184:	88db      	ldrh	r3, [r3, #6]
   80186:	2b07      	cmp	r3, #7
   80188:	d124      	bne.n	801d4 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   8018a:	4b15      	ldr	r3, [pc, #84]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8018c:	4a15      	ldr	r2, [pc, #84]	; (801e4 <udi_cdc_comm_setup+0x7c>)
   8018e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   80190:	2207      	movs	r2, #7
   80192:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   80194:	2001      	movs	r0, #1
   80196:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80198:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8019c:	2b20      	cmp	r3, #32
   8019e:	d11b      	bne.n	801d8 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   801a0:	4b0f      	ldr	r3, [pc, #60]	; (801e0 <udi_cdc_comm_setup+0x78>)
   801a2:	7858      	ldrb	r0, [r3, #1]
   801a4:	2820      	cmp	r0, #32
   801a6:	d004      	beq.n	801b2 <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801a8:	2822      	cmp	r0, #34	; 0x22
   801aa:	bf14      	ite	ne
   801ac:	2000      	movne	r0, #0
   801ae:	2001      	moveq	r0, #1
   801b0:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   801b2:	4b0b      	ldr	r3, [pc, #44]	; (801e0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   801b4:	88db      	ldrh	r3, [r3, #6]
   801b6:	2b07      	cmp	r3, #7
   801b8:	d110      	bne.n	801dc <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   801ba:	4b09      	ldr	r3, [pc, #36]	; (801e0 <udi_cdc_comm_setup+0x78>)
   801bc:	4a0a      	ldr	r2, [pc, #40]	; (801e8 <udi_cdc_comm_setup+0x80>)
   801be:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   801c0:	4a08      	ldr	r2, [pc, #32]	; (801e4 <udi_cdc_comm_setup+0x7c>)
   801c2:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   801c4:	2207      	movs	r2, #7
   801c6:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   801c8:	2001      	movs	r0, #1
   801ca:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801cc:	2000      	movs	r0, #0
   801ce:	4770      	bx	lr
   801d0:	2000      	movs	r0, #0
   801d2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   801d4:	2000      	movs	r0, #0
   801d6:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801d8:	2000      	movs	r0, #0
   801da:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   801dc:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   801de:	4770      	bx	lr
   801e0:	20070c9c 	.word	0x20070c9c
   801e4:	20070a3c 	.word	0x20070a3c
   801e8:	000801ed 	.word	0x000801ed

000801ec <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   801ec:	4770      	bx	lr
   801ee:	bf00      	nop

000801f0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   801f0:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   801f2:	2300      	movs	r3, #0
   801f4:	4a10      	ldr	r2, [pc, #64]	; (80238 <udi_cdc_comm_enable+0x48>)
   801f6:	7013      	strb	r3, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801f8:	4a10      	ldr	r2, [pc, #64]	; (8023c <udi_cdc_comm_enable+0x4c>)
   801fa:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   801fc:	4a10      	ldr	r2, [pc, #64]	; (80240 <udi_cdc_comm_enable+0x50>)
   801fe:	21a1      	movs	r1, #161	; 0xa1
   80200:	7011      	strb	r1, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80202:	2120      	movs	r1, #32
   80204:	7051      	strb	r1, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80206:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80208:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8020a:	2102      	movs	r1, #2
   8020c:	80d1      	strh	r1, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8020e:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   80210:	4a0c      	ldr	r2, [pc, #48]	; (80244 <udi_cdc_comm_enable+0x54>)
   80212:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   80216:	6011      	str	r1, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80218:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8021a:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8021c:	2308      	movs	r3, #8
   8021e:	7193      	strb	r3, [r2, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   80220:	4b09      	ldr	r3, [pc, #36]	; (80248 <udi_cdc_comm_enable+0x58>)
   80222:	4798      	blx	r3
   80224:	4602      	mov	r2, r0
   80226:	b120      	cbz	r0, 80232 <udi_cdc_comm_enable+0x42>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   80228:	4903      	ldr	r1, [pc, #12]	; (80238 <udi_cdc_comm_enable+0x48>)
   8022a:	780b      	ldrb	r3, [r1, #0]
   8022c:	3301      	adds	r3, #1
   8022e:	b2db      	uxtb	r3, r3
   80230:	700b      	strb	r3, [r1, #0]
	return true;
}
   80232:	4610      	mov	r0, r2
   80234:	bd08      	pop	{r3, pc}
   80236:	bf00      	nop
   80238:	20070ad0 	.word	0x20070ad0
   8023c:	20070b74 	.word	0x20070b74
   80240:	20070ae0 	.word	0x20070ae0
   80244:	20070a3c 	.word	0x20070a3c
   80248:	00082add 	.word	0x00082add

0008024c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8024c:	4b42      	ldr	r3, [pc, #264]	; (80358 <udi_cdc_tx_send+0x10c>)
   8024e:	781b      	ldrb	r3, [r3, #0]
   80250:	f013 0fff 	tst.w	r3, #255	; 0xff
   80254:	d17f      	bne.n	80356 <udi_cdc_tx_send+0x10a>
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   80256:	b530      	push	{r4, r5, lr}
   80258:	b083      	sub	sp, #12
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8025a:	4b40      	ldr	r3, [pc, #256]	; (8035c <udi_cdc_tx_send+0x110>)
   8025c:	4798      	blx	r3
   8025e:	b130      	cbz	r0, 8026e <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80260:	4b3f      	ldr	r3, [pc, #252]	; (80360 <udi_cdc_tx_send+0x114>)
   80262:	881c      	ldrh	r4, [r3, #0]
   80264:	4b3f      	ldr	r3, [pc, #252]	; (80364 <udi_cdc_tx_send+0x118>)
   80266:	4798      	blx	r3
   80268:	4284      	cmp	r4, r0
   8026a:	d106      	bne.n	8027a <udi_cdc_tx_send+0x2e>
   8026c:	e071      	b.n	80352 <udi_cdc_tx_send+0x106>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8026e:	4b3c      	ldr	r3, [pc, #240]	; (80360 <udi_cdc_tx_send+0x114>)
   80270:	881c      	ldrh	r4, [r3, #0]
   80272:	4b3d      	ldr	r3, [pc, #244]	; (80368 <udi_cdc_tx_send+0x11c>)
   80274:	4798      	blx	r3
   80276:	4284      	cmp	r4, r0
   80278:	d06b      	beq.n	80352 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8027a:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8027e:	fab5 f585 	clz	r5, r5
   80282:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80284:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80286:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8028a:	2200      	movs	r2, #0
   8028c:	4b37      	ldr	r3, [pc, #220]	; (8036c <udi_cdc_tx_send+0x120>)
   8028e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80290:	4b37      	ldr	r3, [pc, #220]	; (80370 <udi_cdc_tx_send+0x124>)
   80292:	781c      	ldrb	r4, [r3, #0]
   80294:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80296:	4b37      	ldr	r3, [pc, #220]	; (80374 <udi_cdc_tx_send+0x128>)
   80298:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029c:	b9db      	cbnz	r3, 802d6 <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
   8029e:	4a36      	ldr	r2, [pc, #216]	; (80378 <udi_cdc_tx_send+0x12c>)
   802a0:	8813      	ldrh	r3, [r2, #0]
   802a2:	3301      	adds	r3, #1
   802a4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802a6:	4b2d      	ldr	r3, [pc, #180]	; (8035c <udi_cdc_tx_send+0x110>)
   802a8:	4798      	blx	r3
   802aa:	b918      	cbnz	r0, 802b4 <udi_cdc_tx_send+0x68>
   802ac:	4b32      	ldr	r3, [pc, #200]	; (80378 <udi_cdc_tx_send+0x12c>)
   802ae:	881b      	ldrh	r3, [r3, #0]
   802b0:	2b63      	cmp	r3, #99	; 0x63
   802b2:	d907      	bls.n	802c4 <udi_cdc_tx_send+0x78>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802b4:	4b29      	ldr	r3, [pc, #164]	; (8035c <udi_cdc_tx_send+0x110>)
   802b6:	4798      	blx	r3
   802b8:	b168      	cbz	r0, 802d6 <udi_cdc_tx_send+0x8a>
   802ba:	4b2f      	ldr	r3, [pc, #188]	; (80378 <udi_cdc_tx_send+0x12c>)
   802bc:	881b      	ldrh	r3, [r3, #0]
   802be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802c2:	d208      	bcs.n	802d6 <udi_cdc_tx_send+0x8a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   802c4:	2d00      	cmp	r5, #0
   802c6:	d044      	beq.n	80352 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802c8:	2201      	movs	r2, #1
   802ca:	4b28      	ldr	r3, [pc, #160]	; (8036c <udi_cdc_tx_send+0x120>)
   802cc:	701a      	strb	r2, [r3, #0]
   802ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   802d2:	b662      	cpsie	i
   802d4:	e03d      	b.n	80352 <udi_cdc_tx_send+0x106>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   802d6:	2200      	movs	r2, #0
   802d8:	4b27      	ldr	r3, [pc, #156]	; (80378 <udi_cdc_tx_send+0x12c>)
   802da:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   802dc:	4b27      	ldr	r3, [pc, #156]	; (8037c <udi_cdc_tx_send+0x130>)
   802de:	781b      	ldrb	r3, [r3, #0]
   802e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   802e4:	d105      	bne.n	802f2 <udi_cdc_tx_send+0xa6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   802e6:	fab4 f384 	clz	r3, r4
   802ea:	095b      	lsrs	r3, r3, #5
   802ec:	4a20      	ldr	r2, [pc, #128]	; (80370 <udi_cdc_tx_send+0x124>)
   802ee:	7013      	strb	r3, [r2, #0]
   802f0:	e002      	b.n	802f8 <udi_cdc_tx_send+0xac>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802f2:	fab4 f484 	clz	r4, r4
   802f6:	0964      	lsrs	r4, r4, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   802f8:	2201      	movs	r2, #1
   802fa:	4b17      	ldr	r3, [pc, #92]	; (80358 <udi_cdc_tx_send+0x10c>)
   802fc:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   802fe:	b125      	cbz	r5, 8030a <udi_cdc_tx_send+0xbe>
		cpu_irq_enable();
   80300:	4b1a      	ldr	r3, [pc, #104]	; (8036c <udi_cdc_tx_send+0x120>)
   80302:	701a      	strb	r2, [r3, #0]
   80304:	f3bf 8f5f 	dmb	sy
   80308:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8030a:	4625      	mov	r5, r4
   8030c:	4b19      	ldr	r3, [pc, #100]	; (80374 <udi_cdc_tx_send+0x128>)
   8030e:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
   80312:	3c40      	subs	r4, #64	; 0x40
   80314:	bf18      	it	ne
   80316:	2401      	movne	r4, #1
	if (b_short_packet) {
   80318:	b164      	cbz	r4, 80334 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   8031a:	4b10      	ldr	r3, [pc, #64]	; (8035c <udi_cdc_tx_send+0x110>)
   8031c:	4798      	blx	r3
   8031e:	b120      	cbz	r0, 8032a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80320:	4b10      	ldr	r3, [pc, #64]	; (80364 <udi_cdc_tx_send+0x118>)
   80322:	4798      	blx	r3
   80324:	4b0e      	ldr	r3, [pc, #56]	; (80360 <udi_cdc_tx_send+0x114>)
   80326:	8018      	strh	r0, [r3, #0]
   80328:	e007      	b.n	8033a <udi_cdc_tx_send+0xee>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8032a:	4b0f      	ldr	r3, [pc, #60]	; (80368 <udi_cdc_tx_send+0x11c>)
   8032c:	4798      	blx	r3
   8032e:	4b0c      	ldr	r3, [pc, #48]	; (80360 <udi_cdc_tx_send+0x114>)
   80330:	8018      	strh	r0, [r3, #0]
   80332:	e002      	b.n	8033a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80334:	2200      	movs	r2, #0
   80336:	4b0a      	ldr	r3, [pc, #40]	; (80360 <udi_cdc_tx_send+0x114>)
   80338:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8033a:	4b0e      	ldr	r3, [pc, #56]	; (80374 <udi_cdc_tx_send+0x128>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   8033c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   80340:	4a0f      	ldr	r2, [pc, #60]	; (80380 <udi_cdc_tx_send+0x134>)
   80342:	9200      	str	r2, [sp, #0]
   80344:	2081      	movs	r0, #129	; 0x81
   80346:	4621      	mov	r1, r4
   80348:	4a0e      	ldr	r2, [pc, #56]	; (80384 <udi_cdc_tx_send+0x138>)
   8034a:	eb02 1285 	add.w	r2, r2, r5, lsl #6
   8034e:	4c0e      	ldr	r4, [pc, #56]	; (80388 <udi_cdc_tx_send+0x13c>)
   80350:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   80352:	b003      	add	sp, #12
   80354:	bd30      	pop	{r4, r5, pc}
   80356:	4770      	bx	lr
   80358:	20070adc 	.word	0x20070adc
   8035c:	000820e5 	.word	0x000820e5
   80360:	20070ad4 	.word	0x20070ad4
   80364:	00082131 	.word	0x00082131
   80368:	00082121 	.word	0x00082121
   8036c:	200701d8 	.word	0x200701d8
   80370:	20070a44 	.word	0x20070a44
   80374:	20070a48 	.word	0x20070a48
   80378:	20070ad2 	.word	0x20070ad2
   8037c:	20070b70 	.word	0x20070b70
   80380:	0008038d 	.word	0x0008038d
   80384:	20070a4c 	.word	0x20070a4c
   80388:	0008238d 	.word	0x0008238d

0008038c <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   8038c:	b988      	cbnz	r0, 803b2 <udi_cdc_data_sent+0x26>
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   8038e:	b508      	push	{r3, lr}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80390:	4b08      	ldr	r3, [pc, #32]	; (803b4 <udi_cdc_data_sent+0x28>)
   80392:	781b      	ldrb	r3, [r3, #0]
   80394:	f013 0fff 	tst.w	r3, #255	; 0xff
   80398:	bf0c      	ite	eq
   8039a:	2201      	moveq	r2, #1
   8039c:	2200      	movne	r2, #0
   8039e:	4b06      	ldr	r3, [pc, #24]	; (803b8 <udi_cdc_data_sent+0x2c>)
   803a0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   803a4:	4b05      	ldr	r3, [pc, #20]	; (803bc <udi_cdc_data_sent+0x30>)
   803a6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   803a8:	4b05      	ldr	r3, [pc, #20]	; (803c0 <udi_cdc_data_sent+0x34>)
   803aa:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   803ac:	4b05      	ldr	r3, [pc, #20]	; (803c4 <udi_cdc_data_sent+0x38>)
   803ae:	4798      	blx	r3
   803b0:	bd08      	pop	{r3, pc}
   803b2:	4770      	bx	lr
   803b4:	20070a44 	.word	0x20070a44
   803b8:	20070a48 	.word	0x20070a48
   803bc:	20070b70 	.word	0x20070b70
   803c0:	20070adc 	.word	0x20070adc
   803c4:	0008024d 	.word	0x0008024d

000803c8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   803c8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   803ca:	2000      	movs	r0, #0
   803cc:	4b01      	ldr	r3, [pc, #4]	; (803d4 <udi_cdc_data_sof_notify+0xc>)
   803ce:	4798      	blx	r3
   803d0:	bd08      	pop	{r3, pc}
   803d2:	bf00      	nop
   803d4:	0008024d 	.word	0x0008024d

000803d8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   803d8:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   803da:	4a06      	ldr	r2, [pc, #24]	; (803f4 <udi_cdc_data_disable+0x1c>)
   803dc:	7813      	ldrb	r3, [r2, #0]
   803de:	3b01      	subs	r3, #1
   803e0:	b2db      	uxtb	r3, r3
   803e2:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803e4:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803e6:	4b04      	ldr	r3, [pc, #16]	; (803f8 <udi_cdc_data_disable+0x20>)
   803e8:	4798      	blx	r3
	udi_cdc_data_running = false;
   803ea:	2200      	movs	r2, #0
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_data_disable+0x24>)
   803ee:	701a      	strb	r2, [r3, #0]
   803f0:	bd08      	pop	{r3, pc}
   803f2:	bf00      	nop
   803f4:	20070a43 	.word	0x20070a43
   803f8:	00082ae9 	.word	0x00082ae9
   803fc:	20070ad6 	.word	0x20070ad6

00080400 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80400:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80404:	b672      	cpsid	i
   80406:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8040a:	2100      	movs	r1, #0
   8040c:	4b0a      	ldr	r3, [pc, #40]	; (80438 <udi_cdc_multi_get_nb_received_data+0x38>)
   8040e:	7019      	strb	r1, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80410:	4b0a      	ldr	r3, [pc, #40]	; (8043c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80412:	8818      	ldrh	r0, [r3, #0]
   80414:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80416:	4b0a      	ldr	r3, [pc, #40]	; (80440 <udi_cdc_multi_get_nb_received_data+0x40>)
   80418:	781b      	ldrb	r3, [r3, #0]
   8041a:	b2db      	uxtb	r3, r3
   8041c:	4909      	ldr	r1, [pc, #36]	; (80444 <udi_cdc_multi_get_nb_received_data+0x44>)
   8041e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   80422:	b29b      	uxth	r3, r3
   80424:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80426:	b92a      	cbnz	r2, 80434 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80428:	2201      	movs	r2, #1
   8042a:	4b03      	ldr	r3, [pc, #12]	; (80438 <udi_cdc_multi_get_nb_received_data+0x38>)
   8042c:	701a      	strb	r2, [r3, #0]
   8042e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80432:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80434:	4770      	bx	lr
   80436:	bf00      	nop
   80438:	200701d8 	.word	0x200701d8
   8043c:	20070a38 	.word	0x20070a38
   80440:	20070ad8 	.word	0x20070ad8
   80444:	20070acc 	.word	0x20070acc

00080448 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80448:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8044a:	4b03      	ldr	r3, [pc, #12]	; (80458 <udi_cdc_multi_is_rx_ready+0x10>)
   8044c:	4798      	blx	r3
}
   8044e:	3000      	adds	r0, #0
   80450:	bf18      	it	ne
   80452:	2001      	movne	r0, #1
   80454:	bd08      	pop	{r3, pc}
   80456:	bf00      	nop
   80458:	00080401 	.word	0x00080401

0008045c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   8045c:	b510      	push	{r4, lr}
   8045e:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80460:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   80464:	fab3 f383 	clz	r3, r3
   80468:	095b      	lsrs	r3, r3, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8046a:	b672      	cpsid	i
   8046c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80470:	2100      	movs	r1, #0
   80472:	4a1f      	ldr	r2, [pc, #124]	; (804f0 <udi_cdc_rx_start+0x94>)
   80474:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80476:	4a1f      	ldr	r2, [pc, #124]	; (804f4 <udi_cdc_rx_start+0x98>)
   80478:	7812      	ldrb	r2, [r2, #0]
   8047a:	b2d4      	uxtb	r4, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047c:	4a1e      	ldr	r2, [pc, #120]	; (804f8 <udi_cdc_rx_start+0x9c>)
   8047e:	7812      	ldrb	r2, [r2, #0]
   80480:	f012 0fff 	tst.w	r2, #255	; 0xff
   80484:	d108      	bne.n	80498 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80486:	4a1d      	ldr	r2, [pc, #116]	; (804fc <udi_cdc_rx_start+0xa0>)
   80488:	8811      	ldrh	r1, [r2, #0]
   8048a:	b289      	uxth	r1, r1
   8048c:	4a1c      	ldr	r2, [pc, #112]	; (80500 <udi_cdc_rx_start+0xa4>)
   8048e:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80492:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   80494:	4291      	cmp	r1, r2
   80496:	d208      	bcs.n	804aa <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80498:	b333      	cbz	r3, 804e8 <udi_cdc_rx_start+0x8c>
		cpu_irq_enable();
   8049a:	2201      	movs	r2, #1
   8049c:	4b14      	ldr	r3, [pc, #80]	; (804f0 <udi_cdc_rx_start+0x94>)
   8049e:	701a      	strb	r2, [r3, #0]
   804a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   804a4:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   804a6:	2000      	movs	r0, #0
   804a8:	e01f      	b.n	804ea <udi_cdc_rx_start+0x8e>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   804aa:	2100      	movs	r1, #0
   804ac:	4a13      	ldr	r2, [pc, #76]	; (804fc <udi_cdc_rx_start+0xa0>)
   804ae:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   804b0:	fab4 f284 	clz	r2, r4
   804b4:	0952      	lsrs	r2, r2, #5
   804b6:	490f      	ldr	r1, [pc, #60]	; (804f4 <udi_cdc_rx_start+0x98>)
   804b8:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   804ba:	2101      	movs	r1, #1
   804bc:	4a0e      	ldr	r2, [pc, #56]	; (804f8 <udi_cdc_rx_start+0x9c>)
   804be:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   804c0:	b123      	cbz	r3, 804cc <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   804c2:	4b0b      	ldr	r3, [pc, #44]	; (804f0 <udi_cdc_rx_start+0x94>)
   804c4:	7019      	strb	r1, [r3, #0]
   804c6:	f3bf 8f5f 	dmb	sy
   804ca:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   804cc:	2000      	movs	r0, #0
   804ce:	4b0d      	ldr	r3, [pc, #52]	; (80504 <udi_cdc_rx_start+0xa8>)
   804d0:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   804d2:	4b0d      	ldr	r3, [pc, #52]	; (80508 <udi_cdc_rx_start+0xac>)
   804d4:	9300      	str	r3, [sp, #0]
   804d6:	2002      	movs	r0, #2
   804d8:	2101      	movs	r1, #1
   804da:	4a0c      	ldr	r2, [pc, #48]	; (8050c <udi_cdc_rx_start+0xb0>)
   804dc:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   804e0:	2340      	movs	r3, #64	; 0x40
   804e2:	4c0b      	ldr	r4, [pc, #44]	; (80510 <udi_cdc_rx_start+0xb4>)
   804e4:	47a0      	blx	r4
   804e6:	e000      	b.n	804ea <udi_cdc_rx_start+0x8e>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   804e8:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   804ea:	b002      	add	sp, #8
   804ec:	bd10      	pop	{r4, pc}
   804ee:	bf00      	nop
   804f0:	200701d8 	.word	0x200701d8
   804f4:	20070ad8 	.word	0x20070ad8
   804f8:	20070b6c 	.word	0x20070b6c
   804fc:	20070a38 	.word	0x20070a38
   80500:	20070acc 	.word	0x20070acc
   80504:	00080449 	.word	0x00080449
   80508:	000805a5 	.word	0x000805a5
   8050c:	20070aec 	.word	0x20070aec
   80510:	0008238d 	.word	0x0008238d

00080514 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   80514:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   80516:	2400      	movs	r4, #0
   80518:	4b15      	ldr	r3, [pc, #84]	; (80570 <udi_cdc_data_enable+0x5c>)
   8051a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   8051c:	4b15      	ldr	r3, [pc, #84]	; (80574 <udi_cdc_data_enable+0x60>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80520:	4b15      	ldr	r3, [pc, #84]	; (80578 <udi_cdc_data_enable+0x64>)
   80522:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   80524:	4b15      	ldr	r3, [pc, #84]	; (8057c <udi_cdc_data_enable+0x68>)
   80526:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80528:	4b15      	ldr	r3, [pc, #84]	; (80580 <udi_cdc_data_enable+0x6c>)
   8052a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   8052c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8052e:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x70>)
   80530:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   80532:	4620      	mov	r0, r4
   80534:	4b14      	ldr	r3, [pc, #80]	; (80588 <udi_cdc_data_enable+0x74>)
   80536:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   80538:	4b14      	ldr	r3, [pc, #80]	; (8058c <udi_cdc_data_enable+0x78>)
   8053a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   8053c:	4b14      	ldr	r3, [pc, #80]	; (80590 <udi_cdc_data_enable+0x7c>)
   8053e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80540:	4b14      	ldr	r3, [pc, #80]	; (80594 <udi_cdc_data_enable+0x80>)
   80542:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   80544:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80546:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x84>)
   80548:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   8054a:	4620      	mov	r0, r4
   8054c:	4b13      	ldr	r3, [pc, #76]	; (8059c <udi_cdc_data_enable+0x88>)
   8054e:	4798      	blx	r3
   80550:	4601      	mov	r1, r0
   80552:	b158      	cbz	r0, 8056c <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   80554:	4a06      	ldr	r2, [pc, #24]	; (80570 <udi_cdc_data_enable+0x5c>)
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	3301      	adds	r3, #1
   8055a:	b2db      	uxtb	r3, r3
   8055c:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8055e:	7813      	ldrb	r3, [r2, #0]
   80560:	b2db      	uxtb	r3, r3
   80562:	2b01      	cmp	r3, #1
   80564:	d102      	bne.n	8056c <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
   80566:	2201      	movs	r2, #1
   80568:	4b0d      	ldr	r3, [pc, #52]	; (805a0 <udi_cdc_data_enable+0x8c>)
   8056a:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
   8056c:	4608      	mov	r0, r1
   8056e:	bd10      	pop	{r4, pc}
   80570:	20070a43 	.word	0x20070a43
   80574:	20070adc 	.word	0x20070adc
   80578:	20070b70 	.word	0x20070b70
   8057c:	20070a44 	.word	0x20070a44
   80580:	20070a48 	.word	0x20070a48
   80584:	20070ad4 	.word	0x20070ad4
   80588:	0008024d 	.word	0x0008024d
   8058c:	20070b6c 	.word	0x20070b6c
   80590:	20070ad8 	.word	0x20070ad8
   80594:	20070acc 	.word	0x20070acc
   80598:	20070a38 	.word	0x20070a38
   8059c:	0008045d 	.word	0x0008045d
   805a0:	20070ad6 	.word	0x20070ad6

000805a4 <udi_cdc_data_received>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   805a4:	b9f8      	cbnz	r0, 805e6 <udi_cdc_data_received+0x42>
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   805a6:	b510      	push	{r4, lr}
   805a8:	b082      	sub	sp, #8

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805aa:	4b0f      	ldr	r3, [pc, #60]	; (805e8 <udi_cdc_data_received+0x44>)
   805ac:	781b      	ldrb	r3, [r3, #0]
   805ae:	f013 0fff 	tst.w	r3, #255	; 0xff
   805b2:	bf0c      	ite	eq
   805b4:	2301      	moveq	r3, #1
   805b6:	2300      	movne	r3, #0
	if (!n) {
   805b8:	b951      	cbnz	r1, 805d0 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
   805ba:	490c      	ldr	r1, [pc, #48]	; (805ec <udi_cdc_data_received+0x48>)
   805bc:	9100      	str	r1, [sp, #0]
   805be:	4610      	mov	r0, r2
   805c0:	2101      	movs	r1, #1
   805c2:	4a0b      	ldr	r2, [pc, #44]	; (805f0 <udi_cdc_data_received+0x4c>)
   805c4:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   805c8:	2340      	movs	r3, #64	; 0x40
   805ca:	4c0a      	ldr	r4, [pc, #40]	; (805f4 <udi_cdc_data_received+0x50>)
   805cc:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   805ce:	e008      	b.n	805e2 <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805d0:	b289      	uxth	r1, r1
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x54>)
   805d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805d8:	2000      	movs	r0, #0
   805da:	4b08      	ldr	r3, [pc, #32]	; (805fc <udi_cdc_data_received+0x58>)
   805dc:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805de:	4b08      	ldr	r3, [pc, #32]	; (80600 <udi_cdc_data_received+0x5c>)
   805e0:	4798      	blx	r3
}
   805e2:	b002      	add	sp, #8
   805e4:	bd10      	pop	{r4, pc}
   805e6:	4770      	bx	lr
   805e8:	20070ad8 	.word	0x20070ad8
   805ec:	000805a5 	.word	0x000805a5
   805f0:	20070aec 	.word	0x20070aec
   805f4:	0008238d 	.word	0x0008238d
   805f8:	20070acc 	.word	0x20070acc
   805fc:	20070b6c 	.word	0x20070b6c
   80600:	0008045d 	.word	0x0008045d

00080604 <udi_cdc_multi_get_free_tx_buffer>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80604:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80608:	b672      	cpsid	i
   8060a:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8060e:	2100      	movs	r1, #0
   80610:	4b13      	ldr	r3, [pc, #76]	; (80660 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   80612:	7019      	strb	r1, [r3, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   80614:	4b13      	ldr	r3, [pc, #76]	; (80664 <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80616:	781b      	ldrb	r3, [r3, #0]
   80618:	b2db      	uxtb	r3, r3
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   8061a:	4913      	ldr	r1, [pc, #76]	; (80668 <udi_cdc_multi_get_free_tx_buffer+0x64>)
   8061c:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   80620:	2840      	cmp	r0, #64	; 0x40
   80622:	d112      	bne.n	8064a <udi_cdc_multi_get_free_tx_buffer+0x46>
		if ((!udi_cdc_tx_trans_ongoing[port])
   80624:	4911      	ldr	r1, [pc, #68]	; (8066c <udi_cdc_multi_get_free_tx_buffer+0x68>)
   80626:	7809      	ldrb	r1, [r1, #0]
   80628:	f011 0fff 	tst.w	r1, #255	; 0xff
   8062c:	d10d      	bne.n	8064a <udi_cdc_multi_get_free_tx_buffer+0x46>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   8062e:	4910      	ldr	r1, [pc, #64]	; (80670 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   80630:	7809      	ldrb	r1, [r1, #0]
   80632:	f011 0fff 	tst.w	r1, #255	; 0xff
   80636:	d108      	bne.n	8064a <udi_cdc_multi_get_free_tx_buffer+0x46>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
   80638:	2001      	movs	r0, #1
   8063a:	490d      	ldr	r1, [pc, #52]	; (80670 <udi_cdc_multi_get_free_tx_buffer+0x6c>)
   8063c:	7008      	strb	r0, [r1, #0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   8063e:	fab3 f383 	clz	r3, r3
   80642:	095b      	lsrs	r3, r3, #5
   80644:	4907      	ldr	r1, [pc, #28]	; (80664 <udi_cdc_multi_get_free_tx_buffer+0x60>)
   80646:	700b      	strb	r3, [r1, #0]
			buf_sel_nb = 0;
   80648:	2000      	movs	r0, #0
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
   8064a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8064e:	b92a      	cbnz	r2, 8065c <udi_cdc_multi_get_free_tx_buffer+0x58>
		cpu_irq_enable();
   80650:	2201      	movs	r2, #1
   80652:	4b03      	ldr	r3, [pc, #12]	; (80660 <udi_cdc_multi_get_free_tx_buffer+0x5c>)
   80654:	701a      	strb	r2, [r3, #0]
   80656:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8065a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return retval;
}
   8065c:	4770      	bx	lr
   8065e:	bf00      	nop
   80660:	200701d8 	.word	0x200701d8
   80664:	20070a44 	.word	0x20070a44
   80668:	20070a48 	.word	0x20070a48
   8066c:	20070adc 	.word	0x20070adc
   80670:	20070b70 	.word	0x20070b70

00080674 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   80674:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
   80676:	4b03      	ldr	r3, [pc, #12]	; (80684 <udi_cdc_multi_is_tx_ready+0x10>)
   80678:	4798      	blx	r3
}
   8067a:	3000      	adds	r0, #0
   8067c:	bf18      	it	ne
   8067e:	2001      	movne	r0, #1
   80680:	bd08      	pop	{r3, pc}
   80682:	bf00      	nop
   80684:	00080605 	.word	0x00080605

00080688 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   80688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8068c:	460c      	mov	r4, r1

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   8068e:	4b1b      	ldr	r3, [pc, #108]	; (806fc <udi_cdc_multi_putc+0x74>)
   80690:	799d      	ldrb	r5, [r3, #6]
   80692:	2d09      	cmp	r5, #9
   80694:	bf14      	ite	ne
   80696:	2500      	movne	r5, #0
   80698:	2501      	moveq	r5, #1

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   8069a:	4e19      	ldr	r6, [pc, #100]	; (80700 <udi_cdc_multi_putc+0x78>)
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8069c:	4f19      	ldr	r7, [pc, #100]	; (80704 <udi_cdc_multi_putc+0x7c>)
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   8069e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80714 <udi_cdc_multi_putc+0x8c>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
   806a2:	2000      	movs	r0, #0
   806a4:	47b0      	blx	r6
   806a6:	b930      	cbnz	r0, 806b6 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
   806a8:	4b17      	ldr	r3, [pc, #92]	; (80708 <udi_cdc_multi_putc+0x80>)
   806aa:	781b      	ldrb	r3, [r3, #0]
   806ac:	f013 0fff 	tst.w	r3, #255	; 0xff
   806b0:	d1f7      	bne.n	806a2 <udi_cdc_multi_putc+0x1a>
   806b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   806b6:	f3ef 8110 	mrs	r1, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   806ba:	b672      	cpsid	i
   806bc:	f3bf 8f5f 	dmb	sy
   806c0:	2300      	movs	r3, #0
   806c2:	703b      	strb	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
   806c4:	f898 3000 	ldrb.w	r3, [r8]
   806c8:	b2db      	uxtb	r3, r3
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   806ca:	4810      	ldr	r0, [pc, #64]	; (8070c <udi_cdc_multi_putc+0x84>)
   806cc:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
   806d0:	f102 0e01 	add.w	lr, r2, #1
   806d4:	f820 e013 	strh.w	lr, [r0, r3, lsl #1]
   806d8:	eb02 1383 	add.w	r3, r2, r3, lsl #6
   806dc:	4a0c      	ldr	r2, [pc, #48]	; (80710 <udi_cdc_multi_putc+0x88>)
   806de:	54d4      	strb	r4, [r2, r3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   806e0:	b921      	cbnz	r1, 806ec <udi_cdc_multi_putc+0x64>
		cpu_irq_enable();
   806e2:	2301      	movs	r3, #1
   806e4:	703b      	strb	r3, [r7, #0]
   806e6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   806ea:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (b_databit_9) {
   806ec:	b115      	cbz	r5, 806f4 <udi_cdc_multi_putc+0x6c>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
   806ee:	1224      	asrs	r4, r4, #8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
	cpu_irq_restore(flags);

	if (b_databit_9) {
		// Send MSB
		b_databit_9 = false;
   806f0:	2500      	movs	r5, #0
		value = value >> 8;
		goto udi_cdc_putc_process_one_byte;
   806f2:	e7d6      	b.n	806a2 <udi_cdc_multi_putc+0x1a>
	}
	return true;
   806f4:	2001      	movs	r0, #1
}
   806f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806fa:	bf00      	nop
   806fc:	20070a3c 	.word	0x20070a3c
   80700:	00080675 	.word	0x00080675
   80704:	200701d8 	.word	0x200701d8
   80708:	20070ad6 	.word	0x20070ad6
   8070c:	20070a48 	.word	0x20070a48
   80710:	20070a4c 	.word	0x20070a4c
   80714:	20070a44 	.word	0x20070a44

00080718 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
   80718:	b508      	push	{r3, lr}
   8071a:	4601      	mov	r1, r0
	return udi_cdc_multi_putc(0, value);
   8071c:	2000      	movs	r0, #0
   8071e:	4b01      	ldr	r3, [pc, #4]	; (80724 <udi_cdc_putc+0xc>)
   80720:	4798      	blx	r3
}
   80722:	bd08      	pop	{r3, pc}
   80724:	00080689 	.word	0x00080689

00080728 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80728:	4b0f      	ldr	r3, [pc, #60]	; (80768 <udc_next_desc_in_iface+0x40>)
   8072a:	681b      	ldr	r3, [r3, #0]
   8072c:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8072e:	8853      	ldrh	r3, [r2, #2]
   80730:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80732:	7803      	ldrb	r3, [r0, #0]
   80734:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80736:	4290      	cmp	r0, r2
   80738:	d210      	bcs.n	8075c <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8073a:	7843      	ldrb	r3, [r0, #1]
   8073c:	2b04      	cmp	r3, #4
   8073e:	d00f      	beq.n	80760 <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80740:	428b      	cmp	r3, r1
   80742:	d105      	bne.n	80750 <udc_next_desc_in_iface+0x28>
   80744:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80746:	7843      	ldrb	r3, [r0, #1]
   80748:	2b04      	cmp	r3, #4
   8074a:	d00b      	beq.n	80764 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8074c:	428b      	cmp	r3, r1
   8074e:	d00a      	beq.n	80766 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   80750:	7803      	ldrb	r3, [r0, #0]
   80752:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80754:	4290      	cmp	r0, r2
   80756:	d3f6      	bcc.n	80746 <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   80758:	2000      	movs	r0, #0
   8075a:	4770      	bx	lr
   8075c:	2000      	movs	r0, #0
   8075e:	4770      	bx	lr
   80760:	2000      	movs	r0, #0
   80762:	4770      	bx	lr
   80764:	2000      	movs	r0, #0
}
   80766:	4770      	bx	lr
   80768:	20070b78 	.word	0x20070b78

0008076c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   8076c:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8076e:	4b03      	ldr	r3, [pc, #12]	; (8077c <udc_valid_address+0x10>)
   80770:	7898      	ldrb	r0, [r3, #2]
   80772:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80776:	4b02      	ldr	r3, [pc, #8]	; (80780 <udc_valid_address+0x14>)
   80778:	4798      	blx	r3
   8077a:	bd08      	pop	{r3, pc}
   8077c:	20070c9c 	.word	0x20070c9c
   80780:	000820e9 	.word	0x000820e9

00080784 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   80784:	4b16      	ldr	r3, [pc, #88]	; (807e0 <udc_update_iface_desc+0x5c>)
   80786:	781b      	ldrb	r3, [r3, #0]
   80788:	b30b      	cbz	r3, 807ce <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8078a:	4b16      	ldr	r3, [pc, #88]	; (807e4 <udc_update_iface_desc+0x60>)
   8078c:	681b      	ldr	r3, [r3, #0]
   8078e:	681b      	ldr	r3, [r3, #0]
   80790:	791a      	ldrb	r2, [r3, #4]
   80792:	4282      	cmp	r2, r0
   80794:	d91d      	bls.n	807d2 <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   80796:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80798:	4a13      	ldr	r2, [pc, #76]	; (807e8 <udc_update_iface_desc+0x64>)
   8079a:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8079c:	885c      	ldrh	r4, [r3, #2]
   8079e:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   807a0:	42a3      	cmp	r3, r4
   807a2:	d218      	bcs.n	807d6 <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   807a4:	785a      	ldrb	r2, [r3, #1]
   807a6:	2a04      	cmp	r2, #4
   807a8:	d109      	bne.n	807be <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   807aa:	789a      	ldrb	r2, [r3, #2]
   807ac:	4282      	cmp	r2, r0
   807ae:	d106      	bne.n	807be <udc_update_iface_desc+0x3a>
   807b0:	78da      	ldrb	r2, [r3, #3]
   807b2:	428a      	cmp	r2, r1
   807b4:	d103      	bne.n	807be <udc_update_iface_desc+0x3a>
   807b6:	4a0c      	ldr	r2, [pc, #48]	; (807e8 <udc_update_iface_desc+0x64>)
   807b8:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   807ba:	2001      	movs	r0, #1
   807bc:	e00c      	b.n	807d8 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   807be:	781a      	ldrb	r2, [r3, #0]
   807c0:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   807c2:	42a3      	cmp	r3, r4
   807c4:	d3ee      	bcc.n	807a4 <udc_update_iface_desc+0x20>
   807c6:	4a08      	ldr	r2, [pc, #32]	; (807e8 <udc_update_iface_desc+0x64>)
   807c8:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807ca:	2000      	movs	r0, #0
   807cc:	e004      	b.n	807d8 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   807ce:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
   807d0:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   807d2:	2000      	movs	r0, #0
   807d4:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   807d6:	2000      	movs	r0, #0
}
   807d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   807dc:	4770      	bx	lr
   807de:	bf00      	nop
   807e0:	20070b84 	.word	0x20070b84
   807e4:	20070b78 	.word	0x20070b78
   807e8:	20070b88 	.word	0x20070b88

000807ec <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   807ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   807f0:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   807f2:	2100      	movs	r1, #0
   807f4:	4b12      	ldr	r3, [pc, #72]	; (80840 <udc_iface_disable+0x54>)
   807f6:	4798      	blx	r3
   807f8:	4680      	mov	r8, r0
   807fa:	b1e8      	cbz	r0, 80838 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   807fc:	4b11      	ldr	r3, [pc, #68]	; (80844 <udc_iface_disable+0x58>)
   807fe:	681b      	ldr	r3, [r3, #0]
   80800:	685b      	ldr	r3, [r3, #4]
   80802:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80806:	f8d9 300c 	ldr.w	r3, [r9, #12]
   8080a:	4798      	blx	r3
   8080c:	4601      	mov	r1, r0
   8080e:	4620      	mov	r0, r4
   80810:	4b0b      	ldr	r3, [pc, #44]	; (80840 <udc_iface_disable+0x54>)
   80812:	4798      	blx	r3
   80814:	4680      	mov	r8, r0
   80816:	b178      	cbz	r0, 80838 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80818:	4b0b      	ldr	r3, [pc, #44]	; (80848 <udc_iface_disable+0x5c>)
   8081a:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8081c:	2605      	movs	r6, #5
   8081e:	4d0b      	ldr	r5, [pc, #44]	; (8084c <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80820:	4f0b      	ldr	r7, [pc, #44]	; (80850 <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80822:	4620      	mov	r0, r4
   80824:	4631      	mov	r1, r6
   80826:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   80828:	4604      	mov	r4, r0
   8082a:	b110      	cbz	r0, 80832 <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   8082c:	7880      	ldrb	r0, [r0, #2]
   8082e:	47b8      	blx	r7
		}
   80830:	e7f7      	b.n	80822 <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
   80832:	f8d9 3004 	ldr.w	r3, [r9, #4]
   80836:	4798      	blx	r3
	return true;
}
   80838:	4640      	mov	r0, r8
   8083a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8083e:	bf00      	nop
   80840:	00080785 	.word	0x00080785
   80844:	20070b78 	.word	0x20070b78
   80848:	20070b88 	.word	0x20070b88
   8084c:	00080729 	.word	0x00080729
   80850:	0008214d 	.word	0x0008214d

00080854 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   80854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80858:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8085a:	4b10      	ldr	r3, [pc, #64]	; (8089c <udc_iface_enable+0x48>)
   8085c:	4798      	blx	r3
   8085e:	4603      	mov	r3, r0
   80860:	b1c8      	cbz	r0, 80896 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   80862:	4b0f      	ldr	r3, [pc, #60]	; (808a0 <udc_iface_enable+0x4c>)
   80864:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80866:	2605      	movs	r6, #5
   80868:	4d0e      	ldr	r5, [pc, #56]	; (808a4 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8086a:	4f0f      	ldr	r7, [pc, #60]	; (808a8 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   8086c:	4620      	mov	r0, r4
   8086e:	4631      	mov	r1, r6
   80870:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   80872:	4604      	mov	r4, r0
   80874:	b138      	cbz	r0, 80886 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80876:	7880      	ldrb	r0, [r0, #2]
   80878:	78e1      	ldrb	r1, [r4, #3]
   8087a:	88a2      	ldrh	r2, [r4, #4]
   8087c:	47b8      	blx	r7
   8087e:	4603      	mov	r3, r0
   80880:	2800      	cmp	r0, #0
   80882:	d1f3      	bne.n	8086c <udc_iface_enable+0x18>
   80884:	e007      	b.n	80896 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80886:	4b09      	ldr	r3, [pc, #36]	; (808ac <udc_iface_enable+0x58>)
   80888:	681b      	ldr	r3, [r3, #0]
   8088a:	685b      	ldr	r3, [r3, #4]
   8088c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   80890:	681b      	ldr	r3, [r3, #0]
   80892:	4798      	blx	r3
   80894:	4603      	mov	r3, r0
}
   80896:	4618      	mov	r0, r3
   80898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8089c:	00080785 	.word	0x00080785
   808a0:	20070b88 	.word	0x20070b88
   808a4:	00080729 	.word	0x00080729
   808a8:	00082485 	.word	0x00082485
   808ac:	20070b78 	.word	0x20070b78

000808b0 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   808b0:	b508      	push	{r3, lr}
	udd_enable();
   808b2:	4b01      	ldr	r3, [pc, #4]	; (808b8 <udc_start+0x8>)
   808b4:	4798      	blx	r3
   808b6:	bd08      	pop	{r3, pc}
   808b8:	00081889 	.word	0x00081889

000808bc <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   808bc:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   808be:	4b0d      	ldr	r3, [pc, #52]	; (808f4 <udc_reset+0x38>)
   808c0:	781b      	ldrb	r3, [r3, #0]
   808c2:	b183      	cbz	r3, 808e6 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808c4:	4b0c      	ldr	r3, [pc, #48]	; (808f8 <udc_reset+0x3c>)
   808c6:	681b      	ldr	r3, [r3, #0]
   808c8:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808ca:	791b      	ldrb	r3, [r3, #4]
   808cc:	b15b      	cbz	r3, 808e6 <udc_reset+0x2a>
   808ce:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   808d0:	4e0a      	ldr	r6, [pc, #40]	; (808fc <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808d2:	4d09      	ldr	r5, [pc, #36]	; (808f8 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
   808d4:	4620      	mov	r0, r4
   808d6:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   808d8:	3401      	adds	r4, #1
   808da:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   808dc:	682b      	ldr	r3, [r5, #0]
   808de:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   808e0:	791b      	ldrb	r3, [r3, #4]
   808e2:	42a3      	cmp	r3, r4
   808e4:	d8f6      	bhi.n	808d4 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   808e6:	2200      	movs	r2, #0
   808e8:	4b02      	ldr	r3, [pc, #8]	; (808f4 <udc_reset+0x38>)
   808ea:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   808ec:	2201      	movs	r2, #1
   808ee:	4b04      	ldr	r3, [pc, #16]	; (80900 <udc_reset+0x44>)
   808f0:	801a      	strh	r2, [r3, #0]
   808f2:	bd70      	pop	{r4, r5, r6, pc}
   808f4:	20070b84 	.word	0x20070b84
   808f8:	20070b78 	.word	0x20070b78
   808fc:	000807ed 	.word	0x000807ed
   80900:	20070b82 	.word	0x20070b82

00080904 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   80904:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   80906:	4b0c      	ldr	r3, [pc, #48]	; (80938 <udc_sof_notify+0x34>)
   80908:	781b      	ldrb	r3, [r3, #0]
   8090a:	b19b      	cbz	r3, 80934 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8090c:	4b0b      	ldr	r3, [pc, #44]	; (8093c <udc_sof_notify+0x38>)
   8090e:	681b      	ldr	r3, [r3, #0]
   80910:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   80912:	7912      	ldrb	r2, [r2, #4]
   80914:	b172      	cbz	r2, 80934 <udc_sof_notify+0x30>
   80916:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80918:	4d08      	ldr	r5, [pc, #32]	; (8093c <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8091a:	685b      	ldr	r3, [r3, #4]
   8091c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80920:	691b      	ldr	r3, [r3, #16]
   80922:	b103      	cbz	r3, 80926 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80924:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   80926:	3401      	adds	r4, #1
   80928:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8092a:	682b      	ldr	r3, [r5, #0]
   8092c:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8092e:	7912      	ldrb	r2, [r2, #4]
   80930:	42a2      	cmp	r2, r4
   80932:	d8f2      	bhi.n	8091a <udc_sof_notify+0x16>
   80934:	bd38      	pop	{r3, r4, r5, pc}
   80936:	bf00      	nop
   80938:	20070b84 	.word	0x20070b84
   8093c:	20070b78 	.word	0x20070b78

00080940 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   80940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   80942:	4b90      	ldr	r3, [pc, #576]	; (80b84 <udc_process_setup+0x244>)
   80944:	2200      	movs	r2, #0
   80946:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80948:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8094a:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   8094c:	781b      	ldrb	r3, [r3, #0]
   8094e:	f013 0f80 	tst.w	r3, #128	; 0x80
   80952:	f000 81d2 	beq.w	80cfa <udc_process_setup+0x3ba>
		if (udd_g_ctrlreq.req.wLength == 0) {
   80956:	4a8b      	ldr	r2, [pc, #556]	; (80b84 <udc_process_setup+0x244>)
   80958:	88d2      	ldrh	r2, [r2, #6]
   8095a:	2a00      	cmp	r2, #0
   8095c:	f040 81d1 	bne.w	80d02 <udc_process_setup+0x3c2>
   80960:	e1c7      	b.n	80cf2 <udc_process_setup+0x3b2>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80962:	f013 031f 	ands.w	r3, r3, #31
   80966:	d165      	bne.n	80a34 <udc_process_setup+0xf4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80968:	4986      	ldr	r1, [pc, #536]	; (80b84 <udc_process_setup+0x244>)
   8096a:	7849      	ldrb	r1, [r1, #1]
   8096c:	2906      	cmp	r1, #6
   8096e:	d00b      	beq.n	80988 <udc_process_setup+0x48>
   80970:	2908      	cmp	r1, #8
   80972:	d057      	beq.n	80a24 <udc_process_setup+0xe4>
   80974:	2900      	cmp	r1, #0
   80976:	d15d      	bne.n	80a34 <udc_process_setup+0xf4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80978:	2a02      	cmp	r2, #2
   8097a:	f040 816a 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8097e:	4882      	ldr	r0, [pc, #520]	; (80b88 <udc_process_setup+0x248>)
   80980:	2102      	movs	r1, #2
   80982:	4b82      	ldr	r3, [pc, #520]	; (80b8c <udc_process_setup+0x24c>)
   80984:	4798      	blx	r3
   80986:	e1c0      	b.n	80d0a <udc_process_setup+0x3ca>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80988:	4b7e      	ldr	r3, [pc, #504]	; (80b84 <udc_process_setup+0x244>)
   8098a:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8098c:	0a13      	lsrs	r3, r2, #8
   8098e:	3b01      	subs	r3, #1
   80990:	2b0e      	cmp	r3, #14
   80992:	f200 8155 	bhi.w	80c40 <udc_process_setup+0x300>
   80996:	e8df f013 	tbh	[pc, r3, lsl #1]
   8099a:	000f      	.short	0x000f
   8099c:	00340016 	.word	0x00340016
   809a0:	01530153 	.word	0x01530153
   809a4:	01530153 	.word	0x01530153
   809a8:	01530153 	.word	0x01530153
   809ac:	01530153 	.word	0x01530153
   809b0:	01530153 	.word	0x01530153
   809b4:	002a0153 	.word	0x002a0153
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   809b8:	4b75      	ldr	r3, [pc, #468]	; (80b90 <udc_process_setup+0x250>)
   809ba:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   809bc:	4618      	mov	r0, r3
   809be:	7819      	ldrb	r1, [r3, #0]
   809c0:	4b72      	ldr	r3, [pc, #456]	; (80b8c <udc_process_setup+0x24c>)
   809c2:	4798      	blx	r3
   809c4:	e025      	b.n	80a12 <udc_process_setup+0xd2>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   809c6:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   809c8:	4b71      	ldr	r3, [pc, #452]	; (80b90 <udc_process_setup+0x250>)
   809ca:	681b      	ldr	r3, [r3, #0]
   809cc:	7c5b      	ldrb	r3, [r3, #17]
   809ce:	4293      	cmp	r3, r2
   809d0:	f240 813f 	bls.w	80c52 <udc_process_setup+0x312>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   809d4:	4b6e      	ldr	r3, [pc, #440]	; (80b90 <udc_process_setup+0x250>)
   809d6:	685b      	ldr	r3, [r3, #4]
   809d8:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   809dc:	4618      	mov	r0, r3
   809de:	8859      	ldrh	r1, [r3, #2]
   809e0:	4b6a      	ldr	r3, [pc, #424]	; (80b8c <udc_process_setup+0x24c>)
   809e2:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   809e4:	4b67      	ldr	r3, [pc, #412]	; (80b84 <udc_process_setup+0x244>)
   809e6:	689b      	ldr	r3, [r3, #8]
   809e8:	2202      	movs	r2, #2
   809ea:	705a      	strb	r2, [r3, #1]
   809ec:	e011      	b.n	80a12 <udc_process_setup+0xd2>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   809ee:	4b68      	ldr	r3, [pc, #416]	; (80b90 <udc_process_setup+0x250>)
   809f0:	689b      	ldr	r3, [r3, #8]
   809f2:	2b00      	cmp	r3, #0
   809f4:	f000 812d 	beq.w	80c52 <udc_process_setup+0x312>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   809f8:	4618      	mov	r0, r3
   809fa:	8859      	ldrh	r1, [r3, #2]
   809fc:	4b63      	ldr	r3, [pc, #396]	; (80b8c <udc_process_setup+0x24c>)
   809fe:	4798      	blx	r3
   80a00:	e007      	b.n	80a12 <udc_process_setup+0xd2>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   80a02:	f012 0fff 	tst.w	r2, #255	; 0xff
   80a06:	f040 8124 	bne.w	80c52 <udc_process_setup+0x312>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   80a0a:	4862      	ldr	r0, [pc, #392]	; (80b94 <udc_process_setup+0x254>)
   80a0c:	2104      	movs	r1, #4
   80a0e:	4b5f      	ldr	r3, [pc, #380]	; (80b8c <udc_process_setup+0x24c>)
   80a10:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   80a12:	4b5c      	ldr	r3, [pc, #368]	; (80b84 <udc_process_setup+0x244>)
   80a14:	88da      	ldrh	r2, [r3, #6]
   80a16:	899b      	ldrh	r3, [r3, #12]
   80a18:	4293      	cmp	r3, r2
   80a1a:	f240 8176 	bls.w	80d0a <udc_process_setup+0x3ca>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   80a1e:	4b59      	ldr	r3, [pc, #356]	; (80b84 <udc_process_setup+0x244>)
   80a20:	819a      	strh	r2, [r3, #12]
   80a22:	e172      	b.n	80d0a <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   80a24:	2a01      	cmp	r2, #1
   80a26:	f040 8114 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80a2a:	485b      	ldr	r0, [pc, #364]	; (80b98 <udc_process_setup+0x258>)
   80a2c:	2101      	movs	r1, #1
   80a2e:	4b57      	ldr	r3, [pc, #348]	; (80b8c <udc_process_setup+0x24c>)
   80a30:	4798      	blx	r3
   80a32:	e16a      	b.n	80d0a <udc_process_setup+0x3ca>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80a34:	2b01      	cmp	r3, #1
   80a36:	d127      	bne.n	80a88 <udc_process_setup+0x148>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a38:	4952      	ldr	r1, [pc, #328]	; (80b84 <udc_process_setup+0x244>)
   80a3a:	7849      	ldrb	r1, [r1, #1]
   80a3c:	290a      	cmp	r1, #10
   80a3e:	d123      	bne.n	80a88 <udc_process_setup+0x148>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   80a40:	2a01      	cmp	r2, #1
   80a42:	f040 8106 	bne.w	80c52 <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80a46:	4b54      	ldr	r3, [pc, #336]	; (80b98 <udc_process_setup+0x258>)
   80a48:	781b      	ldrb	r3, [r3, #0]
   80a4a:	2b00      	cmp	r3, #0
   80a4c:	f000 8101 	beq.w	80c52 <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80a50:	4b4c      	ldr	r3, [pc, #304]	; (80b84 <udc_process_setup+0x244>)
   80a52:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80a54:	4b51      	ldr	r3, [pc, #324]	; (80b9c <udc_process_setup+0x25c>)
   80a56:	681d      	ldr	r5, [r3, #0]
   80a58:	682b      	ldr	r3, [r5, #0]
   80a5a:	791b      	ldrb	r3, [r3, #4]
   80a5c:	42a3      	cmp	r3, r4
   80a5e:	f240 80f8 	bls.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80a62:	4620      	mov	r0, r4
   80a64:	2100      	movs	r1, #0
   80a66:	4b4e      	ldr	r3, [pc, #312]	; (80ba0 <udc_process_setup+0x260>)
   80a68:	4798      	blx	r3
   80a6a:	2800      	cmp	r0, #0
   80a6c:	f000 80f1 	beq.w	80c52 <udc_process_setup+0x312>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80a70:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   80a72:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80a76:	68db      	ldr	r3, [r3, #12]
   80a78:	4798      	blx	r3
   80a7a:	4b4a      	ldr	r3, [pc, #296]	; (80ba4 <udc_process_setup+0x264>)
   80a7c:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   80a7e:	4618      	mov	r0, r3
   80a80:	2101      	movs	r1, #1
   80a82:	4b42      	ldr	r3, [pc, #264]	; (80b8c <udc_process_setup+0x24c>)
   80a84:	4798      	blx	r3
   80a86:	e140      	b.n	80d0a <udc_process_setup+0x3ca>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80a88:	2b02      	cmp	r3, #2
   80a8a:	f040 80e2 	bne.w	80c52 <udc_process_setup+0x312>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80a8e:	4b3d      	ldr	r3, [pc, #244]	; (80b84 <udc_process_setup+0x244>)
   80a90:	785b      	ldrb	r3, [r3, #1]
   80a92:	2b00      	cmp	r3, #0
   80a94:	f040 80d6 	bne.w	80c44 <udc_process_setup+0x304>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80a98:	2a02      	cmp	r2, #2
   80a9a:	f040 80da 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   80a9e:	4b39      	ldr	r3, [pc, #228]	; (80b84 <udc_process_setup+0x244>)
   80aa0:	7918      	ldrb	r0, [r3, #4]
   80aa2:	4b41      	ldr	r3, [pc, #260]	; (80ba8 <udc_process_setup+0x268>)
   80aa4:	4798      	blx	r3
   80aa6:	4b41      	ldr	r3, [pc, #260]	; (80bac <udc_process_setup+0x26c>)
   80aa8:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80aaa:	4618      	mov	r0, r3
   80aac:	2102      	movs	r1, #2
   80aae:	4b37      	ldr	r3, [pc, #220]	; (80b8c <udc_process_setup+0x24c>)
   80ab0:	4798      	blx	r3
   80ab2:	e12a      	b.n	80d0a <udc_process_setup+0x3ca>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80ab4:	f013 031f 	ands.w	r3, r3, #31
   80ab8:	f040 8082 	bne.w	80bc0 <udc_process_setup+0x280>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80abc:	4a31      	ldr	r2, [pc, #196]	; (80b84 <udc_process_setup+0x244>)
   80abe:	7852      	ldrb	r2, [r2, #1]
   80ac0:	3a01      	subs	r2, #1
   80ac2:	2a08      	cmp	r2, #8
   80ac4:	d87c      	bhi.n	80bc0 <udc_process_setup+0x280>
   80ac6:	e8df f012 	tbh	[pc, r2, lsl #1]
   80aca:	0012      	.short	0x0012
   80acc:	00bf007b 	.word	0x00bf007b
   80ad0:	0009007b 	.word	0x0009007b
   80ad4:	007b007b 	.word	0x007b007b
   80ad8:	0022007b 	.word	0x0022007b
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80adc:	4b29      	ldr	r3, [pc, #164]	; (80b84 <udc_process_setup+0x244>)
   80ade:	88db      	ldrh	r3, [r3, #6]
   80ae0:	2b00      	cmp	r3, #0
   80ae2:	f040 80b6 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   80ae6:	4a32      	ldr	r2, [pc, #200]	; (80bb0 <udc_process_setup+0x270>)
   80ae8:	4b26      	ldr	r3, [pc, #152]	; (80b84 <udc_process_setup+0x244>)
   80aea:	611a      	str	r2, [r3, #16]
   80aec:	e10d      	b.n	80d0a <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80aee:	4b25      	ldr	r3, [pc, #148]	; (80b84 <udc_process_setup+0x244>)
   80af0:	88db      	ldrh	r3, [r3, #6]
   80af2:	2b00      	cmp	r3, #0
   80af4:	f040 80ad 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   80af8:	4b22      	ldr	r3, [pc, #136]	; (80b84 <udc_process_setup+0x244>)
   80afa:	885b      	ldrh	r3, [r3, #2]
   80afc:	2b01      	cmp	r3, #1
   80afe:	f040 80a8 	bne.w	80c52 <udc_process_setup+0x312>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   80b02:	4a21      	ldr	r2, [pc, #132]	; (80b88 <udc_process_setup+0x248>)
   80b04:	8813      	ldrh	r3, [r2, #0]
   80b06:	f023 0302 	bic.w	r3, r3, #2
   80b0a:	8013      	strh	r3, [r2, #0]
   80b0c:	e0fd      	b.n	80d0a <udc_process_setup+0x3ca>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   80b0e:	4b1d      	ldr	r3, [pc, #116]	; (80b84 <udc_process_setup+0x244>)
   80b10:	88db      	ldrh	r3, [r3, #6]
   80b12:	2b00      	cmp	r3, #0
   80b14:	f040 809d 	bne.w	80c52 <udc_process_setup+0x312>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   80b18:	4b26      	ldr	r3, [pc, #152]	; (80bb4 <udc_process_setup+0x274>)
   80b1a:	4798      	blx	r3
   80b1c:	2800      	cmp	r0, #0
   80b1e:	f000 8098 	beq.w	80c52 <udc_process_setup+0x312>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b22:	4b18      	ldr	r3, [pc, #96]	; (80b84 <udc_process_setup+0x244>)
   80b24:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   80b26:	4b1a      	ldr	r3, [pc, #104]	; (80b90 <udc_process_setup+0x250>)
   80b28:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80b2a:	7c5b      	ldrb	r3, [r3, #17]
   80b2c:	429a      	cmp	r2, r3
   80b2e:	f300 8090 	bgt.w	80c52 <udc_process_setup+0x312>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   80b32:	4b21      	ldr	r3, [pc, #132]	; (80bb8 <udc_process_setup+0x278>)
   80b34:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80b36:	4b13      	ldr	r3, [pc, #76]	; (80b84 <udc_process_setup+0x244>)
   80b38:	789b      	ldrb	r3, [r3, #2]
   80b3a:	4a17      	ldr	r2, [pc, #92]	; (80b98 <udc_process_setup+0x258>)
   80b3c:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   80b3e:	2b00      	cmp	r3, #0
   80b40:	f000 80e3 	beq.w	80d0a <udc_process_setup+0x3ca>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80b44:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80b48:	3b01      	subs	r3, #1
   80b4a:	4a11      	ldr	r2, [pc, #68]	; (80b90 <udc_process_setup+0x250>)
   80b4c:	6852      	ldr	r2, [r2, #4]
   80b4e:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   80b52:	4912      	ldr	r1, [pc, #72]	; (80b9c <udc_process_setup+0x25c>)
   80b54:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b56:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   80b5a:	791b      	ldrb	r3, [r3, #4]
   80b5c:	2b00      	cmp	r3, #0
   80b5e:	f000 80d4 	beq.w	80d0a <udc_process_setup+0x3ca>
   80b62:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b64:	4626      	mov	r6, r4
   80b66:	4d15      	ldr	r5, [pc, #84]	; (80bbc <udc_process_setup+0x27c>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b68:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80b6a:	4620      	mov	r0, r4
   80b6c:	4631      	mov	r1, r6
   80b6e:	47a8      	blx	r5
   80b70:	2800      	cmp	r0, #0
   80b72:	d06e      	beq.n	80c52 <udc_process_setup+0x312>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80b74:	3401      	adds	r4, #1
   80b76:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b78:	683b      	ldr	r3, [r7, #0]
   80b7a:	681b      	ldr	r3, [r3, #0]
   80b7c:	791b      	ldrb	r3, [r3, #4]
   80b7e:	42a3      	cmp	r3, r4
   80b80:	d8f3      	bhi.n	80b6a <udc_process_setup+0x22a>
   80b82:	e0c2      	b.n	80d0a <udc_process_setup+0x3ca>
   80b84:	20070c9c 	.word	0x20070c9c
   80b88:	20070b82 	.word	0x20070b82
   80b8c:	00082141 	.word	0x00082141
   80b90:	20070160 	.word	0x20070160
   80b94:	200701d4 	.word	0x200701d4
   80b98:	20070b84 	.word	0x20070b84
   80b9c:	20070b78 	.word	0x20070b78
   80ba0:	00080785 	.word	0x00080785
   80ba4:	20070b80 	.word	0x20070b80
   80ba8:	000821a9 	.word	0x000821a9
   80bac:	20070b7c 	.word	0x20070b7c
   80bb0:	0008076d 	.word	0x0008076d
   80bb4:	00082111 	.word	0x00082111
   80bb8:	000808bd 	.word	0x000808bd
   80bbc:	00080855 	.word	0x00080855
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80bc0:	2b01      	cmp	r3, #1
   80bc2:	d119      	bne.n	80bf8 <udc_process_setup+0x2b8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bc4:	4a52      	ldr	r2, [pc, #328]	; (80d10 <udc_process_setup+0x3d0>)
   80bc6:	7852      	ldrb	r2, [r2, #1]
   80bc8:	2a0b      	cmp	r2, #11
   80bca:	d115      	bne.n	80bf8 <udc_process_setup+0x2b8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80bcc:	4b50      	ldr	r3, [pc, #320]	; (80d10 <udc_process_setup+0x3d0>)
   80bce:	88db      	ldrh	r3, [r3, #6]
   80bd0:	2b00      	cmp	r3, #0
   80bd2:	d13e      	bne.n	80c52 <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80bd4:	4b4f      	ldr	r3, [pc, #316]	; (80d14 <udc_process_setup+0x3d4>)
   80bd6:	781b      	ldrb	r3, [r3, #0]
   80bd8:	2b00      	cmp	r3, #0
   80bda:	d03a      	beq.n	80c52 <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80bdc:	4b4c      	ldr	r3, [pc, #304]	; (80d10 <udc_process_setup+0x3d0>)
   80bde:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80be0:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80be2:	4620      	mov	r0, r4
   80be4:	4b4c      	ldr	r3, [pc, #304]	; (80d18 <udc_process_setup+0x3d8>)
   80be6:	4798      	blx	r3
   80be8:	2800      	cmp	r0, #0
   80bea:	d032      	beq.n	80c52 <udc_process_setup+0x312>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80bec:	4620      	mov	r0, r4
   80bee:	b2e9      	uxtb	r1, r5
   80bf0:	4b4a      	ldr	r3, [pc, #296]	; (80d1c <udc_process_setup+0x3dc>)
   80bf2:	4798      	blx	r3
   80bf4:	4603      	mov	r3, r0
   80bf6:	e02a      	b.n	80c4e <udc_process_setup+0x30e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80bf8:	2b02      	cmp	r3, #2
   80bfa:	d12a      	bne.n	80c52 <udc_process_setup+0x312>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80bfc:	4b44      	ldr	r3, [pc, #272]	; (80d10 <udc_process_setup+0x3d0>)
   80bfe:	785b      	ldrb	r3, [r3, #1]
   80c00:	2b01      	cmp	r3, #1
   80c02:	d002      	beq.n	80c0a <udc_process_setup+0x2ca>
   80c04:	2b03      	cmp	r3, #3
   80c06:	d00c      	beq.n	80c22 <udc_process_setup+0x2e2>
   80c08:	e020      	b.n	80c4c <udc_process_setup+0x30c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c0a:	4b41      	ldr	r3, [pc, #260]	; (80d10 <udc_process_setup+0x3d0>)
   80c0c:	88db      	ldrh	r3, [r3, #6]
   80c0e:	bb03      	cbnz	r3, 80c52 <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c10:	4b3f      	ldr	r3, [pc, #252]	; (80d10 <udc_process_setup+0x3d0>)
   80c12:	885b      	ldrh	r3, [r3, #2]
   80c14:	b9eb      	cbnz	r3, 80c52 <udc_process_setup+0x312>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c16:	4b3e      	ldr	r3, [pc, #248]	; (80d10 <udc_process_setup+0x3d0>)
   80c18:	7918      	ldrb	r0, [r3, #4]
   80c1a:	4b41      	ldr	r3, [pc, #260]	; (80d20 <udc_process_setup+0x3e0>)
   80c1c:	4798      	blx	r3
   80c1e:	4603      	mov	r3, r0
   80c20:	e015      	b.n	80c4e <udc_process_setup+0x30e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80c22:	4b3b      	ldr	r3, [pc, #236]	; (80d10 <udc_process_setup+0x3d0>)
   80c24:	88db      	ldrh	r3, [r3, #6]
   80c26:	b9a3      	cbnz	r3, 80c52 <udc_process_setup+0x312>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80c28:	4b39      	ldr	r3, [pc, #228]	; (80d10 <udc_process_setup+0x3d0>)
   80c2a:	885b      	ldrh	r3, [r3, #2]
   80c2c:	b98b      	cbnz	r3, 80c52 <udc_process_setup+0x312>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c2e:	4c38      	ldr	r4, [pc, #224]	; (80d10 <udc_process_setup+0x3d0>)
   80c30:	7920      	ldrb	r0, [r4, #4]
   80c32:	4b3c      	ldr	r3, [pc, #240]	; (80d24 <udc_process_setup+0x3e4>)
   80c34:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80c36:	7920      	ldrb	r0, [r4, #4]
   80c38:	4b3b      	ldr	r3, [pc, #236]	; (80d28 <udc_process_setup+0x3e8>)
   80c3a:	4798      	blx	r3
   80c3c:	4603      	mov	r3, r0
   80c3e:	e006      	b.n	80c4e <udc_process_setup+0x30e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   80c40:	2300      	movs	r3, #0
   80c42:	e004      	b.n	80c4e <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
   80c44:	2300      	movs	r3, #0
   80c46:	e002      	b.n	80c4e <udc_process_setup+0x30e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80c48:	2300      	movs	r3, #0
   80c4a:	e000      	b.n	80c4e <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
   80c4c:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   80c4e:	2b00      	cmp	r3, #0
   80c50:	d15c      	bne.n	80d0c <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80c52:	4b2f      	ldr	r3, [pc, #188]	; (80d10 <udc_process_setup+0x3d0>)
   80c54:	781b      	ldrb	r3, [r3, #0]
   80c56:	f003 031f 	and.w	r3, r3, #31
   80c5a:	2b01      	cmp	r3, #1
   80c5c:	d11e      	bne.n	80c9c <udc_process_setup+0x35c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80c5e:	4b2d      	ldr	r3, [pc, #180]	; (80d14 <udc_process_setup+0x3d4>)
   80c60:	781b      	ldrb	r3, [r3, #0]
   80c62:	b1db      	cbz	r3, 80c9c <udc_process_setup+0x35c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80c64:	4b2a      	ldr	r3, [pc, #168]	; (80d10 <udc_process_setup+0x3d0>)
   80c66:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80c68:	4b30      	ldr	r3, [pc, #192]	; (80d2c <udc_process_setup+0x3ec>)
   80c6a:	681d      	ldr	r5, [r3, #0]
   80c6c:	682b      	ldr	r3, [r5, #0]
   80c6e:	791b      	ldrb	r3, [r3, #4]
   80c70:	42a3      	cmp	r3, r4
   80c72:	d913      	bls.n	80c9c <udc_process_setup+0x35c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80c74:	4620      	mov	r0, r4
   80c76:	2100      	movs	r1, #0
   80c78:	4b2d      	ldr	r3, [pc, #180]	; (80d30 <udc_process_setup+0x3f0>)
   80c7a:	4798      	blx	r3
   80c7c:	b170      	cbz	r0, 80c9c <udc_process_setup+0x35c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80c7e:	686b      	ldr	r3, [r5, #4]
   80c80:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80c84:	68eb      	ldr	r3, [r5, #12]
   80c86:	4798      	blx	r3
   80c88:	4601      	mov	r1, r0
   80c8a:	4620      	mov	r0, r4
   80c8c:	4b28      	ldr	r3, [pc, #160]	; (80d30 <udc_process_setup+0x3f0>)
   80c8e:	4798      	blx	r3
   80c90:	b120      	cbz	r0, 80c9c <udc_process_setup+0x35c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80c92:	68ab      	ldr	r3, [r5, #8]
   80c94:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   80c96:	4603      	mov	r3, r0
   80c98:	2800      	cmp	r0, #0
   80c9a:	d137      	bne.n	80d0c <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80c9c:	4b1c      	ldr	r3, [pc, #112]	; (80d10 <udc_process_setup+0x3d0>)
   80c9e:	781b      	ldrb	r3, [r3, #0]
   80ca0:	f003 031f 	and.w	r3, r3, #31
   80ca4:	2b02      	cmp	r3, #2
   80ca6:	d126      	bne.n	80cf6 <udc_process_setup+0x3b6>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80ca8:	4b1a      	ldr	r3, [pc, #104]	; (80d14 <udc_process_setup+0x3d4>)
   80caa:	781b      	ldrb	r3, [r3, #0]
   80cac:	b1eb      	cbz	r3, 80cea <udc_process_setup+0x3aa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cae:	4b1f      	ldr	r3, [pc, #124]	; (80d2c <udc_process_setup+0x3ec>)
   80cb0:	681a      	ldr	r2, [r3, #0]
   80cb2:	6813      	ldr	r3, [r2, #0]
   80cb4:	791b      	ldrb	r3, [r3, #4]
   80cb6:	b1d3      	cbz	r3, 80cee <udc_process_setup+0x3ae>
   80cb8:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cba:	4e1d      	ldr	r6, [pc, #116]	; (80d30 <udc_process_setup+0x3f0>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cbc:	4f1b      	ldr	r7, [pc, #108]	; (80d2c <udc_process_setup+0x3ec>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80cbe:	6853      	ldr	r3, [r2, #4]
   80cc0:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80cc4:	68eb      	ldr	r3, [r5, #12]
   80cc6:	4798      	blx	r3
   80cc8:	4601      	mov	r1, r0
   80cca:	4620      	mov	r0, r4
   80ccc:	47b0      	blx	r6
   80cce:	4603      	mov	r3, r0
   80cd0:	b1e0      	cbz	r0, 80d0c <udc_process_setup+0x3cc>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   80cd2:	68ab      	ldr	r3, [r5, #8]
   80cd4:	4798      	blx	r3
   80cd6:	4603      	mov	r3, r0
   80cd8:	b9c0      	cbnz	r0, 80d0c <udc_process_setup+0x3cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80cda:	3401      	adds	r4, #1
   80cdc:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80cde:	683a      	ldr	r2, [r7, #0]
   80ce0:	6811      	ldr	r1, [r2, #0]
   80ce2:	7909      	ldrb	r1, [r1, #4]
   80ce4:	42a1      	cmp	r1, r4
   80ce6:	d8ea      	bhi.n	80cbe <udc_process_setup+0x37e>
   80ce8:	e010      	b.n	80d0c <udc_process_setup+0x3cc>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   80cea:	2300      	movs	r3, #0
   80cec:	e00e      	b.n	80d0c <udc_process_setup+0x3cc>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   80cee:	2300      	movs	r3, #0
   80cf0:	e00c      	b.n	80d0c <udc_process_setup+0x3cc>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   80cf2:	2300      	movs	r3, #0
   80cf4:	e00a      	b.n	80d0c <udc_process_setup+0x3cc>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80cf6:	2300      	movs	r3, #0
   80cf8:	e008      	b.n	80d0c <udc_process_setup+0x3cc>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80cfa:	f013 0f60 	tst.w	r3, #96	; 0x60
   80cfe:	d1a8      	bne.n	80c52 <udc_process_setup+0x312>
   80d00:	e6d8      	b.n	80ab4 <udc_process_setup+0x174>
   80d02:	f013 0f60 	tst.w	r3, #96	; 0x60
   80d06:	d1a4      	bne.n	80c52 <udc_process_setup+0x312>
   80d08:	e62b      	b.n	80962 <udc_process_setup+0x22>
		if (udc_reqstd()) {
			return true;
   80d0a:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
   80d0c:	4618      	mov	r0, r3
   80d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d10:	20070c9c 	.word	0x20070c9c
   80d14:	20070b84 	.word	0x20070b84
   80d18:	000807ed 	.word	0x000807ed
   80d1c:	00080855 	.word	0x00080855
   80d20:	000822b1 	.word	0x000822b1
   80d24:	00082699 	.word	0x00082699
   80d28:	000821bd 	.word	0x000821bd
   80d2c:	20070b78 	.word	0x20070b78
   80d30:	00080785 	.word	0x00080785

00080d34 <can_disable_tx_repeat>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable_tx_repeat(Can *p_can)
{
	p_can->CAN_MR |= CAN_MR_DRPT;
   80d34:	6803      	ldr	r3, [r0, #0]
   80d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80d3a:	6003      	str	r3, [r0, #0]
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop

00080d40 <can_mailbox_init>:
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80d40:	680b      	ldr	r3, [r1, #0]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80d42:	790a      	ldrb	r2, [r1, #4]
   80d44:	b982      	cbnz	r2, 80d68 <can_mailbox_init+0x28>
   80d46:	b2db      	uxtb	r3, r3
   80d48:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   80d4c:	2300      	movs	r3, #0
   80d4e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   80d52:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   80d56:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   80d5a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   80d5e:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   80d62:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
   80d66:	4770      	bx	lr
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80d68:	b430      	push	{r4, r5}
   80d6a:	b2db      	uxtb	r3, r3
   80d6c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80d70:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   80d74:	79cd      	ldrb	r5, [r1, #7]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80d76:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
   80d7a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80d7e:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   80d82:	794c      	ldrb	r4, [r1, #5]
   80d84:	b154      	cbz	r4, 80d9c <can_mailbox_init+0x5c>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   80d86:	68cc      	ldr	r4, [r1, #12]
   80d88:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   80d8c:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80d90:	690c      	ldr	r4, [r1, #16]
   80d92:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   80d96:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
   80d9a:	e007      	b.n	80dac <can_mailbox_init+0x6c>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80d9c:	68cc      	ldr	r4, [r1, #12]
   80d9e:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80da2:	690c      	ldr	r4, [r1, #16]
   80da4:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   80da8:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80dac:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80db0:	7909      	ldrb	r1, [r1, #4]
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
   80db6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80dba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80dbe:	bc30      	pop	{r4, r5}
   80dc0:	4770      	bx	lr
   80dc2:	bf00      	nop

00080dc4 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80dc4:	b570      	push	{r4, r5, r6, lr}
   80dc6:	b088      	sub	sp, #32
   80dc8:	4606      	mov	r6, r0
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80dca:	2400      	movs	r4, #0
   80dcc:	f88d 4004 	strb.w	r4, [sp, #4]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
   80dd0:	4d04      	ldr	r5, [pc, #16]	; (80de4 <can_reset_all_mailbox+0x20>)

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
   80dd2:	9400      	str	r4, [sp, #0]
		can_mailbox_init(p_can, &mb_config_t);
   80dd4:	4630      	mov	r0, r6
   80dd6:	4669      	mov	r1, sp
   80dd8:	47a8      	blx	r5
   80dda:	3401      	adds	r4, #1
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80ddc:	2c08      	cmp	r4, #8
   80dde:	d1f8      	bne.n	80dd2 <can_reset_all_mailbox+0xe>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80de0:	b008      	add	sp, #32
   80de2:	bd70      	pop	{r4, r5, r6, pc}
   80de4:	00080d41 	.word	0x00080d41

00080de8 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   80de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80dea:	f246 13a8 	movw	r3, #25000	; 0x61a8
   80dee:	fb03 f402 	mul.w	r4, r3, r2
   80df2:	190b      	adds	r3, r1, r4
   80df4:	3b01      	subs	r3, #1
   80df6:	fbb3 f3f4 	udiv	r3, r3, r4
   80dfa:	2b80      	cmp	r3, #128	; 0x80
   80dfc:	d864      	bhi.n	80ec8 <can_init+0xe0>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   80dfe:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
   80e02:	fb04 f402 	mul.w	r4, r4, r2
   80e06:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
   80e0a:	d85f      	bhi.n	80ecc <can_init+0xe4>
   80e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80e10:	fb03 f202 	mul.w	r2, r3, r2
   80e14:	2708      	movs	r7, #8
   80e16:	f04f 36ff 	mov.w	r6, #4294967295
   80e1a:	463b      	mov	r3, r7
	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80e1c:	fbb1 f5f4 	udiv	r5, r1, r4
   80e20:	2d80      	cmp	r5, #128	; 0x80
   80e22:	d806      	bhi.n	80e32 <can_init+0x4a>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80e24:	fb04 1515 	mls	r5, r4, r5, r1
			if (ul_cur_mod < ul_mod) {
   80e28:	42b5      	cmp	r5, r6
   80e2a:	d202      	bcs.n	80e32 <can_init+0x4a>
				ul_mod = ul_cur_mod;
				uc_tq = i;
				if (!ul_mod) {
   80e2c:	b13d      	cbz	r5, 80e3e <can_init+0x56>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
			if (ul_cur_mod < ul_mod) {
				ul_mod = ul_cur_mod;
   80e2e:	462e      	mov	r6, r5
				uc_tq = i;
				if (!ul_mod) {
   80e30:	461f      	mov	r7, r3

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80e32:	3301      	adds	r3, #1
   80e34:	b2db      	uxtb	r3, r3
   80e36:	4414      	add	r4, r2
   80e38:	2b1a      	cmp	r3, #26
   80e3a:	d1ef      	bne.n	80e1c <can_init+0x34>
   80e3c:	e000      	b.n	80e40 <can_init+0x58>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
			if (ul_cur_mod < ul_mod) {
				ul_mod = ul_cur_mod;
				uc_tq = i;
				if (!ul_mod) {
   80e3e:	461f      	mov	r7, r3
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80e40:	fb02 f207 	mul.w	r2, r2, r7
   80e44:	fbb1 f1f2 	udiv	r1, r1, r2
	if (uc_prescale < 2) {
   80e48:	b2cb      	uxtb	r3, r1
   80e4a:	2b01      	cmp	r3, #1
   80e4c:	d940      	bls.n	80ed0 <can_init+0xe8>
   80e4e:	4604      	mov	r4, r0
		return 0;
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   80e50:	3f08      	subs	r7, #8
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80e52:	6803      	ldr	r3, [r0, #0]
   80e54:	f023 0301 	bic.w	r3, r3, #1
   80e58:	6003      	str	r3, [r0, #0]
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80e5a:	481e      	ldr	r0, [pc, #120]	; (80ed4 <can_init+0xec>)
   80e5c:	007d      	lsls	r5, r7, #1
   80e5e:	19ee      	adds	r6, r5, r7
   80e60:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   80e64:	78b3      	ldrb	r3, [r6, #2]
   80e66:	3b01      	subs	r3, #1
   80e68:	011b      	lsls	r3, r3, #4
   80e6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80e6e:	7873      	ldrb	r3, [r6, #1]
   80e70:	3b01      	subs	r3, #1
   80e72:	021b      	lsls	r3, r3, #8
   80e74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80e78:	4313      	orrs	r3, r2

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80e7a:	78f2      	ldrb	r2, [r6, #3]
   80e7c:	3a01      	subs	r2, #1
   80e7e:	f002 0207 	and.w	r2, r2, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80e82:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80e84:	7933      	ldrb	r3, [r6, #4]
   80e86:	3b01      	subs	r3, #1
   80e88:	031b      	lsls	r3, r3, #12
   80e8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80e8e:	431a      	orrs	r2, r3
   80e90:	b2c9      	uxtb	r1, r1
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   80e92:	1e4b      	subs	r3, r1, #1
   80e94:	041b      	lsls	r3, r3, #16
   80e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80e9a:	4313      	orrs	r3, r2

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80e9c:	6163      	str	r3, [r4, #20]
	if (ul_flag == 0) {
		return 0;
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   80e9e:	4620      	mov	r0, r4
   80ea0:	4b0d      	ldr	r3, [pc, #52]	; (80ed8 <can_init+0xf0>)
   80ea2:	4798      	blx	r3
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
	p_can->CAN_MR |= CAN_MR_CANEN;
   80ea4:	6823      	ldr	r3, [r4, #0]
   80ea6:	f043 0301 	orr.w	r3, r3, #1
   80eaa:	6023      	str	r3, [r4, #0]
   80eac:	2300      	movs	r3, #0
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80eae:	490b      	ldr	r1, [pc, #44]	; (80edc <can_init+0xf4>)
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
	return (p_can->CAN_SR);
   80eb0:	6922      	ldr	r2, [r4, #16]
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
		ul_flag = can_get_status(p_can);
		ul_tick++;
   80eb2:	3301      	adds	r3, #1
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80eb4:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
   80eb8:	d101      	bne.n	80ebe <can_init+0xd6>
   80eba:	428b      	cmp	r3, r1
   80ebc:	d1f8      	bne.n	80eb0 <can_init+0xc8>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   80ebe:	4807      	ldr	r0, [pc, #28]	; (80edc <can_init+0xf4>)
   80ec0:	1a18      	subs	r0, r3, r0
   80ec2:	bf18      	it	ne
   80ec4:	2001      	movne	r0, #1
   80ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
	if (ul_flag == 0) {
		return 0;
   80ec8:	2000      	movs	r0, #0
   80eca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ecc:	2000      	movs	r0, #0
   80ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ed0:	2000      	movs	r0, #0
	if (CAN_TIMEOUT == ul_tick) {
		return 0;
	} else {
		return 1;
	}
}
   80ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ed4:	000833f4 	.word	0x000833f4
   80ed8:	00080dc5 	.word	0x00080dc5
   80edc:	000186a0 	.word	0x000186a0

00080ee0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ee4:	4604      	mov	r4, r0
   80ee6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ee8:	4b0e      	ldr	r3, [pc, #56]	; (80f24 <pio_handler_process+0x44>)
   80eea:	4798      	blx	r3
   80eec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80eee:	4620      	mov	r0, r4
   80ef0:	4b0d      	ldr	r3, [pc, #52]	; (80f28 <pio_handler_process+0x48>)
   80ef2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80ef4:	4005      	ands	r5, r0
   80ef6:	d013      	beq.n	80f20 <pio_handler_process+0x40>
   80ef8:	4c0c      	ldr	r4, [pc, #48]	; (80f2c <pio_handler_process+0x4c>)
   80efa:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80efe:	6823      	ldr	r3, [r4, #0]
   80f00:	4543      	cmp	r3, r8
   80f02:	d108      	bne.n	80f16 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80f04:	6861      	ldr	r1, [r4, #4]
   80f06:	4229      	tst	r1, r5
   80f08:	d005      	beq.n	80f16 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80f0a:	68e3      	ldr	r3, [r4, #12]
   80f0c:	4640      	mov	r0, r8
   80f0e:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80f10:	6863      	ldr	r3, [r4, #4]
   80f12:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80f16:	42b4      	cmp	r4, r6
   80f18:	d002      	beq.n	80f20 <pio_handler_process+0x40>
   80f1a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80f1c:	2d00      	cmp	r5, #0
   80f1e:	d1ee      	bne.n	80efe <pio_handler_process+0x1e>
   80f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f24:	00081101 	.word	0x00081101
   80f28:	00081105 	.word	0x00081105
   80f2c:	20070b8c 	.word	0x20070b8c

00080f30 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80f30:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80f32:	4802      	ldr	r0, [pc, #8]	; (80f3c <PIOA_Handler+0xc>)
   80f34:	210b      	movs	r1, #11
   80f36:	4b02      	ldr	r3, [pc, #8]	; (80f40 <PIOA_Handler+0x10>)
   80f38:	4798      	blx	r3
   80f3a:	bd08      	pop	{r3, pc}
   80f3c:	400e0e00 	.word	0x400e0e00
   80f40:	00080ee1 	.word	0x00080ee1

00080f44 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80f44:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80f46:	4802      	ldr	r0, [pc, #8]	; (80f50 <PIOB_Handler+0xc>)
   80f48:	210c      	movs	r1, #12
   80f4a:	4b02      	ldr	r3, [pc, #8]	; (80f54 <PIOB_Handler+0x10>)
   80f4c:	4798      	blx	r3
   80f4e:	bd08      	pop	{r3, pc}
   80f50:	400e1000 	.word	0x400e1000
   80f54:	00080ee1 	.word	0x00080ee1

00080f58 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   80f58:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   80f5a:	4b04      	ldr	r3, [pc, #16]	; (80f6c <sysclk_enable_usb+0x14>)
   80f5c:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   80f5e:	2000      	movs	r0, #0
   80f60:	4b03      	ldr	r3, [pc, #12]	; (80f70 <sysclk_enable_usb+0x18>)
   80f62:	4798      	blx	r3
		pmc_enable_udpck();
   80f64:	4b03      	ldr	r3, [pc, #12]	; (80f74 <sysclk_enable_usb+0x1c>)
   80f66:	4798      	blx	r3
   80f68:	bd08      	pop	{r3, pc}
   80f6a:	bf00      	nop
   80f6c:	00081225 	.word	0x00081225
   80f70:	00081291 	.word	0x00081291
   80f74:	000812a5 	.word	0x000812a5

00080f78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80f78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80f7a:	480e      	ldr	r0, [pc, #56]	; (80fb4 <sysclk_init+0x3c>)
   80f7c:	4b0e      	ldr	r3, [pc, #56]	; (80fb8 <sysclk_init+0x40>)
   80f7e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80f80:	2000      	movs	r0, #0
   80f82:	213e      	movs	r1, #62	; 0x3e
   80f84:	4b0d      	ldr	r3, [pc, #52]	; (80fbc <sysclk_init+0x44>)
   80f86:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80f88:	4c0d      	ldr	r4, [pc, #52]	; (80fc0 <sysclk_init+0x48>)
   80f8a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80f8c:	2800      	cmp	r0, #0
   80f8e:	d0fc      	beq.n	80f8a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80f90:	4b0c      	ldr	r3, [pc, #48]	; (80fc4 <sysclk_init+0x4c>)
   80f92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80f94:	4a0c      	ldr	r2, [pc, #48]	; (80fc8 <sysclk_init+0x50>)
   80f96:	4b0d      	ldr	r3, [pc, #52]	; (80fcc <sysclk_init+0x54>)
   80f98:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80f9a:	4c0d      	ldr	r4, [pc, #52]	; (80fd0 <sysclk_init+0x58>)
   80f9c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80f9e:	2800      	cmp	r0, #0
   80fa0:	d0fc      	beq.n	80f9c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80fa2:	2010      	movs	r0, #16
   80fa4:	4b0b      	ldr	r3, [pc, #44]	; (80fd4 <sysclk_init+0x5c>)
   80fa6:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80fa8:	4b0b      	ldr	r3, [pc, #44]	; (80fd8 <sysclk_init+0x60>)
   80faa:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80fac:	4801      	ldr	r0, [pc, #4]	; (80fb4 <sysclk_init+0x3c>)
   80fae:	4b02      	ldr	r3, [pc, #8]	; (80fb8 <sysclk_init+0x40>)
   80fb0:	4798      	blx	r3
   80fb2:	bd10      	pop	{r4, pc}
   80fb4:	0501bd00 	.word	0x0501bd00
   80fb8:	200700b1 	.word	0x200700b1
   80fbc:	000811a1 	.word	0x000811a1
   80fc0:	000811f5 	.word	0x000811f5
   80fc4:	00081205 	.word	0x00081205
   80fc8:	200d3f01 	.word	0x200d3f01
   80fcc:	400e0600 	.word	0x400e0600
   80fd0:	00081215 	.word	0x00081215
   80fd4:	00081139 	.word	0x00081139
   80fd8:	000828b9 	.word	0x000828b9

00080fdc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80fdc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80fde:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80fe2:	d016      	beq.n	81012 <pio_set_peripheral+0x36>
   80fe4:	d804      	bhi.n	80ff0 <pio_set_peripheral+0x14>
   80fe6:	b1c1      	cbz	r1, 8101a <pio_set_peripheral+0x3e>
   80fe8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80fec:	d00a      	beq.n	81004 <pio_set_peripheral+0x28>
   80fee:	e013      	b.n	81018 <pio_set_peripheral+0x3c>
   80ff0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80ff4:	d011      	beq.n	8101a <pio_set_peripheral+0x3e>
   80ff6:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80ffa:	d00e      	beq.n	8101a <pio_set_peripheral+0x3e>
   80ffc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81000:	d10a      	bne.n	81018 <pio_set_peripheral+0x3c>
   81002:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81004:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81006:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81008:	400b      	ands	r3, r1
   8100a:	ea23 0302 	bic.w	r3, r3, r2
   8100e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81010:	e002      	b.n	81018 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81012:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81014:	4313      	orrs	r3, r2
   81016:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81018:	6042      	str	r2, [r0, #4]
   8101a:	4770      	bx	lr

0008101c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8101c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8101e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81022:	bf14      	ite	ne
   81024:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81026:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81028:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8102c:	bf14      	ite	ne
   8102e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81030:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81032:	f012 0f02 	tst.w	r2, #2
   81036:	d002      	beq.n	8103e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81038:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8103c:	e004      	b.n	81048 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8103e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81042:	bf18      	it	ne
   81044:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81048:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8104a:	6001      	str	r1, [r0, #0]
   8104c:	4770      	bx	lr
   8104e:	bf00      	nop

00081050 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81050:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81052:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81054:	9c01      	ldr	r4, [sp, #4]
   81056:	b10c      	cbz	r4, 8105c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81058:	6641      	str	r1, [r0, #100]	; 0x64
   8105a:	e000      	b.n	8105e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8105c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8105e:	b10b      	cbz	r3, 81064 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81060:	6501      	str	r1, [r0, #80]	; 0x50
   81062:	e000      	b.n	81066 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   81064:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   81066:	b10a      	cbz	r2, 8106c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81068:	6301      	str	r1, [r0, #48]	; 0x30
   8106a:	e000      	b.n	8106e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8106c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8106e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81070:	6001      	str	r1, [r0, #0]
}
   81072:	f85d 4b04 	ldr.w	r4, [sp], #4
   81076:	4770      	bx	lr

00081078 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   81078:	b5f0      	push	{r4, r5, r6, r7, lr}
   8107a:	b083      	sub	sp, #12
   8107c:	4607      	mov	r7, r0
   8107e:	460c      	mov	r4, r1
   81080:	4616      	mov	r6, r2
   81082:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   81084:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81088:	d01a      	beq.n	810c0 <pio_configure+0x48>
   8108a:	d806      	bhi.n	8109a <pio_configure+0x22>
   8108c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81090:	d00a      	beq.n	810a8 <pio_configure+0x30>
   81092:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81096:	d007      	beq.n	810a8 <pio_configure+0x30>
   81098:	e028      	b.n	810ec <pio_configure+0x74>
   8109a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8109e:	d015      	beq.n	810cc <pio_configure+0x54>
   810a0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   810a4:	d012      	beq.n	810cc <pio_configure+0x54>
   810a6:	e021      	b.n	810ec <pio_configure+0x74>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   810a8:	4638      	mov	r0, r7
   810aa:	4621      	mov	r1, r4
   810ac:	4632      	mov	r2, r6
   810ae:	4b11      	ldr	r3, [pc, #68]	; (810f4 <pio_configure+0x7c>)
   810b0:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810b2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   810b6:	bf14      	ite	ne
   810b8:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810ba:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   810bc:	2001      	movs	r0, #1
   810be:	e016      	b.n	810ee <pio_configure+0x76>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   810c0:	4611      	mov	r1, r2
   810c2:	461a      	mov	r2, r3
   810c4:	4b0c      	ldr	r3, [pc, #48]	; (810f8 <pio_configure+0x80>)
   810c6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   810c8:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   810ca:	e010      	b.n	810ee <pio_configure+0x76>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   810cc:	f005 0301 	and.w	r3, r5, #1
   810d0:	9300      	str	r3, [sp, #0]
   810d2:	4638      	mov	r0, r7
   810d4:	4631      	mov	r1, r6
   810d6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   810da:	bf14      	ite	ne
   810dc:	2200      	movne	r2, #0
   810de:	2201      	moveq	r2, #1
   810e0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   810e4:	4c05      	ldr	r4, [pc, #20]	; (810fc <pio_configure+0x84>)
   810e6:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   810e8:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   810ea:	e000      	b.n	810ee <pio_configure+0x76>

	default:
		return 0;
   810ec:	2000      	movs	r0, #0
	}

	return 1;
}
   810ee:	b003      	add	sp, #12
   810f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   810f2:	bf00      	nop
   810f4:	00080fdd 	.word	0x00080fdd
   810f8:	0008101d 	.word	0x0008101d
   810fc:	00081051 	.word	0x00081051

00081100 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81100:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81102:	4770      	bx	lr

00081104 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81104:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81106:	4770      	bx	lr

00081108 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81108:	0943      	lsrs	r3, r0, #5
   8110a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8110e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81112:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   81114:	f000 001f 	and.w	r0, r0, #31
   81118:	2201      	movs	r2, #1
   8111a:	4082      	lsls	r2, r0
   8111c:	631a      	str	r2, [r3, #48]	; 0x30
   8111e:	4770      	bx	lr

00081120 <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81120:	0943      	lsrs	r3, r0, #5
   81122:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81126:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8112a:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8112c:	f000 001f 	and.w	r0, r0, #31
   81130:	2201      	movs	r2, #1
   81132:	4082      	lsls	r2, r0
   81134:	635a      	str	r2, [r3, #52]	; 0x34
   81136:	4770      	bx	lr

00081138 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81138:	4a18      	ldr	r2, [pc, #96]	; (8119c <pmc_switch_mck_to_pllack+0x64>)
   8113a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8113c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81140:	4318      	orrs	r0, r3
   81142:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81144:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81146:	f013 0f08 	tst.w	r3, #8
   8114a:	d003      	beq.n	81154 <pmc_switch_mck_to_pllack+0x1c>
   8114c:	e009      	b.n	81162 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8114e:	3b01      	subs	r3, #1
   81150:	d103      	bne.n	8115a <pmc_switch_mck_to_pllack+0x22>
   81152:	e01e      	b.n	81192 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81154:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81158:	4910      	ldr	r1, [pc, #64]	; (8119c <pmc_switch_mck_to_pllack+0x64>)
   8115a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8115c:	f012 0f08 	tst.w	r2, #8
   81160:	d0f5      	beq.n	8114e <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81162:	4a0e      	ldr	r2, [pc, #56]	; (8119c <pmc_switch_mck_to_pllack+0x64>)
   81164:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81166:	f023 0303 	bic.w	r3, r3, #3
   8116a:	f043 0302 	orr.w	r3, r3, #2
   8116e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81170:	6e90      	ldr	r0, [r2, #104]	; 0x68
   81172:	f010 0008 	ands.w	r0, r0, #8
   81176:	d004      	beq.n	81182 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81178:	2000      	movs	r0, #0
   8117a:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   8117c:	3b01      	subs	r3, #1
   8117e:	d103      	bne.n	81188 <pmc_switch_mck_to_pllack+0x50>
   81180:	e009      	b.n	81196 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81182:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81186:	4905      	ldr	r1, [pc, #20]	; (8119c <pmc_switch_mck_to_pllack+0x64>)
   81188:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8118a:	f012 0f08 	tst.w	r2, #8
   8118e:	d0f5      	beq.n	8117c <pmc_switch_mck_to_pllack+0x44>
   81190:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81192:	2001      	movs	r0, #1
   81194:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81196:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81198:	4770      	bx	lr
   8119a:	bf00      	nop
   8119c:	400e0600 	.word	0x400e0600

000811a0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   811a0:	b138      	cbz	r0, 811b2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   811a2:	4911      	ldr	r1, [pc, #68]	; (811e8 <pmc_switch_mainck_to_xtal+0x48>)
   811a4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   811a6:	4a11      	ldr	r2, [pc, #68]	; (811ec <pmc_switch_mainck_to_xtal+0x4c>)
   811a8:	401a      	ands	r2, r3
   811aa:	4b11      	ldr	r3, [pc, #68]	; (811f0 <pmc_switch_mainck_to_xtal+0x50>)
   811ac:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   811ae:	620b      	str	r3, [r1, #32]
   811b0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   811b2:	4a0d      	ldr	r2, [pc, #52]	; (811e8 <pmc_switch_mainck_to_xtal+0x48>)
   811b4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   811b6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   811ba:	f023 0303 	bic.w	r3, r3, #3
   811be:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   811c2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   811c6:	0209      	lsls	r1, r1, #8
   811c8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   811ca:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   811cc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   811ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
   811d0:	f013 0f01 	tst.w	r3, #1
   811d4:	d0fb      	beq.n	811ce <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   811d6:	4a04      	ldr	r2, [pc, #16]	; (811e8 <pmc_switch_mainck_to_xtal+0x48>)
   811d8:	6a13      	ldr	r3, [r2, #32]
   811da:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   811de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   811e2:	6213      	str	r3, [r2, #32]
   811e4:	4770      	bx	lr
   811e6:	bf00      	nop
   811e8:	400e0600 	.word	0x400e0600
   811ec:	fec8fffc 	.word	0xfec8fffc
   811f0:	01370002 	.word	0x01370002

000811f4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   811f4:	4b02      	ldr	r3, [pc, #8]	; (81200 <pmc_osc_is_ready_mainck+0xc>)
   811f6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811f8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   811fc:	4770      	bx	lr
   811fe:	bf00      	nop
   81200:	400e0600 	.word	0x400e0600

00081204 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81204:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81208:	4b01      	ldr	r3, [pc, #4]	; (81210 <pmc_disable_pllack+0xc>)
   8120a:	629a      	str	r2, [r3, #40]	; 0x28
   8120c:	4770      	bx	lr
   8120e:	bf00      	nop
   81210:	400e0600 	.word	0x400e0600

00081214 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81214:	4b02      	ldr	r3, [pc, #8]	; (81220 <pmc_is_locked_pllack+0xc>)
   81216:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81218:	f000 0002 	and.w	r0, r0, #2
   8121c:	4770      	bx	lr
   8121e:	bf00      	nop
   81220:	400e0600 	.word	0x400e0600

00081224 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   81224:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   81228:	4b03      	ldr	r3, [pc, #12]	; (81238 <pmc_enable_upll_clock+0x14>)
   8122a:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8122c:	461a      	mov	r2, r3
   8122e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81230:	f013 0f40 	tst.w	r3, #64	; 0x40
   81234:	d0fb      	beq.n	8122e <pmc_enable_upll_clock+0xa>
}
   81236:	4770      	bx	lr
   81238:	400e0600 	.word	0x400e0600

0008123c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8123c:	282c      	cmp	r0, #44	; 0x2c
   8123e:	d81e      	bhi.n	8127e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81240:	281f      	cmp	r0, #31
   81242:	d80c      	bhi.n	8125e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81244:	4b11      	ldr	r3, [pc, #68]	; (8128c <pmc_enable_periph_clk+0x50>)
   81246:	699a      	ldr	r2, [r3, #24]
   81248:	2301      	movs	r3, #1
   8124a:	4083      	lsls	r3, r0
   8124c:	401a      	ands	r2, r3
   8124e:	4293      	cmp	r3, r2
   81250:	d017      	beq.n	81282 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81252:	2301      	movs	r3, #1
   81254:	4083      	lsls	r3, r0
   81256:	4a0d      	ldr	r2, [pc, #52]	; (8128c <pmc_enable_periph_clk+0x50>)
   81258:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8125a:	2000      	movs	r0, #0
   8125c:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8125e:	4b0b      	ldr	r3, [pc, #44]	; (8128c <pmc_enable_periph_clk+0x50>)
   81260:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   81264:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81266:	2301      	movs	r3, #1
   81268:	4083      	lsls	r3, r0
   8126a:	401a      	ands	r2, r3
   8126c:	4293      	cmp	r3, r2
   8126e:	d00a      	beq.n	81286 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81270:	2301      	movs	r3, #1
   81272:	4083      	lsls	r3, r0
   81274:	4a05      	ldr	r2, [pc, #20]	; (8128c <pmc_enable_periph_clk+0x50>)
   81276:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8127a:	2000      	movs	r0, #0
   8127c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8127e:	2001      	movs	r0, #1
   81280:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81282:	2000      	movs	r0, #0
   81284:	4770      	bx	lr
   81286:	2000      	movs	r0, #0
}
   81288:	4770      	bx	lr
   8128a:	bf00      	nop
   8128c:	400e0600 	.word	0x400e0600

00081290 <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   81290:	0200      	lsls	r0, r0, #8
   81292:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   81296:	f040 0001 	orr.w	r0, r0, #1
   8129a:	4b01      	ldr	r3, [pc, #4]	; (812a0 <pmc_switch_udpck_to_upllck+0x10>)
   8129c:	6398      	str	r0, [r3, #56]	; 0x38
   8129e:	4770      	bx	lr
   812a0:	400e0600 	.word	0x400e0600

000812a4 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   812a4:	2220      	movs	r2, #32
   812a6:	4b01      	ldr	r3, [pc, #4]	; (812ac <pmc_enable_udpck+0x8>)
   812a8:	601a      	str	r2, [r3, #0]
   812aa:	4770      	bx	lr
   812ac:	400e0600 	.word	0x400e0600

000812b0 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   812b0:	4a03      	ldr	r2, [pc, #12]	; (812c0 <pmc_set_fast_startup_input+0x10>)
   812b2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   812b4:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   812b8:	4303      	orrs	r3, r0
   812ba:	6713      	str	r3, [r2, #112]	; 0x70
   812bc:	4770      	bx	lr
   812be:	bf00      	nop
   812c0:	400e0600 	.word	0x400e0600

000812c4 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   812c4:	4b02      	ldr	r3, [pc, #8]	; (812d0 <pmc_is_wakeup_clocks_restored+0xc>)
   812c6:	7818      	ldrb	r0, [r3, #0]
}
   812c8:	f080 0001 	eor.w	r0, r0, #1
   812cc:	4770      	bx	lr
   812ce:	bf00      	nop
   812d0:	20070bfc 	.word	0x20070bfc

000812d4 <board_init>:
 */

#include <asf.h>
#include "user_board.h"

void board_init(void) {
   812d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812d8:	b089      	sub	sp, #36	; 0x24
	 */
	
	/***************************************************************************************/
	/* Watchdog Timer Initialization                                                       */
	/***************************************************************************************/
	wdt_disable(WDT);
   812da:	483a      	ldr	r0, [pc, #232]	; (813c4 <board_init+0xf0>)
   812dc:	4b3a      	ldr	r3, [pc, #232]	; (813c8 <board_init+0xf4>)
   812de:	4798      	blx	r3
  
	/***************************************************************************************/
	/* Generic Board Initializations                                                       */
	/***************************************************************************************/  
	irq_initialize_vectors();
	cpu_irq_enable();
   812e0:	2401      	movs	r4, #1
   812e2:	4b3a      	ldr	r3, [pc, #232]	; (813cc <board_init+0xf8>)
   812e4:	701c      	strb	r4, [r3, #0]
   812e6:	f3bf 8f5f 	dmb	sy
   812ea:	b662      	cpsie	i
	
	/***************************************************************************************/
	/* GPIO Initialization                                                                 */
	/***************************************************************************************/	
	pmc_enable_periph_clk(ID_PIOA);		// enables clk on PIOA
   812ec:	200b      	movs	r0, #11
   812ee:	4d38      	ldr	r5, [pc, #224]	; (813d0 <board_init+0xfc>)
   812f0:	47a8      	blx	r5
	pmc_enable_periph_clk(ID_PIOB);		// enables clk on PIOB
   812f2:	200c      	movs	r0, #12
   812f4:	47a8      	blx	r5
	
	/* Initialize contactors, user LEDs, and buzzer to output. Default drive low */
	pio_set_output(CONTACTORS_PIO, CONTACTORS_PINS, LOW, DISABLE, ENABLE);
   812f6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 81400 <board_init+0x12c>
   812fa:	9400      	str	r4, [sp, #0]
   812fc:	4648      	mov	r0, r9
   812fe:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
   81302:	2200      	movs	r2, #0
   81304:	4613      	mov	r3, r2
   81306:	4e33      	ldr	r6, [pc, #204]	; (813d4 <board_init+0x100>)
   81308:	47b0      	blx	r6
	pio_set_output(BUZ_LED_PIO, BUZ_LED_PINS, LOW, DISABLE, ENABLE);
   8130a:	9400      	str	r4, [sp, #0]
   8130c:	4648      	mov	r0, r9
   8130e:	210f      	movs	r1, #15
   81310:	2200      	movs	r2, #0
   81312:	4613      	mov	r3, r2
   81314:	47b0      	blx	r6
	
	/***************************************************************************************/
	/* USART Initialization                                                                */
	/***************************************************************************************/
	pio_set_output(CONSOLE_USART_PIO, CONSOLE_USART_PINS, HIGH, DISABLE, ENABLE);
   81316:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 81404 <board_init+0x130>
   8131a:	9400      	str	r4, [sp, #0]
   8131c:	4650      	mov	r0, sl
   8131e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   81322:	4622      	mov	r2, r4
   81324:	2300      	movs	r3, #0
   81326:	47b0      	blx	r6
	pio_configure(CONSOLE_USART_PIO, PIO_PERIPH_A, CONSOLE_USART_PINS, PIO_DEFAULT);
   81328:	4650      	mov	r0, sl
   8132a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8132e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   81332:	2300      	movs	r3, #0
   81334:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 81408 <board_init+0x134>
   81338:	47c0      	blx	r8
	const sam_usart_opt_t console_usart_options = {
   8133a:	2600      	movs	r6, #0
   8133c:	9605      	str	r6, [sp, #20]
   8133e:	9606      	str	r6, [sp, #24]
   81340:	9607      	str	r6, [sp, #28]
   81342:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81346:	9302      	str	r3, [sp, #8]
   81348:	23c0      	movs	r3, #192	; 0xc0
   8134a:	9303      	str	r3, [sp, #12]
   8134c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81350:	9304      	str	r3, [sp, #16]
		.channel_mode = CONSOLE_USART_CHMODE,
		.char_length = CONSOLE_USART_CHARLEN,
		.parity_type = CONSOLE_USART_PARITY,
		.stop_bits = CONSOLE_USART_STOPBITS		
	};	
	pmc_enable_periph_clk(CONSOLE_USART_ID);
   81352:	2011      	movs	r0, #17
   81354:	47a8      	blx	r5
	usart_init_rs232(CONSOLE_USART, &console_usart_options, sysclk_get_main_hz());
   81356:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8140c <board_init+0x138>
   8135a:	4f1f      	ldr	r7, [pc, #124]	; (813d8 <board_init+0x104>)
   8135c:	4658      	mov	r0, fp
   8135e:	a902      	add	r1, sp, #8
   81360:	463a      	mov	r2, r7
   81362:	4b1e      	ldr	r3, [pc, #120]	; (813dc <board_init+0x108>)
   81364:	4798      	blx	r3
	usart_enable_tx(CONSOLE_USART);
   81366:	4658      	mov	r0, fp
   81368:	4b1d      	ldr	r3, [pc, #116]	; (813e0 <board_init+0x10c>)
   8136a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   8136c:	4b1d      	ldr	r3, [pc, #116]	; (813e4 <board_init+0x110>)
   8136e:	601c      	str	r4, [r3, #0]
	spi_enable(OLED_SPI);
	
	/***************************************************************************************/
	/* CAN Initialization                                                                  */
	/***************************************************************************************/
	pio_configure(RLEC_CAN_PIO, PIO_PERIPH_A, RLEC_CAN_PINS, PIO_DEFAULT);
   81370:	4650      	mov	r0, sl
   81372:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81376:	2203      	movs	r2, #3
   81378:	4633      	mov	r3, r6
   8137a:	47c0      	blx	r8
	pio_configure(V_CAN_PIO, PIO_PERIPH_A, V_CAN_PINS, PIO_DEFAULT);
   8137c:	4648      	mov	r0, r9
   8137e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81382:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81386:	4633      	mov	r3, r6
   81388:	47c0      	blx	r8
		
	pmc_enable_periph_clk(RLEC_CAN_ID);
   8138a:	202b      	movs	r0, #43	; 0x2b
   8138c:	47a8      	blx	r5
	pmc_enable_periph_clk(V_CAN_ID);
   8138e:	202c      	movs	r0, #44	; 0x2c
   81390:	47a8      	blx	r5
	
	can_init(RLEC_CAN, sysclk_get_main_hz(), CAN_BPS_250K);	// init CAN @ 500 kbps
   81392:	4d15      	ldr	r5, [pc, #84]	; (813e8 <board_init+0x114>)
   81394:	4628      	mov	r0, r5
   81396:	4639      	mov	r1, r7
   81398:	22fa      	movs	r2, #250	; 0xfa
   8139a:	4e14      	ldr	r6, [pc, #80]	; (813ec <board_init+0x118>)
   8139c:	47b0      	blx	r6
	can_init(V_CAN, sysclk_get_main_hz(), CAN_BPS_250K);
   8139e:	4c14      	ldr	r4, [pc, #80]	; (813f0 <board_init+0x11c>)
   813a0:	4620      	mov	r0, r4
   813a2:	4639      	mov	r1, r7
   813a4:	22fa      	movs	r2, #250	; 0xfa
   813a6:	47b0      	blx	r6
	
	can_reset_all_mailbox(RLEC_CAN);
   813a8:	4628      	mov	r0, r5
   813aa:	4d12      	ldr	r5, [pc, #72]	; (813f4 <board_init+0x120>)
   813ac:	47a8      	blx	r5
	can_reset_all_mailbox(V_CAN);
   813ae:	4620      	mov	r0, r4
   813b0:	47a8      	blx	r5
  
	can_disable_tx_repeat(V_CAN);		// Disables Tx repeat
   813b2:	4620      	mov	r0, r4
   813b4:	4b10      	ldr	r3, [pc, #64]	; (813f8 <board_init+0x124>)
   813b6:	4798      	blx	r3
	/* USB Initialization                                                                  */
	/***************************************************************************************/  
	//udc_start();
	//stdio_usb_init();
	//stdio_usb_enable();
	udc_start();
   813b8:	4b10      	ldr	r3, [pc, #64]	; (813fc <board_init+0x128>)
   813ba:	4798      	blx	r3
	//udc_attach();
  
}
   813bc:	b009      	add	sp, #36	; 0x24
   813be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813c2:	bf00      	nop
   813c4:	400e1a50 	.word	0x400e1a50
   813c8:	000827fd 	.word	0x000827fd
   813cc:	200701d8 	.word	0x200701d8
   813d0:	0008123d 	.word	0x0008123d
   813d4:	00081051 	.word	0x00081051
   813d8:	0a037a00 	.word	0x0a037a00
   813dc:	000827a1 	.word	0x000827a1
   813e0:	000827f5 	.word	0x000827f5
   813e4:	40008000 	.word	0x40008000
   813e8:	400b4000 	.word	0x400b4000
   813ec:	00080de9 	.word	0x00080de9
   813f0:	400b8000 	.word	0x400b8000
   813f4:	00080dc5 	.word	0x00080dc5
   813f8:	00080d35 	.word	0x00080d35
   813fc:	000808b1 	.word	0x000808b1
   81400:	400e1000 	.word	0x400e1000
   81404:	400e0e00 	.word	0x400e0e00
   81408:	00081079 	.word	0x00081079
   8140c:	40098000 	.word	0x40098000

00081410 <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81410:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81414:	b672      	cpsid	i
   81416:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8141a:	2100      	movs	r1, #0
   8141c:	4a0a      	ldr	r2, [pc, #40]	; (81448 <udd_ctrl_init+0x38>)
   8141e:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   81420:	2101      	movs	r1, #1
   81422:	4a0a      	ldr	r2, [pc, #40]	; (8144c <udd_ctrl_init+0x3c>)
   81424:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81426:	b923      	cbnz	r3, 81432 <udd_ctrl_init+0x22>
		cpu_irq_enable();
   81428:	4b07      	ldr	r3, [pc, #28]	; (81448 <udd_ctrl_init+0x38>)
   8142a:	7019      	strb	r1, [r3, #0]
   8142c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81430:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   81432:	2202      	movs	r2, #2
   81434:	4b06      	ldr	r3, [pc, #24]	; (81450 <udd_ctrl_init+0x40>)
   81436:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   81438:	4a06      	ldr	r2, [pc, #24]	; (81454 <udd_ctrl_init+0x44>)
   8143a:	2300      	movs	r3, #0
   8143c:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8143e:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   81440:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   81442:	4a05      	ldr	r2, [pc, #20]	; (81458 <udd_ctrl_init+0x48>)
   81444:	7013      	strb	r3, [r2, #0]
   81446:	4770      	bx	lr
   81448:	200701d8 	.word	0x200701d8
   8144c:	400ac220 	.word	0x400ac220
   81450:	400ac160 	.word	0x400ac160
   81454:	20070c9c 	.word	0x20070c9c
   81458:	20070c4d 	.word	0x20070c4d

0008145c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   8145c:	2205      	movs	r2, #5
   8145e:	4b03      	ldr	r3, [pc, #12]	; (8146c <udd_ctrl_stall_data+0x10>)
   81460:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   81462:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81466:	4b02      	ldr	r3, [pc, #8]	; (81470 <udd_ctrl_stall_data+0x14>)
   81468:	601a      	str	r2, [r3, #0]
   8146a:	4770      	bx	lr
   8146c:	20070c4d 	.word	0x20070c4d
   81470:	400ac1f0 	.word	0x400ac1f0

00081474 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   81474:	2203      	movs	r2, #3
   81476:	4b0d      	ldr	r3, [pc, #52]	; (814ac <udd_ctrl_send_zlp_in+0x38>)
   81478:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8147a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8147e:	b672      	cpsid	i
   81480:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81484:	2100      	movs	r1, #0
   81486:	4a0a      	ldr	r2, [pc, #40]	; (814b0 <udd_ctrl_send_zlp_in+0x3c>)
   81488:	7011      	strb	r1, [r2, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   8148a:	480a      	ldr	r0, [pc, #40]	; (814b4 <udd_ctrl_send_zlp_in+0x40>)
   8148c:	2101      	movs	r1, #1
   8148e:	6001      	str	r1, [r0, #0]
	udd_enable_in_send_interrupt(0);
   81490:	4a09      	ldr	r2, [pc, #36]	; (814b8 <udd_ctrl_send_zlp_in+0x44>)
   81492:	6011      	str	r1, [r2, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   81494:	2108      	movs	r1, #8
   81496:	6001      	str	r1, [r0, #0]
	udd_enable_nak_out_interrupt(0);
   81498:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8149a:	b92b      	cbnz	r3, 814a8 <udd_ctrl_send_zlp_in+0x34>
		cpu_irq_enable();
   8149c:	2201      	movs	r2, #1
   8149e:	4b04      	ldr	r3, [pc, #16]	; (814b0 <udd_ctrl_send_zlp_in+0x3c>)
   814a0:	701a      	strb	r2, [r3, #0]
   814a2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   814a6:	b662      	cpsie	i
   814a8:	4770      	bx	lr
   814aa:	bf00      	nop
   814ac:	20070c4d 	.word	0x20070c4d
   814b0:	200701d8 	.word	0x200701d8
   814b4:	400ac160 	.word	0x400ac160
   814b8:	400ac1f0 	.word	0x400ac1f0

000814bc <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   814bc:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   814be:	4b02      	ldr	r3, [pc, #8]	; (814c8 <udd_ctrl_endofrequest+0xc>)
   814c0:	691b      	ldr	r3, [r3, #16]
   814c2:	b103      	cbz	r3, 814c6 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   814c4:	4798      	blx	r3
   814c6:	bd08      	pop	{r3, pc}
   814c8:	20070c9c 	.word	0x20070c9c

000814cc <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   814cc:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   814ce:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   814d2:	b672      	cpsid	i
   814d4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   814d8:	2100      	movs	r1, #0
   814da:	4a48      	ldr	r2, [pc, #288]	; (815fc <udd_ctrl_in_sent+0x130>)
   814dc:	7011      	strb	r1, [r2, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   814de:	2101      	movs	r1, #1
   814e0:	4a47      	ldr	r2, [pc, #284]	; (81600 <udd_ctrl_in_sent+0x134>)
   814e2:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   814e4:	b923      	cbnz	r3, 814f0 <udd_ctrl_in_sent+0x24>
		cpu_irq_enable();
   814e6:	4b45      	ldr	r3, [pc, #276]	; (815fc <udd_ctrl_in_sent+0x130>)
   814e8:	7019      	strb	r1, [r3, #0]
   814ea:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   814ee:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   814f0:	4b44      	ldr	r3, [pc, #272]	; (81604 <udd_ctrl_in_sent+0x138>)
   814f2:	781b      	ldrb	r3, [r3, #0]
   814f4:	2b03      	cmp	r3, #3
   814f6:	d104      	bne.n	81502 <udd_ctrl_in_sent+0x36>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   814f8:	4b43      	ldr	r3, [pc, #268]	; (81608 <udd_ctrl_in_sent+0x13c>)
   814fa:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   814fc:	4b43      	ldr	r3, [pc, #268]	; (8160c <udd_ctrl_in_sent+0x140>)
   814fe:	4798      	blx	r3
		return;
   81500:	bd38      	pop	{r3, r4, r5, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81502:	4b43      	ldr	r3, [pc, #268]	; (81610 <udd_ctrl_in_sent+0x144>)
   81504:	881a      	ldrh	r2, [r3, #0]
   81506:	4b43      	ldr	r3, [pc, #268]	; (81614 <udd_ctrl_in_sent+0x148>)
   81508:	899c      	ldrh	r4, [r3, #12]
   8150a:	1aa4      	subs	r4, r4, r2
   8150c:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8150e:	2c00      	cmp	r4, #0
   81510:	d12e      	bne.n	81570 <udd_ctrl_in_sent+0xa4>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81512:	4941      	ldr	r1, [pc, #260]	; (81618 <udd_ctrl_in_sent+0x14c>)
   81514:	880b      	ldrh	r3, [r1, #0]
   81516:	4413      	add	r3, r2
   81518:	b29b      	uxth	r3, r3
   8151a:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   8151c:	4a3d      	ldr	r2, [pc, #244]	; (81614 <udd_ctrl_in_sent+0x148>)
   8151e:	88d2      	ldrh	r2, [r2, #6]
   81520:	429a      	cmp	r2, r3
   81522:	d002      	beq.n	8152a <udd_ctrl_in_sent+0x5e>
					|| b_shortpacket) {
   81524:	4b3d      	ldr	r3, [pc, #244]	; (8161c <udd_ctrl_in_sent+0x150>)
   81526:	781b      	ldrb	r3, [r3, #0]
   81528:	b1c3      	cbz	r3, 8155c <udd_ctrl_in_sent+0x90>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8152a:	2204      	movs	r2, #4
   8152c:	4b35      	ldr	r3, [pc, #212]	; (81604 <udd_ctrl_in_sent+0x138>)
   8152e:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81530:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81534:	b672      	cpsid	i
   81536:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8153a:	2100      	movs	r1, #0
   8153c:	4a2f      	ldr	r2, [pc, #188]	; (815fc <udd_ctrl_in_sent+0x130>)
   8153e:	7011      	strb	r1, [r2, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   81540:	2210      	movs	r2, #16
   81542:	4937      	ldr	r1, [pc, #220]	; (81620 <udd_ctrl_in_sent+0x154>)
   81544:	600a      	str	r2, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   81546:	3190      	adds	r1, #144	; 0x90
   81548:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8154a:	2b00      	cmp	r3, #0
   8154c:	d154      	bne.n	815f8 <udd_ctrl_in_sent+0x12c>
		cpu_irq_enable();
   8154e:	2201      	movs	r2, #1
   81550:	4b2a      	ldr	r3, [pc, #168]	; (815fc <udd_ctrl_in_sent+0x130>)
   81552:	701a      	strb	r2, [r3, #0]
   81554:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81558:	b662      	cpsie	i
   8155a:	bd38      	pop	{r3, r4, r5, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8155c:	4b2d      	ldr	r3, [pc, #180]	; (81614 <udd_ctrl_in_sent+0x148>)
   8155e:	695b      	ldr	r3, [r3, #20]
   81560:	b16b      	cbz	r3, 8157e <udd_ctrl_in_sent+0xb2>
				|| (!udd_g_ctrlreq.over_under_run())) {
   81562:	4798      	blx	r3
   81564:	b158      	cbz	r0, 8157e <udd_ctrl_in_sent+0xb2>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   81566:	2200      	movs	r2, #0
   81568:	4b29      	ldr	r3, [pc, #164]	; (81610 <udd_ctrl_in_sent+0x144>)
   8156a:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   8156c:	4b29      	ldr	r3, [pc, #164]	; (81614 <udd_ctrl_in_sent+0x148>)
   8156e:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   81570:	2c3f      	cmp	r4, #63	; 0x3f
   81572:	d904      	bls.n	8157e <udd_ctrl_in_sent+0xb2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   81574:	2200      	movs	r2, #0
   81576:	4b29      	ldr	r3, [pc, #164]	; (8161c <udd_ctrl_in_sent+0x150>)
   81578:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   8157a:	2440      	movs	r4, #64	; 0x40
   8157c:	e002      	b.n	81584 <udd_ctrl_in_sent+0xb8>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   8157e:	2201      	movs	r2, #1
   81580:	4b26      	ldr	r3, [pc, #152]	; (8161c <udd_ctrl_in_sent+0x150>)
   81582:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81584:	4b23      	ldr	r3, [pc, #140]	; (81614 <udd_ctrl_in_sent+0x148>)
   81586:	689a      	ldr	r2, [r3, #8]
   81588:	4b21      	ldr	r3, [pc, #132]	; (81610 <udd_ctrl_in_sent+0x144>)
   8158a:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8158c:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81590:	fab0 f080 	clz	r0, r0
   81594:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81596:	b672      	cpsid	i
   81598:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8159c:	2500      	movs	r5, #0
   8159e:	4917      	ldr	r1, [pc, #92]	; (815fc <udd_ctrl_in_sent+0x130>)
   815a0:	700d      	strb	r5, [r1, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   815a2:	4920      	ldr	r1, [pc, #128]	; (81624 <udd_ctrl_in_sent+0x158>)
   815a4:	6809      	ldr	r1, [r1, #0]
   815a6:	f011 0f02 	tst.w	r1, #2
   815aa:	d101      	bne.n	815b0 <udd_ctrl_in_sent+0xe4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   815ac:	b95c      	cbnz	r4, 815c6 <udd_ctrl_in_sent+0xfa>
   815ae:	e013      	b.n	815d8 <udd_ctrl_in_sent+0x10c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815b0:	b128      	cbz	r0, 815be <udd_ctrl_in_sent+0xf2>
		cpu_irq_enable();
   815b2:	2201      	movs	r2, #1
   815b4:	4b11      	ldr	r3, [pc, #68]	; (815fc <udd_ctrl_in_sent+0x130>)
   815b6:	701a      	strb	r2, [r3, #0]
   815b8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   815bc:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   815be:	2204      	movs	r2, #4
   815c0:	4b10      	ldr	r3, [pc, #64]	; (81604 <udd_ctrl_in_sent+0x138>)
   815c2:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   815c4:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   815c6:	441a      	add	r2, r3
   815c8:	4b17      	ldr	r3, [pc, #92]	; (81628 <udd_ctrl_in_sent+0x15c>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   815ca:	f812 1b01 	ldrb.w	r1, [r2], #1
   815ce:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   815d2:	b2d9      	uxtb	r1, r3
   815d4:	42a1      	cmp	r1, r4
   815d6:	d3f8      	bcc.n	815ca <udd_ctrl_in_sent+0xfe>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   815d8:	4a0d      	ldr	r2, [pc, #52]	; (81610 <udd_ctrl_in_sent+0x144>)
   815da:	8813      	ldrh	r3, [r2, #0]
   815dc:	441c      	add	r4, r3
   815de:	8014      	strh	r4, [r2, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   815e0:	2301      	movs	r3, #1
   815e2:	4a0f      	ldr	r2, [pc, #60]	; (81620 <udd_ctrl_in_sent+0x154>)
   815e4:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   815e6:	3290      	adds	r2, #144	; 0x90
   815e8:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815ea:	b128      	cbz	r0, 815f8 <udd_ctrl_in_sent+0x12c>
		cpu_irq_enable();
   815ec:	461a      	mov	r2, r3
   815ee:	4b03      	ldr	r3, [pc, #12]	; (815fc <udd_ctrl_in_sent+0x130>)
   815f0:	701a      	strb	r2, [r3, #0]
   815f2:	f3bf 8f5f 	dmb	sy
   815f6:	b662      	cpsie	i
   815f8:	bd38      	pop	{r3, r4, r5, pc}
   815fa:	bf00      	nop
   815fc:	200701d8 	.word	0x200701d8
   81600:	400ac220 	.word	0x400ac220
   81604:	20070c4d 	.word	0x20070c4d
   81608:	000814bd 	.word	0x000814bd
   8160c:	00081411 	.word	0x00081411
   81610:	20070c4e 	.word	0x20070c4e
   81614:	20070c9c 	.word	0x20070c9c
   81618:	20070c4a 	.word	0x20070c4a
   8161c:	20070c50 	.word	0x20070c50
   81620:	400ac160 	.word	0x400ac160
   81624:	400ac130 	.word	0x400ac130
   81628:	20180000 	.word	0x20180000

0008162c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8162c:	b510      	push	{r4, lr}
   8162e:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   81630:	7d04      	ldrb	r4, [r0, #20]
   81632:	f014 0f01 	tst.w	r4, #1
   81636:	d010      	beq.n	8165a <udd_ep_finish_job+0x2e>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   81638:	7d04      	ldrb	r4, [r0, #20]
   8163a:	f36f 0400 	bfc	r4, #0, #1
   8163e:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   81640:	6804      	ldr	r4, [r0, #0]
   81642:	b154      	cbz	r4, 8165a <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   81644:	4805      	ldr	r0, [pc, #20]	; (8165c <udd_ep_finish_job+0x30>)
   81646:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   8164a:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   8164e:	bf18      	it	ne
   81650:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81654:	4608      	mov	r0, r1
   81656:	6899      	ldr	r1, [r3, #8]
   81658:	47a0      	blx	r4
   8165a:	bd10      	pop	{r4, pc}
   8165c:	400ac100 	.word	0x400ac100

00081660 <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   81660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   81662:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   81664:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   81668:	4a5a      	ldr	r2, [pc, #360]	; (817d4 <udd_ep_trans_done+0x174>)
   8166a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8166e:	7d12      	ldrb	r2, [r2, #20]
   81670:	f012 0f01 	tst.w	r2, #1
   81674:	f000 80ad 	beq.w	817d2 <udd_ep_trans_done+0x172>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   81678:	460a      	mov	r2, r1
   8167a:	4956      	ldr	r1, [pc, #344]	; (817d4 <udd_ep_trans_done+0x174>)
   8167c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81680:	68d1      	ldr	r1, [r2, #12]
   81682:	6892      	ldr	r2, [r2, #8]
   81684:	4291      	cmp	r1, r2
   81686:	d075      	beq.n	81774 <udd_ep_trans_done+0x114>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   81688:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   8168a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   8168e:	bf92      	itee	ls
   81690:	0417      	lslls	r7, r2, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   81692:	f44f 3280 	movhi.w	r2, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   81696:	2700      	movhi	r7, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   81698:	4c4f      	ldr	r4, [pc, #316]	; (817d8 <udd_ep_trans_done+0x178>)
   8169a:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   8169e:	f415 7f80 	tst.w	r5, #256	; 0x100
   816a2:	d014      	beq.n	816ce <udd_ep_trans_done+0x6e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   816a4:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   816a8:	f3c5 1502 	ubfx	r5, r5, #4, #3
   816ac:	2408      	movs	r4, #8
   816ae:	40ac      	lsls	r4, r5
   816b0:	3c01      	subs	r4, #1
   816b2:	4222      	tst	r2, r4
   816b4:	d01b      	beq.n	816ee <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   816b6:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   816ba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   816be:	4d45      	ldr	r5, [pc, #276]	; (817d4 <udd_ep_trans_done+0x174>)
   816c0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   816c4:	7d25      	ldrb	r5, [r4, #20]
   816c6:	f36f 0541 	bfc	r5, #1, #1
   816ca:	7525      	strb	r5, [r4, #20]
   816cc:	e00f      	b.n	816ee <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   816ce:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   816d2:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   816d6:	2d01      	cmp	r5, #1
   816d8:	d107      	bne.n	816ea <udd_ep_trans_done+0x8a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   816da:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   816de:	f3c5 1502 	ubfx	r5, r5, #4, #3
   816e2:	2408      	movs	r4, #8
   816e4:	40ac      	lsls	r4, r5
   816e6:	42a2      	cmp	r2, r4
   816e8:	d801      	bhi.n	816ee <udd_ep_trans_done+0x8e>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   816ea:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   816ee:	4c3b      	ldr	r4, [pc, #236]	; (817dc <udd_ep_trans_done+0x17c>)
   816f0:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   816f4:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   816f8:	4e36      	ldr	r6, [pc, #216]	; (817d4 <udd_ep_trans_done+0x174>)
   816fa:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   816fe:	686d      	ldr	r5, [r5, #4]
   81700:	4429      	add	r1, r5
   81702:	6061      	str	r1, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81704:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81708:	fab1 f181 	clz	r1, r1
   8170c:	0949      	lsrs	r1, r1, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8170e:	b672      	cpsid	i
   81710:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81714:	2600      	movs	r6, #0
   81716:	4d32      	ldr	r5, [pc, #200]	; (817e0 <udd_ep_trans_done+0x180>)
   81718:	702e      	strb	r6, [r5, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   8171a:	68e5      	ldr	r5, [r4, #12]
   8171c:	f015 0f10 	tst.w	r5, #16
   81720:	d11a      	bne.n	81758 <udd_ep_trans_done+0xf8>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   81722:	f047 0721 	orr.w	r7, r7, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81726:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   81728:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   8172c:	4829      	ldr	r0, [pc, #164]	; (817d4 <udd_ep_trans_done+0x174>)
   8172e:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   81732:	68c4      	ldr	r4, [r0, #12]
   81734:	4414      	add	r4, r2
   81736:	60c4      	str	r4, [r0, #12]
			ptr_job->buf_load = next_trans;
   81738:	6102      	str	r2, [r0, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   8173a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8173e:	fa02 f303 	lsl.w	r3, r2, r3
   81742:	4a28      	ldr	r2, [pc, #160]	; (817e4 <udd_ep_trans_done+0x184>)
   81744:	6193      	str	r3, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81746:	2900      	cmp	r1, #0
   81748:	d043      	beq.n	817d2 <udd_ep_trans_done+0x172>
		cpu_irq_enable();
   8174a:	2201      	movs	r2, #1
   8174c:	4b24      	ldr	r3, [pc, #144]	; (817e0 <udd_ep_trans_done+0x180>)
   8174e:	701a      	strb	r2, [r3, #0]
   81750:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81754:	b662      	cpsie	i
   81756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81758:	b129      	cbz	r1, 81766 <udd_ep_trans_done+0x106>
		cpu_irq_enable();
   8175a:	2101      	movs	r1, #1
   8175c:	4a20      	ldr	r2, [pc, #128]	; (817e0 <udd_ep_trans_done+0x180>)
   8175e:	7011      	strb	r1, [r2, #0]
   81760:	f3bf 8f5f 	dmb	sy
   81764:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81766:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8176a:	491a      	ldr	r1, [pc, #104]	; (817d4 <udd_ep_trans_done+0x174>)
   8176c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   81770:	68d1      	ldr	r1, [r2, #12]
   81772:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   81774:	4a18      	ldr	r2, [pc, #96]	; (817d8 <udd_ep_trans_done+0x178>)
   81776:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   8177a:	f412 7f80 	tst.w	r2, #256	; 0x100
   8177e:	d01f      	beq.n	817c0 <udd_ep_trans_done+0x160>
		if (ptr_job->b_shortpacket) {
   81780:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   81784:	4913      	ldr	r1, [pc, #76]	; (817d4 <udd_ep_trans_done+0x174>)
   81786:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8178a:	7d12      	ldrb	r2, [r2, #20]
   8178c:	f012 0f02 	tst.w	r2, #2
   81790:	d016      	beq.n	817c0 <udd_ep_trans_done+0x160>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   81792:	2201      	movs	r2, #1
   81794:	4b14      	ldr	r3, [pc, #80]	; (817e8 <udd_ep_trans_done+0x188>)
   81796:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   8179a:	3b30      	subs	r3, #48	; 0x30
   8179c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   817a0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   817a4:	bf1c      	itt	ne
   817a6:	4b11      	ldrne	r3, [pc, #68]	; (817ec <udd_ep_trans_done+0x18c>)
   817a8:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   817ac:	2201      	movs	r2, #1
   817ae:	4b10      	ldr	r3, [pc, #64]	; (817f0 <udd_ep_trans_done+0x190>)
   817b0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   817b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   817b8:	4083      	lsls	r3, r0
   817ba:	4a0a      	ldr	r2, [pc, #40]	; (817e4 <udd_ep_trans_done+0x184>)
   817bc:	6193      	str	r3, [r2, #24]
			return;
   817be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   817c0:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   817c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   817c6:	4803      	ldr	r0, [pc, #12]	; (817d4 <udd_ep_trans_done+0x174>)
   817c8:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   817cc:	2100      	movs	r1, #0
   817ce:	4b09      	ldr	r3, [pc, #36]	; (817f4 <udd_ep_trans_done+0x194>)
   817d0:	4798      	blx	r3
   817d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   817d4:	20070c00 	.word	0x20070c00
   817d8:	400ac100 	.word	0x400ac100
   817dc:	400ac300 	.word	0x400ac300
   817e0:	200701d8 	.word	0x200701d8
   817e4:	400ac000 	.word	0x400ac000
   817e8:	400ac160 	.word	0x400ac160
   817ec:	400ac190 	.word	0x400ac190
   817f0:	400ac1f0 	.word	0x400ac1f0
   817f4:	0008162d 	.word	0x0008162d

000817f8 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   817f8:	b410      	push	{r4}
	if (!b_idle && udd_b_idle) {
   817fa:	4604      	mov	r4, r0
   817fc:	2800      	cmp	r0, #0
   817fe:	d135      	bne.n	8186c <udd_sleep_mode+0x74>
   81800:	4b1e      	ldr	r3, [pc, #120]	; (8187c <udd_sleep_mode+0x84>)
   81802:	781b      	ldrb	r3, [r3, #0]
   81804:	b37b      	cbz	r3, 81866 <udd_sleep_mode+0x6e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   81806:	4b1e      	ldr	r3, [pc, #120]	; (81880 <udd_sleep_mode+0x88>)
   81808:	789b      	ldrb	r3, [r3, #2]
   8180a:	b903      	cbnz	r3, 8180e <udd_sleep_mode+0x16>
   8180c:	e7fe      	b.n	8180c <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8180e:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81812:	b672      	cpsid	i
   81814:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81818:	2100      	movs	r1, #0
   8181a:	4a1a      	ldr	r2, [pc, #104]	; (81884 <udd_sleep_mode+0x8c>)
   8181c:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   8181e:	4918      	ldr	r1, [pc, #96]	; (81880 <udd_sleep_mode+0x88>)
   81820:	788a      	ldrb	r2, [r1, #2]
   81822:	3a01      	subs	r2, #1
   81824:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81826:	b9f3      	cbnz	r3, 81866 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
   81828:	2201      	movs	r2, #1
   8182a:	4b16      	ldr	r3, [pc, #88]	; (81884 <udd_sleep_mode+0x8c>)
   8182c:	701a      	strb	r2, [r3, #0]
   8182e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81832:	b662      	cpsie	i
   81834:	e017      	b.n	81866 <udd_sleep_mode+0x6e>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   81836:	4b12      	ldr	r3, [pc, #72]	; (81880 <udd_sleep_mode+0x88>)
   81838:	789b      	ldrb	r3, [r3, #2]
   8183a:	2bff      	cmp	r3, #255	; 0xff
   8183c:	d100      	bne.n	81840 <udd_sleep_mode+0x48>
   8183e:	e7fe      	b.n	8183e <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81840:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81844:	b672      	cpsid	i
   81846:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8184a:	2100      	movs	r1, #0
   8184c:	4a0d      	ldr	r2, [pc, #52]	; (81884 <udd_sleep_mode+0x8c>)
   8184e:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   81850:	490b      	ldr	r1, [pc, #44]	; (81880 <udd_sleep_mode+0x88>)
   81852:	788a      	ldrb	r2, [r1, #2]
   81854:	3201      	adds	r2, #1
   81856:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81858:	b92b      	cbnz	r3, 81866 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
   8185a:	2201      	movs	r2, #1
   8185c:	4b09      	ldr	r3, [pc, #36]	; (81884 <udd_sleep_mode+0x8c>)
   8185e:	701a      	strb	r2, [r3, #0]
   81860:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81864:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   81866:	4b05      	ldr	r3, [pc, #20]	; (8187c <udd_sleep_mode+0x84>)
   81868:	701c      	strb	r4, [r3, #0]
   8186a:	e004      	b.n	81876 <udd_sleep_mode+0x7e>
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   8186c:	4b03      	ldr	r3, [pc, #12]	; (8187c <udd_sleep_mode+0x84>)
   8186e:	781b      	ldrb	r3, [r3, #0]
   81870:	2b00      	cmp	r3, #0
   81872:	d1f8      	bne.n	81866 <udd_sleep_mode+0x6e>
   81874:	e7df      	b.n	81836 <udd_sleep_mode+0x3e>
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
   81876:	f85d 4b04 	ldr.w	r4, [sp], #4
   8187a:	4770      	bx	lr
   8187c:	20070c4c 	.word	0x20070c4c
   81880:	20070c94 	.word	0x20070c94
   81884:	200701d8 	.word	0x200701d8

00081888 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   81888:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8188a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8188e:	b672      	cpsid	i
   81890:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81894:	2200      	movs	r2, #0
   81896:	4b51      	ldr	r3, [pc, #324]	; (819dc <udd_enable+0x154>)
   81898:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   8189a:	2028      	movs	r0, #40	; 0x28
   8189c:	4b50      	ldr	r3, [pc, #320]	; (819e0 <udd_enable+0x158>)
   8189e:	4798      	blx	r3
	sysclk_enable_usb();
   818a0:	4b50      	ldr	r3, [pc, #320]	; (819e4 <udd_enable+0x15c>)
   818a2:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   818a4:	4b50      	ldr	r3, [pc, #320]	; (819e8 <udd_enable+0x160>)
   818a6:	2250      	movs	r2, #80	; 0x50
   818a8:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   818ac:	f44f 7280 	mov.w	r2, #256	; 0x100
   818b0:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   818b2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   818b6:	4b4d      	ldr	r3, [pc, #308]	; (819ec <udd_enable+0x164>)
   818b8:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   818ba:	4b4d      	ldr	r3, [pc, #308]	; (819f0 <udd_enable+0x168>)
   818bc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   818c0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   818c4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   818c8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   818cc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   818d0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   818d4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   818d8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   818dc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   818e0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   818e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   818e8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   818ec:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   818f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   818f4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   818f8:	681a      	ldr	r2, [r3, #0]
   818fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   818fe:	601a      	str	r2, [r3, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
# else
	udd_high_speed_disable();
   81900:	681a      	ldr	r2, [r3, #0]
   81902:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   81906:	601a      	str	r2, [r3, #0]
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   81908:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8190c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81910:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   81914:	461a      	mov	r2, r3
   81916:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   8191a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   8191e:	d0fa      	beq.n	81916 <udd_enable+0x8e>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   81920:	4b34      	ldr	r3, [pc, #208]	; (819f4 <udd_enable+0x16c>)
   81922:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   81924:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81928:	f36f 0282 	bfc	r2, #2, #1
   8192c:	751a      	strb	r2, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8192e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   81932:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81936:	f36f 0282 	bfc	r2, #2, #1
   8193a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   8193e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   81942:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81946:	f36f 0282 	bfc	r2, #2, #1
   8194a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   8194e:	4b28      	ldr	r3, [pc, #160]	; (819f0 <udd_enable+0x168>)
   81950:	2202      	movs	r2, #2
   81952:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   81956:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8195a:	f413 6f00 	tst.w	r3, #2048	; 0x800
		otg_raise_vbus_transition();
   8195e:	bf1c      	itt	ne
   81960:	4b23      	ldrne	r3, [pc, #140]	; (819f0 <udd_enable+0x168>)
   81962:	f8c3 280c 	strne.w	r2, [r3, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   81966:	4b22      	ldr	r3, [pc, #136]	; (819f0 <udd_enable+0x168>)
   81968:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8196c:	f042 0202 	orr.w	r2, r2, #2
   81970:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   81974:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81978:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8197c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   81980:	4b1d      	ldr	r3, [pc, #116]	; (819f8 <udd_enable+0x170>)
   81982:	781b      	ldrb	r3, [r3, #0]
   81984:	b9f3      	cbnz	r3, 819c4 <udd_enable+0x13c>
		udd_b_sleep_initialized = true;
   81986:	2201      	movs	r2, #1
   81988:	4b1b      	ldr	r3, [pc, #108]	; (819f8 <udd_enable+0x170>)
   8198a:	701a      	strb	r2, [r3, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   8198c:	2200      	movs	r2, #0
   8198e:	4b1b      	ldr	r3, [pc, #108]	; (819fc <udd_enable+0x174>)
   81990:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   81992:	4b1b      	ldr	r3, [pc, #108]	; (81a00 <udd_enable+0x178>)
   81994:	78db      	ldrb	r3, [r3, #3]
   81996:	2bff      	cmp	r3, #255	; 0xff
   81998:	d100      	bne.n	8199c <udd_enable+0x114>
   8199a:	e7fe      	b.n	8199a <udd_enable+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8199c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   819a0:	b672      	cpsid	i
   819a2:	f3bf 8f5f 	dmb	sy
   819a6:	2100      	movs	r1, #0
   819a8:	4a0c      	ldr	r2, [pc, #48]	; (819dc <udd_enable+0x154>)
   819aa:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   819ac:	4914      	ldr	r1, [pc, #80]	; (81a00 <udd_enable+0x178>)
   819ae:	78ca      	ldrb	r2, [r1, #3]
   819b0:	3201      	adds	r2, #1
   819b2:	70ca      	strb	r2, [r1, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   819b4:	b94b      	cbnz	r3, 819ca <udd_enable+0x142>
		cpu_irq_enable();
   819b6:	2201      	movs	r2, #1
   819b8:	4b08      	ldr	r3, [pc, #32]	; (819dc <udd_enable+0x154>)
   819ba:	701a      	strb	r2, [r3, #0]
   819bc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   819c0:	b662      	cpsie	i
   819c2:	e002      	b.n	819ca <udd_enable+0x142>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   819c4:	2000      	movs	r0, #0
   819c6:	4b0f      	ldr	r3, [pc, #60]	; (81a04 <udd_enable+0x17c>)
   819c8:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   819ca:	b92c      	cbnz	r4, 819d8 <udd_enable+0x150>
		cpu_irq_enable();
   819cc:	2201      	movs	r2, #1
   819ce:	4b03      	ldr	r3, [pc, #12]	; (819dc <udd_enable+0x154>)
   819d0:	701a      	strb	r2, [r3, #0]
   819d2:	f3bf 8f5f 	dmb	sy
   819d6:	b662      	cpsie	i
   819d8:	bd10      	pop	{r4, pc}
   819da:	bf00      	nop
   819dc:	200701d8 	.word	0x200701d8
   819e0:	0008123d 	.word	0x0008123d
   819e4:	00080f59 	.word	0x00080f59
   819e8:	e000e100 	.word	0xe000e100
   819ec:	000812b1 	.word	0x000812b1
   819f0:	400ac000 	.word	0x400ac000
   819f4:	20070c00 	.word	0x20070c00
   819f8:	20070c48 	.word	0x20070c48
   819fc:	20070c4c 	.word	0x20070c4c
   81a00:	20070c94 	.word	0x20070c94
   81a04:	000817f9 	.word	0x000817f9

00081a08 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81a08:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81a0a:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81a0e:	b672      	cpsid	i
   81a10:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81a14:	2200      	movs	r2, #0
   81a16:	4b18      	ldr	r3, [pc, #96]	; (81a78 <udd_attach+0x70>)
   81a18:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81a1a:	2001      	movs	r0, #1
   81a1c:	4b17      	ldr	r3, [pc, #92]	; (81a7c <udd_attach+0x74>)
   81a1e:	4798      	blx	r3
	otg_unfreeze_clock();
   81a20:	4a17      	ldr	r2, [pc, #92]	; (81a80 <udd_attach+0x78>)
   81a22:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   81a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81a2a:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// This section of clock check can be improved with a check of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   81a2e:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81a32:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81a36:	d0fa      	beq.n	81a2e <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
   81a38:	4b11      	ldr	r3, [pc, #68]	; (81a80 <udd_attach+0x78>)
   81a3a:	681a      	ldr	r2, [r3, #0]
   81a3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   81a40:	601a      	str	r2, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81a42:	2508      	movs	r5, #8
   81a44:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
   81a46:	2101      	movs	r1, #1
   81a48:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   81a4a:	2210      	movs	r2, #16
   81a4c:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   81a4e:	2004      	movs	r0, #4
   81a50:	6198      	str	r0, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   81a52:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
   81a54:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
   81a56:	2002      	movs	r0, #2
   81a58:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   81a5a:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   81a5c:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   81a5e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81a66:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81a6a:	b924      	cbnz	r4, 81a76 <udd_attach+0x6e>
		cpu_irq_enable();
   81a6c:	4b02      	ldr	r3, [pc, #8]	; (81a78 <udd_attach+0x70>)
   81a6e:	7019      	strb	r1, [r3, #0]
   81a70:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81a74:	b662      	cpsie	i
   81a76:	bd38      	pop	{r3, r4, r5, pc}
   81a78:	200701d8 	.word	0x200701d8
   81a7c:	000817f9 	.word	0x000817f9
   81a80:	400ac000 	.word	0x400ac000

00081a84 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   81a84:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   81a86:	4b0a      	ldr	r3, [pc, #40]	; (81ab0 <udd_detach+0x2c>)
   81a88:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81a90:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   81a94:	681a      	ldr	r2, [r3, #0]
   81a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   81a9a:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   81a9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81aa4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   81aa8:	2000      	movs	r0, #0
   81aaa:	4b02      	ldr	r3, [pc, #8]	; (81ab4 <udd_detach+0x30>)
   81aac:	4798      	blx	r3
   81aae:	bd08      	pop	{r3, pc}
   81ab0:	400ac000 	.word	0x400ac000
   81ab4:	000817f9 	.word	0x000817f9

00081ab8 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   81ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81abc:	4b98      	ldr	r3, [pc, #608]	; (81d20 <UOTGHS_Handler+0x268>)
   81abe:	4798      	blx	r3
   81ac0:	b960      	cbnz	r0, 81adc <UOTGHS_Handler+0x24>
   81ac2:	4b98      	ldr	r3, [pc, #608]	; (81d24 <UOTGHS_Handler+0x26c>)
   81ac4:	685b      	ldr	r3, [r3, #4]
   81ac6:	f013 0f01 	tst.w	r3, #1
   81aca:	d107      	bne.n	81adc <UOTGHS_Handler+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81acc:	b672      	cpsid	i
   81ace:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81ad2:	2200      	movs	r2, #0
   81ad4:	4b94      	ldr	r3, [pc, #592]	; (81d28 <UOTGHS_Handler+0x270>)
   81ad6:	701a      	strb	r2, [r3, #0]
		return;
   81ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_sof()) {
   81adc:	4b91      	ldr	r3, [pc, #580]	; (81d24 <UOTGHS_Handler+0x26c>)
   81ade:	685b      	ldr	r3, [r3, #4]
   81ae0:	f013 0f04 	tst.w	r3, #4
   81ae4:	d00c      	beq.n	81b00 <UOTGHS_Handler+0x48>
		udd_ack_sof();
   81ae6:	4b8f      	ldr	r3, [pc, #572]	; (81d24 <UOTGHS_Handler+0x26c>)
   81ae8:	2204      	movs	r2, #4
   81aea:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   81aec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81af0:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   81af4:	f040 82e8 	bne.w	820c8 <UOTGHS_Handler+0x610>
			udc_sof_notify();
   81af8:	4b8c      	ldr	r3, [pc, #560]	; (81d2c <UOTGHS_Handler+0x274>)
   81afa:	4798      	blx	r3
   81afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
	}

	if (Is_udd_msof()) {
   81b00:	4b88      	ldr	r3, [pc, #544]	; (81d24 <UOTGHS_Handler+0x26c>)
   81b02:	685b      	ldr	r3, [r3, #4]
   81b04:	f013 0f02 	tst.w	r3, #2
   81b08:	d006      	beq.n	81b18 <UOTGHS_Handler+0x60>
		udd_ack_msof();
   81b0a:	2202      	movs	r2, #2
   81b0c:	4b85      	ldr	r3, [pc, #532]	; (81d24 <UOTGHS_Handler+0x26c>)
   81b0e:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81b10:	4b86      	ldr	r3, [pc, #536]	; (81d2c <UOTGHS_Handler+0x274>)
   81b12:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   81b18:	4b82      	ldr	r3, [pc, #520]	; (81d24 <UOTGHS_Handler+0x26c>)
   81b1a:	685b      	ldr	r3, [r3, #4]
   81b1c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   81b20:	f000 82c3 	beq.w	820aa <UOTGHS_Handler+0x5f2>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   81b24:	4b82      	ldr	r3, [pc, #520]	; (81d30 <UOTGHS_Handler+0x278>)
   81b26:	2210      	movs	r2, #16
   81b28:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   81b2a:	2208      	movs	r2, #8
   81b2c:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   81b2e:	3bf0      	subs	r3, #240	; 0xf0
   81b30:	681b      	ldr	r3, [r3, #0]
   81b32:	f013 0f04 	tst.w	r3, #4
   81b36:	d059      	beq.n	81bec <UOTGHS_Handler+0x134>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81b38:	4b7e      	ldr	r3, [pc, #504]	; (81d34 <UOTGHS_Handler+0x27c>)
   81b3a:	781b      	ldrb	r3, [r3, #0]
   81b3c:	2b00      	cmp	r3, #0
   81b3e:	f000 82a9 	beq.w	82094 <UOTGHS_Handler+0x5dc>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   81b42:	4b7d      	ldr	r3, [pc, #500]	; (81d38 <UOTGHS_Handler+0x280>)
   81b44:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   81b46:	4b7d      	ldr	r3, [pc, #500]	; (81d3c <UOTGHS_Handler+0x284>)
   81b48:	4798      	blx	r3
   81b4a:	e2a3      	b.n	82094 <UOTGHS_Handler+0x5dc>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
		udd_ctrl_stall_data();
   81b4c:	4b7c      	ldr	r3, [pc, #496]	; (81d40 <UOTGHS_Handler+0x288>)
   81b4e:	4798      	blx	r3
		udd_ack_setup_received(0);
   81b50:	2204      	movs	r2, #4
   81b52:	4b7c      	ldr	r3, [pc, #496]	; (81d44 <UOTGHS_Handler+0x28c>)
   81b54:	601a      	str	r2, [r3, #0]
   81b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81b5a:	f813 1b01 	ldrb.w	r1, [r3], #1
   81b5e:	f802 1f01 	strb.w	r1, [r2, #1]!
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81b62:	4283      	cmp	r3, r0
   81b64:	d1f9      	bne.n	81b5a <UOTGHS_Handler+0xa2>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   81b66:	4b78      	ldr	r3, [pc, #480]	; (81d48 <UOTGHS_Handler+0x290>)
   81b68:	4798      	blx	r3
   81b6a:	b930      	cbnz	r0, 81b7a <UOTGHS_Handler+0xc2>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   81b6c:	4b74      	ldr	r3, [pc, #464]	; (81d40 <UOTGHS_Handler+0x288>)
   81b6e:	4798      	blx	r3
		udd_ack_setup_received(0);
   81b70:	2204      	movs	r2, #4
   81b72:	4b74      	ldr	r3, [pc, #464]	; (81d44 <UOTGHS_Handler+0x28c>)
   81b74:	601a      	str	r2, [r3, #0]
   81b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}
	udd_ack_setup_received(0);
   81b7a:	2204      	movs	r2, #4
   81b7c:	4b71      	ldr	r3, [pc, #452]	; (81d44 <UOTGHS_Handler+0x28c>)
   81b7e:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   81b80:	4b72      	ldr	r3, [pc, #456]	; (81d4c <UOTGHS_Handler+0x294>)
   81b82:	f993 3000 	ldrsb.w	r3, [r3]
   81b86:	2b00      	cmp	r3, #0
   81b88:	da0b      	bge.n	81ba2 <UOTGHS_Handler+0xea>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81b8a:	2300      	movs	r3, #0
   81b8c:	4a70      	ldr	r2, [pc, #448]	; (81d50 <UOTGHS_Handler+0x298>)
   81b8e:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81b90:	4a70      	ldr	r2, [pc, #448]	; (81d54 <UOTGHS_Handler+0x29c>)
   81b92:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   81b94:	2202      	movs	r2, #2
   81b96:	4b67      	ldr	r3, [pc, #412]	; (81d34 <UOTGHS_Handler+0x27c>)
   81b98:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   81b9a:	4b6f      	ldr	r3, [pc, #444]	; (81d58 <UOTGHS_Handler+0x2a0>)
   81b9c:	4798      	blx	r3
   81b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   81ba2:	4b6a      	ldr	r3, [pc, #424]	; (81d4c <UOTGHS_Handler+0x294>)
   81ba4:	88db      	ldrh	r3, [r3, #6]
   81ba6:	b91b      	cbnz	r3, 81bb0 <UOTGHS_Handler+0xf8>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   81ba8:	4b6c      	ldr	r3, [pc, #432]	; (81d5c <UOTGHS_Handler+0x2a4>)
   81baa:	4798      	blx	r3
   81bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81bb0:	2200      	movs	r2, #0
   81bb2:	4b67      	ldr	r3, [pc, #412]	; (81d50 <UOTGHS_Handler+0x298>)
   81bb4:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81bb6:	4b67      	ldr	r3, [pc, #412]	; (81d54 <UOTGHS_Handler+0x29c>)
   81bb8:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   81bba:	2101      	movs	r1, #1
   81bbc:	4b5d      	ldr	r3, [pc, #372]	; (81d34 <UOTGHS_Handler+0x27c>)
   81bbe:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   81bc0:	2110      	movs	r1, #16
   81bc2:	4b60      	ldr	r3, [pc, #384]	; (81d44 <UOTGHS_Handler+0x28c>)
   81bc4:	6019      	str	r1, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81bc6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81bca:	b672      	cpsid	i
   81bcc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81bd0:	4855      	ldr	r0, [pc, #340]	; (81d28 <UOTGHS_Handler+0x270>)
   81bd2:	7002      	strb	r2, [r0, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   81bd4:	4a62      	ldr	r2, [pc, #392]	; (81d60 <UOTGHS_Handler+0x2a8>)
   81bd6:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81bd8:	2b00      	cmp	r3, #0
   81bda:	f040 8275 	bne.w	820c8 <UOTGHS_Handler+0x610>
		cpu_irq_enable();
   81bde:	2201      	movs	r2, #1
   81be0:	7002      	strb	r2, [r0, #0]
   81be2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81be6:	b662      	cpsie	i
   81be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   81bec:	4b5d      	ldr	r3, [pc, #372]	; (81d64 <UOTGHS_Handler+0x2ac>)
   81bee:	681b      	ldr	r3, [r3, #0]
   81bf0:	f013 0f01 	tst.w	r3, #1
   81bf4:	d008      	beq.n	81c08 <UOTGHS_Handler+0x150>
   81bf6:	4b5c      	ldr	r3, [pc, #368]	; (81d68 <UOTGHS_Handler+0x2b0>)
   81bf8:	681b      	ldr	r3, [r3, #0]
   81bfa:	f013 0f01 	tst.w	r3, #1
   81bfe:	d003      	beq.n	81c08 <UOTGHS_Handler+0x150>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   81c00:	4b55      	ldr	r3, [pc, #340]	; (81d58 <UOTGHS_Handler+0x2a0>)
   81c02:	4798      	blx	r3
   81c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   81c08:	4b56      	ldr	r3, [pc, #344]	; (81d64 <UOTGHS_Handler+0x2ac>)
   81c0a:	681b      	ldr	r3, [r3, #0]
   81c0c:	f013 0f02 	tst.w	r3, #2
   81c10:	f000 80ae 	beq.w	81d70 <UOTGHS_Handler+0x2b8>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81c14:	4b47      	ldr	r3, [pc, #284]	; (81d34 <UOTGHS_Handler+0x27c>)
   81c16:	781b      	ldrb	r3, [r3, #0]
   81c18:	2b01      	cmp	r3, #1
   81c1a:	d00c      	beq.n	81c36 <UOTGHS_Handler+0x17e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   81c1c:	2b02      	cmp	r3, #2
   81c1e:	d001      	beq.n	81c24 <UOTGHS_Handler+0x16c>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   81c20:	2b04      	cmp	r3, #4
   81c22:	d102      	bne.n	81c2a <UOTGHS_Handler+0x172>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   81c24:	4b44      	ldr	r3, [pc, #272]	; (81d38 <UOTGHS_Handler+0x280>)
   81c26:	4798      	blx	r3
   81c28:	e001      	b.n	81c2e <UOTGHS_Handler+0x176>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   81c2a:	4b45      	ldr	r3, [pc, #276]	; (81d40 <UOTGHS_Handler+0x288>)
   81c2c:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   81c2e:	4b43      	ldr	r3, [pc, #268]	; (81d3c <UOTGHS_Handler+0x284>)
   81c30:	4798      	blx	r3
   81c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81c36:	4b4b      	ldr	r3, [pc, #300]	; (81d64 <UOTGHS_Handler+0x2ac>)
   81c38:	6818      	ldr	r0, [r3, #0]
   81c3a:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   81c3e:	4b43      	ldr	r3, [pc, #268]	; (81d4c <UOTGHS_Handler+0x294>)
   81c40:	899b      	ldrh	r3, [r3, #12]
   81c42:	4a44      	ldr	r2, [pc, #272]	; (81d54 <UOTGHS_Handler+0x29c>)
   81c44:	8814      	ldrh	r4, [r2, #0]
   81c46:	1822      	adds	r2, r4, r0
   81c48:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81c4a:	bfae      	itee	ge
   81c4c:	b280      	uxthge	r0, r0
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81c4e:	1b1b      	sublt	r3, r3, r4
   81c50:	b298      	uxthlt	r0, r3
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81c52:	4b3e      	ldr	r3, [pc, #248]	; (81d4c <UOTGHS_Handler+0x294>)
   81c54:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   81c56:	b1b0      	cbz	r0, 81c86 <UOTGHS_Handler+0x1ce>
   81c58:	1e63      	subs	r3, r4, #1
   81c5a:	441a      	add	r2, r3
   81c5c:	4b43      	ldr	r3, [pc, #268]	; (81d6c <UOTGHS_Handler+0x2b4>)
		*ptr_dest++ = *ptr_src++;
   81c5e:	f813 1b01 	ldrb.w	r1, [r3], #1
   81c62:	f802 1f01 	strb.w	r1, [r2, #1]!
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   81c66:	b2d9      	uxtb	r1, r3
   81c68:	4281      	cmp	r1, r0
   81c6a:	d3f8      	bcc.n	81c5e <UOTGHS_Handler+0x1a6>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   81c6c:	4404      	add	r4, r0
   81c6e:	b2a4      	uxth	r4, r4
   81c70:	4b38      	ldr	r3, [pc, #224]	; (81d54 <UOTGHS_Handler+0x29c>)
   81c72:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   81c74:	2840      	cmp	r0, #64	; 0x40
   81c76:	d106      	bne.n	81c86 <UOTGHS_Handler+0x1ce>
			|| (udd_g_ctrlreq.req.wLength <=
   81c78:	4b34      	ldr	r3, [pc, #208]	; (81d4c <UOTGHS_Handler+0x294>)
   81c7a:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   81c7c:	4b34      	ldr	r3, [pc, #208]	; (81d50 <UOTGHS_Handler+0x298>)
   81c7e:	881b      	ldrh	r3, [r3, #0]
   81c80:	4423      	add	r3, r4
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   81c82:	429a      	cmp	r2, r3
   81c84:	dc13      	bgt.n	81cae <UOTGHS_Handler+0x1f6>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81c86:	4b31      	ldr	r3, [pc, #196]	; (81d4c <UOTGHS_Handler+0x294>)
   81c88:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81c8a:	695b      	ldr	r3, [r3, #20]
   81c8c:	b143      	cbz	r3, 81ca0 <UOTGHS_Handler+0x1e8>
			if (!udd_g_ctrlreq.over_under_run()) {
   81c8e:	4798      	blx	r3
   81c90:	b930      	cbnz	r0, 81ca0 <UOTGHS_Handler+0x1e8>
				// Stall ZLP
				udd_ctrl_stall_data();
   81c92:	4b2b      	ldr	r3, [pc, #172]	; (81d40 <UOTGHS_Handler+0x288>)
   81c94:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   81c96:	2202      	movs	r2, #2
   81c98:	4b2a      	ldr	r3, [pc, #168]	; (81d44 <UOTGHS_Handler+0x28c>)
   81c9a:	601a      	str	r2, [r3, #0]
   81c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   81ca0:	2202      	movs	r2, #2
   81ca2:	4b28      	ldr	r3, [pc, #160]	; (81d44 <UOTGHS_Handler+0x28c>)
   81ca4:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   81ca6:	4b2d      	ldr	r3, [pc, #180]	; (81d5c <UOTGHS_Handler+0x2a4>)
   81ca8:	4798      	blx	r3
   81caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   81cae:	4b27      	ldr	r3, [pc, #156]	; (81d4c <UOTGHS_Handler+0x294>)
   81cb0:	899b      	ldrh	r3, [r3, #12]
   81cb2:	42a3      	cmp	r3, r4
   81cb4:	d11a      	bne.n	81cec <UOTGHS_Handler+0x234>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   81cb6:	4b25      	ldr	r3, [pc, #148]	; (81d4c <UOTGHS_Handler+0x294>)
   81cb8:	695b      	ldr	r3, [r3, #20]
   81cba:	b933      	cbnz	r3, 81cca <UOTGHS_Handler+0x212>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   81cbc:	4b20      	ldr	r3, [pc, #128]	; (81d40 <UOTGHS_Handler+0x288>)
   81cbe:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81cc0:	2202      	movs	r2, #2
   81cc2:	4b20      	ldr	r3, [pc, #128]	; (81d44 <UOTGHS_Handler+0x28c>)
   81cc4:	601a      	str	r2, [r3, #0]
   81cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   81cca:	4798      	blx	r3
   81ccc:	b930      	cbnz	r0, 81cdc <UOTGHS_Handler+0x224>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   81cce:	4b1c      	ldr	r3, [pc, #112]	; (81d40 <UOTGHS_Handler+0x288>)
   81cd0:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81cd2:	2202      	movs	r2, #2
   81cd4:	4b1b      	ldr	r3, [pc, #108]	; (81d44 <UOTGHS_Handler+0x28c>)
   81cd6:	601a      	str	r2, [r3, #0]
   81cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81cdc:	491c      	ldr	r1, [pc, #112]	; (81d50 <UOTGHS_Handler+0x298>)
   81cde:	4a1d      	ldr	r2, [pc, #116]	; (81d54 <UOTGHS_Handler+0x29c>)
   81ce0:	8810      	ldrh	r0, [r2, #0]
   81ce2:	880b      	ldrh	r3, [r1, #0]
   81ce4:	4403      	add	r3, r0
   81ce6:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   81ce8:	2300      	movs	r3, #0
   81cea:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   81cec:	4b15      	ldr	r3, [pc, #84]	; (81d44 <UOTGHS_Handler+0x28c>)
   81cee:	2202      	movs	r2, #2
   81cf0:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   81cf2:	2210      	movs	r2, #16
   81cf4:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81cf6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81cfa:	b672      	cpsid	i
   81cfc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81d00:	2000      	movs	r0, #0
   81d02:	4909      	ldr	r1, [pc, #36]	; (81d28 <UOTGHS_Handler+0x270>)
   81d04:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   81d06:	4916      	ldr	r1, [pc, #88]	; (81d60 <UOTGHS_Handler+0x2a8>)
   81d08:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	f040 81dc 	bne.w	820c8 <UOTGHS_Handler+0x610>
		cpu_irq_enable();
   81d10:	2201      	movs	r2, #1
   81d12:	4b05      	ldr	r3, [pc, #20]	; (81d28 <UOTGHS_Handler+0x270>)
   81d14:	701a      	strb	r2, [r3, #0]
   81d16:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81d1a:	b662      	cpsie	i
   81d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d20:	000812c5 	.word	0x000812c5
   81d24:	400ac000 	.word	0x400ac000
   81d28:	200701d8 	.word	0x200701d8
   81d2c:	00080905 	.word	0x00080905
   81d30:	400ac220 	.word	0x400ac220
   81d34:	20070c4d 	.word	0x20070c4d
   81d38:	000814bd 	.word	0x000814bd
   81d3c:	00081411 	.word	0x00081411
   81d40:	0008145d 	.word	0x0008145d
   81d44:	400ac160 	.word	0x400ac160
   81d48:	00080941 	.word	0x00080941
   81d4c:	20070c9c 	.word	0x20070c9c
   81d50:	20070c4a 	.word	0x20070c4a
   81d54:	20070c4e 	.word	0x20070c4e
   81d58:	000814cd 	.word	0x000814cd
   81d5c:	00081475 	.word	0x00081475
   81d60:	400ac1f0 	.word	0x400ac1f0
   81d64:	400ac130 	.word	0x400ac130
   81d68:	400ac1c0 	.word	0x400ac1c0
   81d6c:	20180000 	.word	0x20180000
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   81d70:	4bb5      	ldr	r3, [pc, #724]	; (82048 <UOTGHS_Handler+0x590>)
   81d72:	681b      	ldr	r3, [r3, #0]
   81d74:	f013 0f08 	tst.w	r3, #8
   81d78:	d013      	beq.n	81da2 <UOTGHS_Handler+0x2ea>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   81d7a:	2208      	movs	r2, #8
   81d7c:	4bb3      	ldr	r3, [pc, #716]	; (8204c <UOTGHS_Handler+0x594>)
   81d7e:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   81d80:	3b30      	subs	r3, #48	; 0x30
   81d82:	681b      	ldr	r3, [r3, #0]
   81d84:	f013 0f01 	tst.w	r3, #1
   81d88:	f040 819e 	bne.w	820c8 <UOTGHS_Handler+0x610>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81d8c:	4bb0      	ldr	r3, [pc, #704]	; (82050 <UOTGHS_Handler+0x598>)
   81d8e:	781b      	ldrb	r3, [r3, #0]
   81d90:	2b03      	cmp	r3, #3
   81d92:	f040 8199 	bne.w	820c8 <UOTGHS_Handler+0x610>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   81d96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81d9a:	4bae      	ldr	r3, [pc, #696]	; (82054 <UOTGHS_Handler+0x59c>)
   81d9c:	601a      	str	r2, [r3, #0]
   81d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   81da2:	4ba9      	ldr	r3, [pc, #676]	; (82048 <UOTGHS_Handler+0x590>)
   81da4:	681b      	ldr	r3, [r3, #0]
   81da6:	f013 0f10 	tst.w	r3, #16
   81daa:	f000 817e 	beq.w	820aa <UOTGHS_Handler+0x5f2>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   81dae:	2210      	movs	r2, #16
   81db0:	4ba6      	ldr	r3, [pc, #664]	; (8204c <UOTGHS_Handler+0x594>)
   81db2:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   81db4:	3b30      	subs	r3, #48	; 0x30
   81db6:	681b      	ldr	r3, [r3, #0]
   81db8:	f013 0f02 	tst.w	r3, #2
   81dbc:	f040 8184 	bne.w	820c8 <UOTGHS_Handler+0x610>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81dc0:	4ba3      	ldr	r3, [pc, #652]	; (82050 <UOTGHS_Handler+0x598>)
   81dc2:	781b      	ldrb	r3, [r3, #0]
   81dc4:	2b01      	cmp	r3, #1
   81dc6:	d103      	bne.n	81dd0 <UOTGHS_Handler+0x318>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   81dc8:	4ba3      	ldr	r3, [pc, #652]	; (82058 <UOTGHS_Handler+0x5a0>)
   81dca:	4798      	blx	r3
   81dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81dd0:	2b04      	cmp	r3, #4
   81dd2:	f040 8179 	bne.w	820c8 <UOTGHS_Handler+0x610>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   81dd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81dda:	4b9e      	ldr	r3, [pc, #632]	; (82054 <UOTGHS_Handler+0x59c>)
   81ddc:	601a      	str	r2, [r3, #0]
   81dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81de2:	b2da      	uxtb	r2, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81de4:	461f      	mov	r7, r3
   81de6:	1e58      	subs	r0, r3, #1

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81de8:	6926      	ldr	r6, [r4, #16]
   81dea:	fa0e f500 	lsl.w	r5, lr, r0
   81dee:	4235      	tst	r5, r6
   81df0:	d020      	beq.n	81e34 <UOTGHS_Handler+0x37c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81df2:	6866      	ldr	r6, [r4, #4]
   81df4:	4235      	tst	r5, r6
   81df6:	d01d      	beq.n	81e34 <UOTGHS_Handler+0x37c>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   81df8:	4b98      	ldr	r3, [pc, #608]	; (8205c <UOTGHS_Handler+0x5a4>)
   81dfa:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   81dfe:	68d9      	ldr	r1, [r3, #12]
   81e00:	f011 0f01 	tst.w	r1, #1
   81e04:	f040 8160 	bne.w	820c8 <UOTGHS_Handler+0x610>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   81e08:	4995      	ldr	r1, [pc, #596]	; (82060 <UOTGHS_Handler+0x5a8>)
   81e0a:	614d      	str	r5, [r1, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   81e0c:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   81e0e:	0c1e      	lsrs	r6, r3, #16
   81e10:	d00b      	beq.n	81e2a <UOTGHS_Handler+0x372>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   81e12:	4994      	ldr	r1, [pc, #592]	; (82064 <UOTGHS_Handler+0x5ac>)
   81e14:	0045      	lsls	r5, r0, #1
   81e16:	182b      	adds	r3, r5, r0
   81e18:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   81e1c:	68dc      	ldr	r4, [r3, #12]
   81e1e:	1ba4      	subs	r4, r4, r6
   81e20:	60dc      	str	r4, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   81e22:	4428      	add	r0, r5
   81e24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   81e28:	608c      	str	r4, [r1, #8]
			}
			udd_ep_trans_done(ep);
   81e2a:	4610      	mov	r0, r2
   81e2c:	4b8e      	ldr	r3, [pc, #568]	; (82068 <UOTGHS_Handler+0x5b0>)
   81e2e:	4798      	blx	r3
   81e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81e34:	6926      	ldr	r6, [r4, #16]
   81e36:	fa0c f507 	lsl.w	r5, ip, r7
   81e3a:	4235      	tst	r5, r6
   81e3c:	d04c      	beq.n	81ed8 <UOTGHS_Handler+0x420>
   81e3e:	ea4f 0883 	mov.w	r8, r3, lsl #2
   81e42:	f101 0790 	add.w	r7, r1, #144	; 0x90
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   81e46:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
   81e4a:	f016 0f01 	tst.w	r6, #1
   81e4e:	d018      	beq.n	81e82 <UOTGHS_Handler+0x3ca>
					&& Is_udd_in_send(ep)) {
   81e50:	680e      	ldr	r6, [r1, #0]
   81e52:	f016 0f01 	tst.w	r6, #1
   81e56:	d014      	beq.n	81e82 <UOTGHS_Handler+0x3ca>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   81e58:	4b84      	ldr	r3, [pc, #528]	; (8206c <UOTGHS_Handler+0x5b4>)
   81e5a:	2101      	movs	r1, #1
   81e5c:	f848 1003 	str.w	r1, [r8, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   81e60:	4c7a      	ldr	r4, [pc, #488]	; (8204c <UOTGHS_Handler+0x594>)
   81e62:	f848 1004 	str.w	r1, [r8, r4]
				udd_ack_fifocon(ep);
   81e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81e6a:	f848 1003 	str.w	r1, [r8, r3]
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81e6e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
   81e72:	4b7c      	ldr	r3, [pc, #496]	; (82064 <UOTGHS_Handler+0x5ac>)
   81e74:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   81e78:	2100      	movs	r1, #0
   81e7a:	4b7d      	ldr	r3, [pc, #500]	; (82070 <UOTGHS_Handler+0x5b8>)
   81e7c:	4798      	blx	r3
   81e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81e82:	683a      	ldr	r2, [r7, #0]
   81e84:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   81e88:	d026      	beq.n	81ed8 <UOTGHS_Handler+0x420>
					&& (0 == udd_nb_busy_bank(ep))) {
   81e8a:	680a      	ldr	r2, [r1, #0]
   81e8c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   81e90:	d122      	bne.n	81ed8 <UOTGHS_Handler+0x420>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81e92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81e96:	4b75      	ldr	r3, [pc, #468]	; (8206c <UOTGHS_Handler+0x5b4>)
   81e98:	f848 2003 	str.w	r2, [r8, r3]
				udd_disable_endpoint_interrupt(ep);
   81e9c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   81ea0:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   81ea2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   81ea6:	4b6f      	ldr	r3, [pc, #444]	; (82064 <UOTGHS_Handler+0x5ac>)
   81ea8:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   81eac:	7d02      	ldrb	r2, [r0, #20]
   81eae:	f36f 0282 	bfc	r2, #2, #1
   81eb2:	7502      	strb	r2, [r0, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81eb4:	4a6f      	ldr	r2, [pc, #444]	; (82074 <UOTGHS_Handler+0x5bc>)
   81eb6:	f858 3002 	ldr.w	r3, [r8, r2]
   81eba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81ebe:	f848 3002 	str.w	r3, [r8, r2]
				udd_enable_stall_handshake(ep);
   81ec2:	4b64      	ldr	r3, [pc, #400]	; (82054 <UOTGHS_Handler+0x59c>)
   81ec4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ec8:	f848 2003 	str.w	r2, [r8, r3]
				udd_reset_data_toggle(ep);
   81ecc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81ed0:	f848 2003 	str.w	r2, [r8, r3]
   81ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ed8:	3301      	adds	r3, #1
   81eda:	3104      	adds	r1, #4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   81edc:	2b04      	cmp	r3, #4
   81ede:	d180      	bne.n	81de2 <UOTGHS_Handler+0x32a>
   81ee0:	e0eb      	b.n	820ba <UOTGHS_Handler+0x602>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
   81ee2:	2208      	movs	r2, #8
   81ee4:	4b5e      	ldr	r3, [pc, #376]	; (82060 <UOTGHS_Handler+0x5a8>)
   81ee6:	609a      	str	r2, [r3, #8]
   81ee8:	4d5e      	ldr	r5, [pc, #376]	; (82064 <UOTGHS_Handler+0x5ac>)
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81eea:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   81eec:	2701      	movs	r7, #1
   81eee:	4e60      	ldr	r6, [pc, #384]	; (82070 <UOTGHS_Handler+0x5b8>)
   81ef0:	3401      	adds	r4, #1
   81ef2:	b2e4      	uxtb	r4, r4
   81ef4:	4628      	mov	r0, r5
   81ef6:	4639      	mov	r1, r7
   81ef8:	4622      	mov	r2, r4
   81efa:	47b0      	blx	r6
   81efc:	3518      	adds	r5, #24
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   81efe:	2c03      	cmp	r4, #3
   81f00:	d1f6      	bne.n	81ef0 <UOTGHS_Handler+0x438>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   81f02:	4b5d      	ldr	r3, [pc, #372]	; (82078 <UOTGHS_Handler+0x5c0>)
   81f04:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   81f06:	4b56      	ldr	r3, [pc, #344]	; (82060 <UOTGHS_Handler+0x5a8>)
   81f08:	681a      	ldr	r2, [r3, #0]
   81f0a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81f0e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   81f10:	681a      	ldr	r2, [r3, #0]
   81f12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81f16:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   81f18:	4956      	ldr	r1, [pc, #344]	; (82074 <UOTGHS_Handler+0x5bc>)
   81f1a:	680a      	ldr	r2, [r1, #0]
   81f1c:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   81f20:	f022 021c 	bic.w	r2, r2, #28
   81f24:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   81f28:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   81f2a:	680a      	ldr	r2, [r1, #0]
   81f2c:	f042 0202 	orr.w	r2, r2, #2
   81f30:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
   81f32:	69da      	ldr	r2, [r3, #28]
   81f34:	f042 0201 	orr.w	r2, r2, #1
   81f38:	61da      	str	r2, [r3, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81f3a:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81f3e:	b672      	cpsid	i
   81f40:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81f44:	2000      	movs	r0, #0
   81f46:	494d      	ldr	r1, [pc, #308]	; (8207c <UOTGHS_Handler+0x5c4>)
   81f48:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   81f4a:	4942      	ldr	r1, [pc, #264]	; (82054 <UOTGHS_Handler+0x59c>)
   81f4c:	2004      	movs	r0, #4
   81f4e:	6008      	str	r0, [r1, #0]
	udd_enable_out_received_interrupt(0);
   81f50:	2002      	movs	r0, #2
   81f52:	6008      	str	r0, [r1, #0]
	udd_enable_endpoint_interrupt(0);
   81f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   81f58:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81f5a:	b92a      	cbnz	r2, 81f68 <UOTGHS_Handler+0x4b0>
		cpu_irq_enable();
   81f5c:	2201      	movs	r2, #1
   81f5e:	4b47      	ldr	r3, [pc, #284]	; (8207c <UOTGHS_Handler+0x5c4>)
   81f60:	701a      	strb	r2, [r3, #0]
   81f62:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81f66:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   81f68:	4b45      	ldr	r3, [pc, #276]	; (82080 <UOTGHS_Handler+0x5c8>)
   81f6a:	4798      	blx	r3
		goto udd_interrupt_end;
   81f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   81f70:	4b3b      	ldr	r3, [pc, #236]	; (82060 <UOTGHS_Handler+0x5a8>)
   81f72:	691b      	ldr	r3, [r3, #16]
   81f74:	f013 0f01 	tst.w	r3, #1
   81f78:	d01a      	beq.n	81fb0 <UOTGHS_Handler+0x4f8>
   81f7a:	4b39      	ldr	r3, [pc, #228]	; (82060 <UOTGHS_Handler+0x5a8>)
   81f7c:	685b      	ldr	r3, [r3, #4]
   81f7e:	f013 0f01 	tst.w	r3, #1
   81f82:	d015      	beq.n	81fb0 <UOTGHS_Handler+0x4f8>
		otg_unfreeze_clock();
   81f84:	4b36      	ldr	r3, [pc, #216]	; (82060 <UOTGHS_Handler+0x5a8>)
   81f86:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81f8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81f8e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   81f92:	2201      	movs	r2, #1
   81f94:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   81f96:	2210      	movs	r2, #16
   81f98:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   81f9a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81f9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81fa2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   81fa6:	2000      	movs	r0, #0
   81fa8:	4b36      	ldr	r3, [pc, #216]	; (82084 <UOTGHS_Handler+0x5cc>)
   81faa:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   81fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   81fb0:	4b2b      	ldr	r3, [pc, #172]	; (82060 <UOTGHS_Handler+0x5a8>)
   81fb2:	691b      	ldr	r3, [r3, #16]
   81fb4:	f013 0f10 	tst.w	r3, #16
   81fb8:	d01f      	beq.n	81ffa <UOTGHS_Handler+0x542>
   81fba:	4b29      	ldr	r3, [pc, #164]	; (82060 <UOTGHS_Handler+0x5a8>)
   81fbc:	685b      	ldr	r3, [r3, #4]
   81fbe:	f013 0f10 	tst.w	r3, #16
   81fc2:	d01a      	beq.n	81ffa <UOTGHS_Handler+0x542>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   81fc4:	4a26      	ldr	r2, [pc, #152]	; (82060 <UOTGHS_Handler+0x5a8>)
   81fc6:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   81fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81fce:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81fd2:	4613      	mov	r3, r2
   81fd4:	e003      	b.n	81fde <UOTGHS_Handler+0x526>
			if (Is_udd_suspend()) {
   81fd6:	685a      	ldr	r2, [r3, #4]
   81fd8:	f012 0f01 	tst.w	r2, #1
   81fdc:	d104      	bne.n	81fe8 <UOTGHS_Handler+0x530>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   81fde:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   81fe2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   81fe6:	d0f6      	beq.n	81fd6 <UOTGHS_Handler+0x51e>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   81fe8:	4b1d      	ldr	r3, [pc, #116]	; (82060 <UOTGHS_Handler+0x5a8>)
   81fea:	2210      	movs	r2, #16
   81fec:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   81fee:	2001      	movs	r0, #1
   81ff0:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   81ff2:	4b24      	ldr	r3, [pc, #144]	; (82084 <UOTGHS_Handler+0x5cc>)
   81ff4:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   81ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_otg_vbus_transition()) {
   81ffa:	4b19      	ldr	r3, [pc, #100]	; (82060 <UOTGHS_Handler+0x5a8>)
   81ffc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82000:	f013 0f02 	tst.w	r3, #2
   82004:	d060      	beq.n	820c8 <UOTGHS_Handler+0x610>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   82006:	4b16      	ldr	r3, [pc, #88]	; (82060 <UOTGHS_Handler+0x5a8>)
   82008:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8200c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   82010:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82014:	2202      	movs	r2, #2
   82016:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   8201a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8201e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   82022:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   82026:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8202a:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   8202e:	bf14      	ite	ne
   82030:	4b15      	ldrne	r3, [pc, #84]	; (82088 <UOTGHS_Handler+0x5d0>)
		} else {
			udd_detach();
   82032:	4b16      	ldreq	r3, [pc, #88]	; (8208c <UOTGHS_Handler+0x5d4>)
   82034:	4798      	blx	r3
		}
#endif
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
   82036:	4b0a      	ldr	r3, [pc, #40]	; (82060 <UOTGHS_Handler+0x5a8>)
   82038:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   8203c:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   82040:	4b13      	ldr	r3, [pc, #76]	; (82090 <UOTGHS_Handler+0x5d8>)
   82042:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
   82044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82048:	400ac130 	.word	0x400ac130
   8204c:	400ac160 	.word	0x400ac160
   82050:	20070c4d 	.word	0x20070c4d
   82054:	400ac1f0 	.word	0x400ac1f0
   82058:	00081475 	.word	0x00081475
   8205c:	400ac300 	.word	0x400ac300
   82060:	400ac000 	.word	0x400ac000
   82064:	20070c00 	.word	0x20070c00
   82068:	00081661 	.word	0x00081661
   8206c:	400ac220 	.word	0x400ac220
   82070:	0008162d 	.word	0x0008162d
   82074:	400ac100 	.word	0x400ac100
   82078:	000808bd 	.word	0x000808bd
   8207c:	200701d8 	.word	0x200701d8
   82080:	00081411 	.word	0x00081411
   82084:	000817f9 	.word	0x000817f9
   82088:	00081a09 	.word	0x00081a09
   8208c:	00081a85 	.word	0x00081a85
   82090:	00082af5 	.word	0x00082af5

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   82094:	4b0d      	ldr	r3, [pc, #52]	; (820cc <UOTGHS_Handler+0x614>)
   82096:	681b      	ldr	r3, [r3, #0]
   82098:	f3c3 530a 	ubfx	r3, r3, #20, #11
   8209c:	2b08      	cmp	r3, #8
   8209e:	f47f ad55 	bne.w	81b4c <UOTGHS_Handler+0x94>
   820a2:	4a0b      	ldr	r2, [pc, #44]	; (820d0 <UOTGHS_Handler+0x618>)
   820a4:	4b0b      	ldr	r3, [pc, #44]	; (820d4 <UOTGHS_Handler+0x61c>)
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   820a6:	480c      	ldr	r0, [pc, #48]	; (820d8 <UOTGHS_Handler+0x620>)
   820a8:	e557      	b.n	81b5a <UOTGHS_Handler+0xa2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   820aa:	490c      	ldr	r1, [pc, #48]	; (820dc <UOTGHS_Handler+0x624>)
   820ac:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   820ae:	4c0c      	ldr	r4, [pc, #48]	; (820e0 <UOTGHS_Handler+0x628>)
   820b0:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   820b4:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   820b8:	e693      	b.n	81de2 <UOTGHS_Handler+0x32a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   820ba:	4b09      	ldr	r3, [pc, #36]	; (820e0 <UOTGHS_Handler+0x628>)
   820bc:	685b      	ldr	r3, [r3, #4]
   820be:	f013 0f08 	tst.w	r3, #8
   820c2:	f43f af55 	beq.w	81f70 <UOTGHS_Handler+0x4b8>
   820c6:	e70c      	b.n	81ee2 <UOTGHS_Handler+0x42a>
   820c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820cc:	400ac130 	.word	0x400ac130
   820d0:	20070c9b 	.word	0x20070c9b
   820d4:	20180000 	.word	0x20180000
   820d8:	20180008 	.word	0x20180008
   820dc:	400ac134 	.word	0x400ac134
   820e0:	400ac000 	.word	0x400ac000

000820e4 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
   820e4:	2000      	movs	r0, #0
   820e6:	4770      	bx	lr

000820e8 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   820e8:	4b08      	ldr	r3, [pc, #32]	; (8210c <udd_set_address+0x24>)
   820ea:	681a      	ldr	r2, [r3, #0]
   820ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   820f0:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   820f2:	681a      	ldr	r2, [r3, #0]
   820f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   820f8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   820fc:	4302      	orrs	r2, r0
   820fe:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   82100:	681a      	ldr	r2, [r3, #0]
   82102:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82106:	601a      	str	r2, [r3, #0]
   82108:	4770      	bx	lr
   8210a:	bf00      	nop
   8210c:	400ac000 	.word	0x400ac000

00082110 <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   82110:	4b02      	ldr	r3, [pc, #8]	; (8211c <udd_getaddress+0xc>)
   82112:	6818      	ldr	r0, [r3, #0]
}
   82114:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82118:	4770      	bx	lr
   8211a:	bf00      	nop
   8211c:	400ac000 	.word	0x400ac000

00082120 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   82120:	4b02      	ldr	r3, [pc, #8]	; (8212c <udd_get_frame_number+0xc>)
   82122:	6a18      	ldr	r0, [r3, #32]
}
   82124:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   82128:	4770      	bx	lr
   8212a:	bf00      	nop
   8212c:	400ac000 	.word	0x400ac000

00082130 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   82130:	4b02      	ldr	r3, [pc, #8]	; (8213c <udd_get_micro_frame_number+0xc>)
   82132:	6a18      	ldr	r0, [r3, #32]
}
   82134:	f3c0 000d 	ubfx	r0, r0, #0, #14
   82138:	4770      	bx	lr
   8213a:	bf00      	nop
   8213c:	400ac000 	.word	0x400ac000

00082140 <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   82140:	4b01      	ldr	r3, [pc, #4]	; (82148 <udd_set_setup_payload+0x8>)
   82142:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82144:	8199      	strh	r1, [r3, #12]
   82146:	4770      	bx	lr
   82148:	20070c9c 	.word	0x20070c9c

0008214c <udd_ep_free>:
}


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8214c:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   82150:	2a03      	cmp	r2, #3
   82152:	d821      	bhi.n	82198 <udd_ep_free+0x4c>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   82154:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
   82156:	4811      	ldr	r0, [pc, #68]	; (8219c <udd_ep_free+0x50>)
   82158:	69c3      	ldr	r3, [r0, #28]
   8215a:	2101      	movs	r1, #1
   8215c:	fa01 f402 	lsl.w	r4, r1, r2
   82160:	ea23 0304 	bic.w	r3, r3, r4
   82164:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   82166:	f500 7080 	add.w	r0, r0, #256	; 0x100
   8216a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   8216e:	f023 0302 	bic.w	r3, r3, #2
   82172:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82176:	1e55      	subs	r5, r2, #1
   82178:	4c09      	ldr	r4, [pc, #36]	; (821a0 <udd_ep_free+0x54>)
   8217a:	fa05 f601 	lsl.w	r6, r5, r1
   8217e:	1970      	adds	r0, r6, r5
   82180:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   82184:	4b07      	ldr	r3, [pc, #28]	; (821a4 <udd_ep_free+0x58>)
   82186:	4798      	blx	r3
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_unallocate_memory(ep_index);
	udd_ep_abort_job(ep);
	udd_ep_job[ep_index - 1].stall_requested = false;
   82188:	4435      	add	r5, r6
   8218a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   8218e:	7d23      	ldrb	r3, [r4, #20]
   82190:	f36f 0382 	bfc	r3, #2, #1
   82194:	7523      	strb	r3, [r4, #20]
   82196:	bd70      	pop	{r4, r5, r6, pc}
   82198:	4770      	bx	lr
   8219a:	bf00      	nop
   8219c:	400ac000 	.word	0x400ac000
   821a0:	20070c00 	.word	0x20070c00
   821a4:	0008162d 	.word	0x0008162d

000821a8 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   821a8:	f000 000f 	and.w	r0, r0, #15
   821ac:	4b02      	ldr	r3, [pc, #8]	; (821b8 <udd_ep_is_halted+0x10>)
   821ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   821b2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   821b6:	4770      	bx	lr
   821b8:	400ac1c0 	.word	0x400ac1c0

000821bc <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   821bc:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   821c0:	2b03      	cmp	r3, #3
   821c2:	d857      	bhi.n	82274 <udd_ep_set_halt+0xb8>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   821c4:	4a32      	ldr	r2, [pc, #200]	; (82290 <udd_ep_set_halt+0xd4>)
   821c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   821ca:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   821ce:	d153      	bne.n	82278 <udd_ep_set_halt+0xbc>
	return Is_udd_endpoint_stall_requested(ep_index);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   821d0:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   821d2:	1e59      	subs	r1, r3, #1
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   821d4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   821d8:	4a2e      	ldr	r2, [pc, #184]	; (82294 <udd_ep_set_halt+0xd8>)
   821da:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   821de:	7d12      	ldrb	r2, [r2, #20]
   821e0:	f012 0f04 	tst.w	r2, #4
   821e4:	d14a      	bne.n	8227c <udd_ep_set_halt+0xc0>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   821e6:	f012 0f01 	tst.w	r2, #1
   821ea:	d149      	bne.n	82280 <udd_ep_set_halt+0xc4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   821ec:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   821f0:	fab2 f282 	clz	r2, r2
   821f4:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   821f6:	b672      	cpsid	i
   821f8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   821fc:	2500      	movs	r5, #0
   821fe:	4c26      	ldr	r4, [pc, #152]	; (82298 <udd_ep_set_halt+0xdc>)
   82200:	7025      	strb	r5, [r4, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   82202:	f010 0f80 	tst.w	r0, #128	; 0x80
   82206:	d01d      	beq.n	82244 <udd_ep_set_halt+0x88>
   82208:	4824      	ldr	r0, [pc, #144]	; (8229c <udd_ep_set_halt+0xe0>)
   8220a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   8220e:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   82212:	d017      	beq.n	82244 <udd_ep_set_halt+0x88>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   82214:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82218:	481e      	ldr	r0, [pc, #120]	; (82294 <udd_ep_set_halt+0xd8>)
   8221a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   8221e:	7d08      	ldrb	r0, [r1, #20]
   82220:	f040 0004 	orr.w	r0, r0, #4
   82224:	7508      	strb	r0, [r1, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   82226:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8222a:	481d      	ldr	r0, [pc, #116]	; (822a0 <udd_ep_set_halt+0xe4>)
   8222c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   82230:	4099      	lsls	r1, r3
   82232:	4b1c      	ldr	r3, [pc, #112]	; (822a4 <udd_ep_set_halt+0xe8>)
   82234:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82236:	b32a      	cbz	r2, 82284 <udd_ep_set_halt+0xc8>
		cpu_irq_enable();
   82238:	2001      	movs	r0, #1
   8223a:	7020      	strb	r0, [r4, #0]
   8223c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82240:	b662      	cpsie	i
   82242:	e022      	b.n	8228a <udd_ep_set_halt+0xce>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82244:	4818      	ldr	r0, [pc, #96]	; (822a8 <udd_ep_set_halt+0xec>)
   82246:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   8224a:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   8224e:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	udd_ack_stall(ep_index);
   82252:	2040      	movs	r0, #64	; 0x40
   82254:	4915      	ldr	r1, [pc, #84]	; (822ac <udd_ep_set_halt+0xf0>)
   82256:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8225a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8225e:	3190      	adds	r1, #144	; 0x90
   82260:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82264:	b182      	cbz	r2, 82288 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
   82266:	2001      	movs	r0, #1
   82268:	4b0b      	ldr	r3, [pc, #44]	; (82298 <udd_ep_set_halt+0xdc>)
   8226a:	7018      	strb	r0, [r3, #0]
   8226c:	f3bf 8f5f 	dmb	sy
   82270:	b662      	cpsie	i
   82272:	e00a      	b.n	8228a <udd_ep_set_halt+0xce>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   82274:	2000      	movs	r0, #0
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
}
   82276:	4770      	bx	lr
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   82278:	2001      	movs	r0, #1
   8227a:	4770      	bx	lr
   8227c:	2001      	movs	r0, #1
   8227e:	e004      	b.n	8228a <udd_ep_set_halt+0xce>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   82280:	2000      	movs	r0, #0
   82282:	e002      	b.n	8228a <udd_ep_set_halt+0xce>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   82284:	2001      	movs	r0, #1
   82286:	e000      	b.n	8228a <udd_ep_set_halt+0xce>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   82288:	2001      	movs	r0, #1
}
   8228a:	bc30      	pop	{r4, r5}
   8228c:	4770      	bx	lr
   8228e:	bf00      	nop
   82290:	400ac1c0 	.word	0x400ac1c0
   82294:	20070c00 	.word	0x20070c00
   82298:	200701d8 	.word	0x200701d8
   8229c:	400ac130 	.word	0x400ac130
   822a0:	400ac1f0 	.word	0x400ac1f0
   822a4:	400ac000 	.word	0x400ac000
   822a8:	400ac100 	.word	0x400ac100
   822ac:	400ac160 	.word	0x400ac160

000822b0 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   822b0:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   822b2:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   822b6:	2803      	cmp	r0, #3
   822b8:	d84e      	bhi.n	82358 <udd_ep_clear_halt+0xa8>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   822ba:	1e43      	subs	r3, r0, #1
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   822bc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   822c0:	4a2c      	ldr	r2, [pc, #176]	; (82374 <udd_ep_clear_halt+0xc4>)
   822c2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   822c6:	7d12      	ldrb	r2, [r2, #20]
   822c8:	f012 0f04 	tst.w	r2, #4
   822cc:	d048      	beq.n	82360 <udd_ep_clear_halt+0xb0>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   822ce:	460a      	mov	r2, r1
   822d0:	4928      	ldr	r1, [pc, #160]	; (82374 <udd_ep_clear_halt+0xc4>)
   822d2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   822d6:	7d11      	ldrb	r1, [r2, #20]
   822d8:	f36f 0182 	bfc	r1, #2, #1
   822dc:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   822de:	0082      	lsls	r2, r0, #2
   822e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   822e4:	4c24      	ldr	r4, [pc, #144]	; (82378 <udd_ep_clear_halt+0xc8>)
   822e6:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   822ea:	4081      	lsls	r1, r0
   822ec:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   822f0:	6161      	str	r1, [r4, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   822f2:	4922      	ldr	r1, [pc, #136]	; (8237c <udd_ep_clear_halt+0xcc>)
   822f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   822f8:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   822fc:	d014      	beq.n	82328 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   822fe:	4920      	ldr	r1, [pc, #128]	; (82380 <udd_ep_clear_halt+0xd0>)
   82300:	5851      	ldr	r1, [r2, r1]
   82302:	f011 0f40 	tst.w	r1, #64	; 0x40
   82306:	d006      	beq.n	82316 <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   82308:	2040      	movs	r0, #64	; 0x40
   8230a:	491e      	ldr	r1, [pc, #120]	; (82384 <udd_ep_clear_halt+0xd4>)
   8230c:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   8230e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   82312:	3190      	adds	r1, #144	; 0x90
   82314:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   82316:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8231a:	4917      	ldr	r1, [pc, #92]	; (82378 <udd_ep_clear_halt+0xc8>)
   8231c:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8231e:	481a      	ldr	r0, [pc, #104]	; (82388 <udd_ep_clear_halt+0xd8>)
   82320:	5811      	ldr	r1, [r2, r0]
   82322:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   82326:	5011      	str	r1, [r2, r0]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   82328:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   8232c:	4911      	ldr	r1, [pc, #68]	; (82374 <udd_ep_clear_halt+0xc4>)
   8232e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82332:	7d12      	ldrb	r2, [r2, #20]
   82334:	f012 0f01 	tst.w	r2, #1
   82338:	d010      	beq.n	8235c <udd_ep_clear_halt+0xac>
			ptr_job->busy = false;
   8233a:	4608      	mov	r0, r1
   8233c:	0059      	lsls	r1, r3, #1
   8233e:	18ca      	adds	r2, r1, r3
   82340:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   82344:	7d14      	ldrb	r4, [r2, #20]
   82346:	f36f 0400 	bfc	r4, #0, #1
   8234a:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   8234c:	440b      	add	r3, r1
   8234e:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   82352:	4798      	blx	r3
		}
	}
	return true;
   82354:	2001      	movs	r0, #1
   82356:	bd10      	pop	{r4, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   82358:	2000      	movs	r0, #0
   8235a:	bd10      	pop	{r4, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8235c:	2001      	movs	r0, #1
   8235e:	bd10      	pop	{r4, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   82360:	0082      	lsls	r2, r0, #2
   82362:	4906      	ldr	r1, [pc, #24]	; (8237c <udd_ep_clear_halt+0xcc>)
   82364:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82368:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   8236c:	d1c7      	bne.n	822fe <udd_ep_clear_halt+0x4e>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8236e:	2001      	movs	r0, #1
}
   82370:	bd10      	pop	{r4, pc}
   82372:	bf00      	nop
   82374:	20070c00 	.word	0x20070c00
   82378:	400ac220 	.word	0x400ac220
   8237c:	400ac1c0 	.word	0x400ac1c0
   82380:	400ac130 	.word	0x400ac130
   82384:	400ac160 	.word	0x400ac160
   82388:	400ac100 	.word	0x400ac100

0008238c <udd_ep_run>:
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   8238c:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   82390:	2803      	cmp	r0, #3
   82392:	d863      	bhi.n	8245c <udd_ep_run+0xd0>


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   82394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   82396:	4c36      	ldr	r4, [pc, #216]	; (82470 <udd_ep_run+0xe4>)
   82398:	69e5      	ldr	r5, [r4, #28]
   8239a:	2401      	movs	r4, #1
   8239c:	4084      	lsls	r4, r0
   8239e:	422c      	tst	r4, r5
   823a0:	d05e      	beq.n	82460 <udd_ep_run+0xd4>
			|| Is_udd_endpoint_stall_requested(ep)
   823a2:	4c34      	ldr	r4, [pc, #208]	; (82474 <udd_ep_run+0xe8>)
   823a4:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   823a8:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   823ac:	d15a      	bne.n	82464 <udd_ep_run+0xd8>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   823ae:	1e44      	subs	r4, r0, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   823b0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   823b4:	4d30      	ldr	r5, [pc, #192]	; (82478 <udd_ep_run+0xec>)
   823b6:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   823ba:	7d2d      	ldrb	r5, [r5, #20]
   823bc:	f015 0f04 	tst.w	r5, #4
   823c0:	d152      	bne.n	82468 <udd_ep_run+0xdc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   823c2:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   823c6:	fab5 f585 	clz	r5, r5
   823ca:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   823cc:	b672      	cpsid	i
   823ce:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   823d2:	2700      	movs	r7, #0
   823d4:	4e29      	ldr	r6, [pc, #164]	; (8247c <udd_ep_run+0xf0>)
   823d6:	7037      	strb	r7, [r6, #0]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   823d8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   823dc:	4f26      	ldr	r7, [pc, #152]	; (82478 <udd_ep_run+0xec>)
   823de:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   823e2:	7d36      	ldrb	r6, [r6, #20]
   823e4:	f016 0f01 	tst.w	r6, #1
   823e8:	d009      	beq.n	823fe <udd_ep_run+0x72>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   823ea:	2d00      	cmp	r5, #0
   823ec:	d03e      	beq.n	8246c <udd_ep_run+0xe0>
		cpu_irq_enable();
   823ee:	2201      	movs	r2, #1
   823f0:	4b22      	ldr	r3, [pc, #136]	; (8247c <udd_ep_run+0xf0>)
   823f2:	701a      	strb	r2, [r3, #0]
   823f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   823f8:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   823fa:	2000      	movs	r0, #0
   823fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   823fe:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   82402:	4f1d      	ldr	r7, [pc, #116]	; (82478 <udd_ep_run+0xec>)
   82404:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   82408:	7d37      	ldrb	r7, [r6, #20]
   8240a:	f047 0701 	orr.w	r7, r7, #1
   8240e:	7537      	strb	r7, [r6, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82410:	b12d      	cbz	r5, 8241e <udd_ep_run+0x92>
		cpu_irq_enable();
   82412:	2601      	movs	r6, #1
   82414:	4d19      	ldr	r5, [pc, #100]	; (8247c <udd_ep_run+0xf0>)
   82416:	702e      	strb	r6, [r5, #0]
   82418:	f3bf 8f5f 	dmb	sy
   8241c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8241e:	4f16      	ldr	r7, [pc, #88]	; (82478 <udd_ep_run+0xec>)
   82420:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82424:	00ed      	lsls	r5, r5, #3
   82426:	197e      	adds	r6, r7, r5
   82428:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   8242a:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   8242c:	2200      	movs	r2, #0
   8242e:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   82430:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   82432:	9a06      	ldr	r2, [sp, #24]
   82434:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82436:	b919      	cbnz	r1, 82440 <udd_ep_run+0xb4>
   82438:	fab3 f383 	clz	r3, r3
   8243c:	095b      	lsrs	r3, r3, #5
   8243e:	e000      	b.n	82442 <udd_ep_run+0xb6>
   82440:	2301      	movs	r3, #1
   82442:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82446:	4a0c      	ldr	r2, [pc, #48]	; (82478 <udd_ep_run+0xec>)
   82448:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   8244c:	7d22      	ldrb	r2, [r4, #20]
   8244e:	f363 0241 	bfi	r2, r3, #1, #1
   82452:	7522      	strb	r2, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   82454:	4b0a      	ldr	r3, [pc, #40]	; (82480 <udd_ep_run+0xf4>)
   82456:	4798      	blx	r3
	return true;
   82458:	2001      	movs	r0, #1
   8245a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   8245c:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   8245e:	4770      	bx	lr
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   82460:	2000      	movs	r0, #0
   82462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82464:	2000      	movs	r0, #0
   82466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82468:	2000      	movs	r0, #0
   8246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   8246c:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   8246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82470:	400ac000 	.word	0x400ac000
   82474:	400ac1c0 	.word	0x400ac1c0
   82478:	20070c00 	.word	0x20070c00
   8247c:	200701d8 	.word	0x200701d8
   82480:	00081661 	.word	0x00081661

00082484 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   82484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82488:	b082      	sub	sp, #8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   8248a:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   8248e:	2c03      	cmp	r4, #3
   82490:	f200 80e3 	bhi.w	8265a <udd_ep_alloc+0x1d6>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   82494:	4b7a      	ldr	r3, [pc, #488]	; (82680 <udd_ep_alloc+0x1fc>)
   82496:	69dd      	ldr	r5, [r3, #28]
   82498:	4627      	mov	r7, r4
   8249a:	2301      	movs	r3, #1
   8249c:	40a3      	lsls	r3, r4
   8249e:	402b      	ands	r3, r5
   824a0:	f040 80dd 	bne.w	8265e <udd_ep_alloc+0x1da>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   824a4:	f011 0503 	ands.w	r5, r1, #3
   824a8:	f000 80db 	beq.w	82662 <udd_ep_alloc+0x1de>
   824ac:	2d02      	cmp	r5, #2
   824ae:	d905      	bls.n	824bc <udd_ep_alloc+0x38>
   824b0:	2d03      	cmp	r5, #3
   824b2:	f040 80d6 	bne.w	82662 <udd_ep_alloc+0x1de>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   824b6:	f04f 0c00 	mov.w	ip, #0
   824ba:	e001      	b.n	824c0 <udd_ep_alloc+0x3c>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   824bc:	f04f 0c01 	mov.w	ip, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   824c0:	ea4f 0e84 	mov.w	lr, r4, lsl #2
   824c4:	4e6f      	ldr	r6, [pc, #444]	; (82684 <udd_ep_alloc+0x200>)
   824c6:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   824ca:	f425 55cb 	bic.w	r5, r5, #6496	; 0x1960
   824ce:	f025 051c 	bic.w	r5, r5, #28
   824d2:	02c9      	lsls	r1, r1, #11
   824d4:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   824d8:	f000 0080 	and.w	r0, r0, #128	; 0x80
   824dc:	2800      	cmp	r0, #0
   824de:	bf18      	it	ne
   824e0:	f44f 7380 	movne.w	r3, #256	; 0x100
   824e4:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   824e8:	b280      	uxth	r0, r0
   824ea:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   824ee:	d304      	bcc.n	824fa <udd_ep_alloc+0x76>
   824f0:	2a08      	cmp	r2, #8
   824f2:	d905      	bls.n	82500 <udd_ep_alloc+0x7c>
   824f4:	0052      	lsls	r2, r2, #1
   824f6:	3a01      	subs	r2, #1
   824f8:	e003      	b.n	82502 <udd_ep_alloc+0x7e>
   824fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
   824fe:	e000      	b.n	82502 <udd_ep_alloc+0x7e>
   82500:	220f      	movs	r2, #15
   82502:	fab2 f282 	clz	r2, r2
   82506:	ea41 0c8c 	orr.w	ip, r1, ip, lsl #2
   8250a:	ea4c 0303 	orr.w	r3, ip, r3
   8250e:	f1c2 021c 	rsb	r2, r2, #28
   82512:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
   82516:	f422 62d0 	bic.w	r2, r2, #1664	; 0x680
   8251a:	f022 0203 	bic.w	r2, r2, #3
   8251e:	04d2      	lsls	r2, r2, #19
   82520:	0cd2      	lsrs	r2, r2, #19
   82522:	432a      	orrs	r2, r5
   82524:	f84e 2006 	str.w	r2, [lr, r6]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   82528:	2601      	movs	r6, #1
   8252a:	40be      	lsls	r6, r7
   8252c:	b2b6      	uxth	r6, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8252e:	2c02      	cmp	r4, #2
   82530:	f200 809d 	bhi.w	8266e <udd_ep_alloc+0x1ea>
   82534:	4a54      	ldr	r2, [pc, #336]	; (82688 <udd_ep_alloc+0x204>)
   82536:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   82538:	4851      	ldr	r0, [pc, #324]	; (82680 <udd_ep_alloc+0x1fc>)
   8253a:	2701      	movs	r7, #1
   8253c:	69c5      	ldr	r5, [r0, #28]
   8253e:	fa07 f103 	lsl.w	r1, r7, r3
   82542:	4229      	tst	r1, r5
   82544:	d009      	beq.n	8255a <udd_ep_alloc+0xd6>
			ep_allocated |= 1 << i;
   82546:	430e      	orrs	r6, r1
   82548:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   8254a:	69c5      	ldr	r5, [r0, #28]
   8254c:	ea25 0101 	bic.w	r1, r5, r1
   82550:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   82552:	6811      	ldr	r1, [r2, #0]
   82554:	f021 0102 	bic.w	r1, r1, #2
   82558:	6011      	str	r1, [r2, #0]
   8255a:	3b01      	subs	r3, #1
   8255c:	3a04      	subs	r2, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8255e:	b2d9      	uxtb	r1, r3
   82560:	428c      	cmp	r4, r1
   82562:	d3eb      	bcc.n	8253c <udd_ep_alloc+0xb8>
   82564:	e083      	b.n	8266e <udd_ep_alloc+0x1ea>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   82566:	fa46 f304 	asr.w	r3, r6, r4
   8256a:	f013 0f01 	tst.w	r3, #1
   8256e:	d06e      	beq.n	8264e <udd_ep_alloc+0x1ca>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   82570:	f104 3eff 	add.w	lr, r4, #4294967295
			bool b_restart = ptr_job->busy;
   82574:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   82578:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   8257c:	7d1a      	ldrb	r2, [r3, #20]
   8257e:	f002 0101 	and.w	r1, r2, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   82582:	f36f 0200 	bfc	r2, #0, #1
   82586:	751a      	strb	r2, [r3, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   82588:	00a0      	lsls	r0, r4, #2
   8258a:	eb00 0c05 	add.w	ip, r0, r5
   8258e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   82592:	f043 0302 	orr.w	r3, r3, #2
   82596:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			udd_enable_endpoint(i);
   8259a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 82680 <udd_ep_alloc+0x1fc>
   8259e:	f8d9 201c 	ldr.w	r2, [r9, #28]
   825a2:	2301      	movs	r3, #1
   825a4:	40a3      	lsls	r3, r4
   825a6:	4313      	orrs	r3, r2
   825a8:	f8c9 301c 	str.w	r3, [r9, #28]
			if (!Is_udd_endpoint_configured(i)) {
   825ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   825b0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   825b4:	d119      	bne.n	825ea <udd_ep_alloc+0x166>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   825b6:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   825ba:	4a34      	ldr	r2, [pc, #208]	; (8268c <udd_ep_alloc+0x208>)
   825bc:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
   825c0:	2d00      	cmp	r5, #0
   825c2:	d050      	beq.n	82666 <udd_ep_alloc+0x1e2>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   825c4:	f8dc 3000 	ldr.w	r3, [ip]
   825c8:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   825cc:	bf18      	it	ne
   825ce:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   825d2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   825d6:	4b2d      	ldr	r3, [pc, #180]	; (8268c <udd_ep_alloc+0x208>)
   825d8:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   825dc:	2001      	movs	r0, #1
   825de:	f8de 100c 	ldr.w	r1, [lr, #12]
   825e2:	4622      	mov	r2, r4
   825e4:	47a8      	blx	r5
						ptr_job->buf_cnt, i);
				return false;
   825e6:	2000      	movs	r0, #0
   825e8:	e046      	b.n	82678 <udd_ep_alloc+0x1f4>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   825ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   825ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   825f2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			if (b_restart) {
   825f6:	b351      	cbz	r1, 8264e <udd_ep_alloc+0x1ca>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   825f8:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   825fc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   82600:	f102 0108 	add.w	r1, r2, #8
   82604:	68d3      	ldr	r3, [r2, #12]
   82606:	6912      	ldr	r2, [r2, #16]
   82608:	1a9b      	subs	r3, r3, r2
   8260a:	604b      	str	r3, [r1, #4]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8260c:	5942      	ldr	r2, [r0, r5]
   8260e:	f412 7f80 	tst.w	r2, #256	; 0x100
   82612:	bf14      	ite	ne
   82614:	f044 0a80 	orrne.w	sl, r4, #128	; 0x80
   82618:	46a2      	moveq	sl, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   8261a:	ea4f 094e 	mov.w	r9, lr, lsl #1
   8261e:	eb09 0c0e 	add.w	ip, r9, lr
   82622:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   82626:	f89c 1014 	ldrb.w	r1, [ip, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8262a:	f8dc 2004 	ldr.w	r2, [ip, #4]
   8262e:	f8dc c008 	ldr.w	ip, [ip, #8]
   82632:	44ce      	add	lr, r9
   82634:	f857 003e 	ldr.w	r0, [r7, lr, lsl #3]
   82638:	9000      	str	r0, [sp, #0]
   8263a:	4650      	mov	r0, sl
   8263c:	f3c1 0140 	ubfx	r1, r1, #1, #1
   82640:	441a      	add	r2, r3
   82642:	ebc3 030c 	rsb	r3, r3, ip
   82646:	f8df c048 	ldr.w	ip, [pc, #72]	; 82690 <udd_ep_alloc+0x20c>
   8264a:	47e0      	blx	ip
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   8264c:	b168      	cbz	r0, 8266a <udd_ep_alloc+0x1e6>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8264e:	3401      	adds	r4, #1
   82650:	b2e4      	uxtb	r4, r4
   82652:	2c04      	cmp	r4, #4
   82654:	d187      	bne.n	82566 <udd_ep_alloc+0xe2>
					return false;
				}
			}
		}
	}
	return true;
   82656:	2001      	movs	r0, #1
   82658:	e00e      	b.n	82678 <udd_ep_alloc+0x1f4>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   8265a:	2000      	movs	r0, #0
   8265c:	e00c      	b.n	82678 <udd_ep_alloc+0x1f4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   8265e:	2000      	movs	r0, #0
   82660:	e00a      	b.n	82678 <udd_ep_alloc+0x1f4>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   82662:	2000      	movs	r0, #0
   82664:	e008      	b.n	82678 <udd_ep_alloc+0x1f4>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   82666:	2000      	movs	r0, #0
   82668:	e006      	b.n	82678 <udd_ep_alloc+0x1f4>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   8266a:	2000      	movs	r0, #0
   8266c:	e004      	b.n	82678 <udd_ep_alloc+0x1f4>

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
			bool b_restart = ptr_job->busy;
   8266e:	4f07      	ldr	r7, [pc, #28]	; (8268c <udd_ep_alloc+0x208>)
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   82670:	4d04      	ldr	r5, [pc, #16]	; (82684 <udd_ep_alloc+0x200>)
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
   82672:	f8df 8020 	ldr.w	r8, [pc, #32]	; 82694 <udd_ep_alloc+0x210>
   82676:	e776      	b.n	82566 <udd_ep_alloc+0xe2>
				}
			}
		}
	}
	return true;
}
   82678:	b002      	add	sp, #8
   8267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8267e:	bf00      	nop
   82680:	400ac000 	.word	0x400ac000
   82684:	400ac100 	.word	0x400ac100
   82688:	400ac10c 	.word	0x400ac10c
   8268c:	20070c00 	.word	0x20070c00
   82690:	0008238d 	.word	0x0008238d
   82694:	400ac130 	.word	0x400ac130

00082698 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   82698:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   8269a:	f000 020f 	and.w	r2, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   8269e:	1e54      	subs	r4, r2, #1
   826a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   826a4:	40a3      	lsls	r3, r4
   826a6:	4915      	ldr	r1, [pc, #84]	; (826fc <udd_ep_abort+0x64>)
   826a8:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   826aa:	4b15      	ldr	r3, [pc, #84]	; (82700 <udd_ep_abort+0x68>)
   826ac:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   826b0:	2500      	movs	r5, #0
   826b2:	609d      	str	r5, [r3, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   826b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   826b8:	4093      	lsls	r3, r2
   826ba:	614b      	str	r3, [r1, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   826bc:	f010 0f80 	tst.w	r0, #128	; 0x80
   826c0:	d013      	beq.n	826ea <udd_ep_abort+0x52>
		while(udd_nb_busy_bank(ep_index)) {
   826c2:	0093      	lsls	r3, r2, #2
   826c4:	480f      	ldr	r0, [pc, #60]	; (82704 <udd_ep_abort+0x6c>)
   826c6:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   826c8:	4d0f      	ldr	r5, [pc, #60]	; (82708 <udd_ep_abort+0x70>)
   826ca:	441d      	add	r5, r3
   826cc:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   826d0:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   826d4:	4419      	add	r1, r3
   826d6:	e004      	b.n	826e2 <udd_ep_abort+0x4a>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   826d8:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   826da:	680b      	ldr	r3, [r1, #0]
   826dc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   826e0:	d1fb      	bne.n	826da <udd_ep_abort+0x42>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   826e2:	6803      	ldr	r3, [r0, #0]
   826e4:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   826e8:	d1f6      	bne.n	826d8 <udd_ep_abort+0x40>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   826ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   826ee:	4807      	ldr	r0, [pc, #28]	; (8270c <udd_ep_abort+0x74>)
   826f0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   826f4:	2101      	movs	r1, #1
   826f6:	4b06      	ldr	r3, [pc, #24]	; (82710 <udd_ep_abort+0x78>)
   826f8:	4798      	blx	r3
   826fa:	bd70      	pop	{r4, r5, r6, pc}
   826fc:	400ac000 	.word	0x400ac000
   82700:	400ac300 	.word	0x400ac300
   82704:	400ac130 	.word	0x400ac130
   82708:	400ac1f0 	.word	0x400ac1f0
   8270c:	20070c00 	.word	0x20070c00
   82710:	0008162d 	.word	0x0008162d

00082714 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82714:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82716:	010b      	lsls	r3, r1, #4
   82718:	4293      	cmp	r3, r2
   8271a:	d90f      	bls.n	8273c <usart_set_async_baudrate+0x28>
   8271c:	e01c      	b.n	82758 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   8271e:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   82722:	6841      	ldr	r1, [r0, #4]
   82724:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   82728:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8272a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8272e:	6202      	str	r2, [r0, #32]

	return 0;
   82730:	2000      	movs	r0, #0
   82732:	e01e      	b.n	82772 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   82734:	2001      	movs	r0, #1
   82736:	e01c      	b.n	82772 <usart_set_async_baudrate+0x5e>
   82738:	2001      	movs	r0, #1
   8273a:	e01a      	b.n	82772 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8273c:	00d2      	lsls	r2, r2, #3
   8273e:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   82742:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   82746:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82748:	1e5c      	subs	r4, r3, #1
   8274a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8274e:	428c      	cmp	r4, r1
   82750:	d8f0      	bhi.n	82734 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   82752:	f002 0207 	and.w	r2, r2, #7
   82756:	e7e8      	b.n	8272a <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82758:	00c9      	lsls	r1, r1, #3
   8275a:	00d2      	lsls	r2, r2, #3
   8275c:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   82760:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   82764:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82766:	1e5c      	subs	r4, r3, #1
   82768:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8276c:	428c      	cmp	r4, r1
   8276e:	d9d6      	bls.n	8271e <usart_set_async_baudrate+0xa>
   82770:	e7e2      	b.n	82738 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   82772:	f85d 4b04 	ldr.w	r4, [sp], #4
   82776:	4770      	bx	lr

00082778 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82778:	4b08      	ldr	r3, [pc, #32]	; (8279c <usart_reset+0x24>)
   8277a:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   8277e:	2300      	movs	r3, #0
   82780:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   82782:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82784:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82786:	2388      	movs	r3, #136	; 0x88
   82788:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8278a:	2324      	movs	r3, #36	; 0x24
   8278c:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   8278e:	f44f 7380 	mov.w	r3, #256	; 0x100
   82792:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82794:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   82798:	6003      	str	r3, [r0, #0]
   8279a:	4770      	bx	lr
   8279c:	55534100 	.word	0x55534100

000827a0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   827a0:	b570      	push	{r4, r5, r6, lr}
   827a2:	4605      	mov	r5, r0
   827a4:	460c      	mov	r4, r1
   827a6:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   827a8:	4b0f      	ldr	r3, [pc, #60]	; (827e8 <usart_init_rs232+0x48>)
   827aa:	4798      	blx	r3

	ul_reg_val = 0;
   827ac:	2200      	movs	r2, #0
   827ae:	4b0f      	ldr	r3, [pc, #60]	; (827ec <usart_init_rs232+0x4c>)
   827b0:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   827b2:	b19c      	cbz	r4, 827dc <usart_init_rs232+0x3c>
   827b4:	4628      	mov	r0, r5
   827b6:	6821      	ldr	r1, [r4, #0]
   827b8:	4632      	mov	r2, r6
   827ba:	4b0d      	ldr	r3, [pc, #52]	; (827f0 <usart_init_rs232+0x50>)
   827bc:	4798      	blx	r3
   827be:	4602      	mov	r2, r0
   827c0:	b970      	cbnz	r0, 827e0 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   827c2:	68a1      	ldr	r1, [r4, #8]
   827c4:	6863      	ldr	r3, [r4, #4]
   827c6:	4319      	orrs	r1, r3
   827c8:	6923      	ldr	r3, [r4, #16]
   827ca:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   827cc:	68e3      	ldr	r3, [r4, #12]
   827ce:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   827d0:	4906      	ldr	r1, [pc, #24]	; (827ec <usart_init_rs232+0x4c>)
   827d2:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   827d4:	6869      	ldr	r1, [r5, #4]
   827d6:	430b      	orrs	r3, r1
   827d8:	606b      	str	r3, [r5, #4]

	return 0;
   827da:	e002      	b.n	827e2 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   827dc:	2201      	movs	r2, #1
   827de:	e000      	b.n	827e2 <usart_init_rs232+0x42>
   827e0:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   827e2:	4610      	mov	r0, r2
   827e4:	bd70      	pop	{r4, r5, r6, pc}
   827e6:	bf00      	nop
   827e8:	00082779 	.word	0x00082779
   827ec:	20070c54 	.word	0x20070c54
   827f0:	00082715 	.word	0x00082715

000827f4 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   827f4:	2340      	movs	r3, #64	; 0x40
   827f6:	6003      	str	r3, [r0, #0]
   827f8:	4770      	bx	lr
   827fa:	bf00      	nop

000827fc <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   827fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82800:	6043      	str	r3, [r0, #4]
   82802:	4770      	bx	lr

00082804 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82804:	e7fe      	b.n	82804 <Dummy_Handler>
   82806:	bf00      	nop

00082808 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82808:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8280a:	4b1f      	ldr	r3, [pc, #124]	; (82888 <Reset_Handler+0x80>)
   8280c:	4a1f      	ldr	r2, [pc, #124]	; (8288c <Reset_Handler+0x84>)
   8280e:	429a      	cmp	r2, r3
   82810:	d003      	beq.n	8281a <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   82812:	4b1f      	ldr	r3, [pc, #124]	; (82890 <Reset_Handler+0x88>)
   82814:	4a1c      	ldr	r2, [pc, #112]	; (82888 <Reset_Handler+0x80>)
   82816:	429a      	cmp	r2, r3
   82818:	d304      	bcc.n	82824 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8281a:	4b1e      	ldr	r3, [pc, #120]	; (82894 <Reset_Handler+0x8c>)
   8281c:	4a1e      	ldr	r2, [pc, #120]	; (82898 <Reset_Handler+0x90>)
   8281e:	429a      	cmp	r2, r3
   82820:	d310      	bcc.n	82844 <Reset_Handler+0x3c>
   82822:	e01b      	b.n	8285c <Reset_Handler+0x54>
   82824:	4918      	ldr	r1, [pc, #96]	; (82888 <Reset_Handler+0x80>)
   82826:	1d0a      	adds	r2, r1, #4
   82828:	4b1c      	ldr	r3, [pc, #112]	; (8289c <Reset_Handler+0x94>)
   8282a:	1a9b      	subs	r3, r3, r2
   8282c:	f023 0303 	bic.w	r3, r3, #3
   82830:	3304      	adds	r3, #4
   82832:	4a16      	ldr	r2, [pc, #88]	; (8288c <Reset_Handler+0x84>)
   82834:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82836:	f852 0b04 	ldr.w	r0, [r2], #4
   8283a:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8283e:	429a      	cmp	r2, r3
   82840:	d1f9      	bne.n	82836 <Reset_Handler+0x2e>
   82842:	e7ea      	b.n	8281a <Reset_Handler+0x12>
   82844:	4b16      	ldr	r3, [pc, #88]	; (828a0 <Reset_Handler+0x98>)
   82846:	4a17      	ldr	r2, [pc, #92]	; (828a4 <Reset_Handler+0x9c>)
   82848:	1ad2      	subs	r2, r2, r3
   8284a:	f022 0203 	bic.w	r2, r2, #3
   8284e:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82850:	3b04      	subs	r3, #4
		*pDest++ = 0;
   82852:	2100      	movs	r1, #0
   82854:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82858:	4293      	cmp	r3, r2
   8285a:	d1fb      	bne.n	82854 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8285c:	4b12      	ldr	r3, [pc, #72]	; (828a8 <Reset_Handler+0xa0>)
   8285e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82862:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82866:	4911      	ldr	r1, [pc, #68]	; (828ac <Reset_Handler+0xa4>)
   82868:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8286a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8286e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82872:	d203      	bcs.n	8287c <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82874:	688b      	ldr	r3, [r1, #8]
   82876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8287a:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8287c:	4b0c      	ldr	r3, [pc, #48]	; (828b0 <Reset_Handler+0xa8>)
   8287e:	4798      	blx	r3

	/* Branch to main function */
	main();
   82880:	4b0c      	ldr	r3, [pc, #48]	; (828b4 <Reset_Handler+0xac>)
   82882:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   82884:	e7fe      	b.n	82884 <Reset_Handler+0x7c>
   82886:	bf00      	nop
   82888:	20070000 	.word	0x20070000
   8288c:	0008348c 	.word	0x0008348c
   82890:	20070a1c 	.word	0x20070a1c
   82894:	20070cb8 	.word	0x20070cb8
   82898:	20070a1c 	.word	0x20070a1c
   8289c:	20070a1f 	.word	0x20070a1f
   828a0:	20070a20 	.word	0x20070a20
   828a4:	20070cbb 	.word	0x20070cbb
   828a8:	00080000 	.word	0x00080000
   828ac:	e000ed00 	.word	0xe000ed00
   828b0:	00082b21 	.word	0x00082b21
   828b4:	00082a09 	.word	0x00082a09

000828b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   828b8:	4b3e      	ldr	r3, [pc, #248]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   828ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   828bc:	f003 0303 	and.w	r3, r3, #3
   828c0:	2b03      	cmp	r3, #3
   828c2:	d85f      	bhi.n	82984 <SystemCoreClockUpdate+0xcc>
   828c4:	e8df f003 	tbb	[pc, r3]
   828c8:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   828cc:	4b3a      	ldr	r3, [pc, #232]	; (829b8 <SystemCoreClockUpdate+0x100>)
   828ce:	695b      	ldr	r3, [r3, #20]
   828d0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   828d4:	bf14      	ite	ne
   828d6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   828da:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   828de:	4b37      	ldr	r3, [pc, #220]	; (829bc <SystemCoreClockUpdate+0x104>)
   828e0:	601a      	str	r2, [r3, #0]
   828e2:	e04f      	b.n	82984 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   828e4:	4b33      	ldr	r3, [pc, #204]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   828e6:	6a1b      	ldr	r3, [r3, #32]
   828e8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   828ec:	d003      	beq.n	828f6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   828ee:	4a34      	ldr	r2, [pc, #208]	; (829c0 <SystemCoreClockUpdate+0x108>)
   828f0:	4b32      	ldr	r3, [pc, #200]	; (829bc <SystemCoreClockUpdate+0x104>)
   828f2:	601a      	str	r2, [r3, #0]
   828f4:	e046      	b.n	82984 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   828f6:	4a33      	ldr	r2, [pc, #204]	; (829c4 <SystemCoreClockUpdate+0x10c>)
   828f8:	4b30      	ldr	r3, [pc, #192]	; (829bc <SystemCoreClockUpdate+0x104>)
   828fa:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   828fc:	4b2d      	ldr	r3, [pc, #180]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   828fe:	6a1b      	ldr	r3, [r3, #32]
   82900:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82904:	2b10      	cmp	r3, #16
   82906:	d002      	beq.n	8290e <SystemCoreClockUpdate+0x56>
   82908:	2b20      	cmp	r3, #32
   8290a:	d004      	beq.n	82916 <SystemCoreClockUpdate+0x5e>
   8290c:	e03a      	b.n	82984 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8290e:	4a2e      	ldr	r2, [pc, #184]	; (829c8 <SystemCoreClockUpdate+0x110>)
   82910:	4b2a      	ldr	r3, [pc, #168]	; (829bc <SystemCoreClockUpdate+0x104>)
   82912:	601a      	str	r2, [r3, #0]
				break;
   82914:	e036      	b.n	82984 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82916:	4a2a      	ldr	r2, [pc, #168]	; (829c0 <SystemCoreClockUpdate+0x108>)
   82918:	4b28      	ldr	r3, [pc, #160]	; (829bc <SystemCoreClockUpdate+0x104>)
   8291a:	601a      	str	r2, [r3, #0]
				break;
   8291c:	e032      	b.n	82984 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8291e:	4b25      	ldr	r3, [pc, #148]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   82920:	6a1b      	ldr	r3, [r3, #32]
   82922:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82926:	d003      	beq.n	82930 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82928:	4a25      	ldr	r2, [pc, #148]	; (829c0 <SystemCoreClockUpdate+0x108>)
   8292a:	4b24      	ldr	r3, [pc, #144]	; (829bc <SystemCoreClockUpdate+0x104>)
   8292c:	601a      	str	r2, [r3, #0]
   8292e:	e012      	b.n	82956 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82930:	4a24      	ldr	r2, [pc, #144]	; (829c4 <SystemCoreClockUpdate+0x10c>)
   82932:	4b22      	ldr	r3, [pc, #136]	; (829bc <SystemCoreClockUpdate+0x104>)
   82934:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82936:	4b1f      	ldr	r3, [pc, #124]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   82938:	6a1b      	ldr	r3, [r3, #32]
   8293a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8293e:	2b10      	cmp	r3, #16
   82940:	d002      	beq.n	82948 <SystemCoreClockUpdate+0x90>
   82942:	2b20      	cmp	r3, #32
   82944:	d004      	beq.n	82950 <SystemCoreClockUpdate+0x98>
   82946:	e006      	b.n	82956 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82948:	4a1f      	ldr	r2, [pc, #124]	; (829c8 <SystemCoreClockUpdate+0x110>)
   8294a:	4b1c      	ldr	r3, [pc, #112]	; (829bc <SystemCoreClockUpdate+0x104>)
   8294c:	601a      	str	r2, [r3, #0]
				break;
   8294e:	e002      	b.n	82956 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82950:	4a1b      	ldr	r2, [pc, #108]	; (829c0 <SystemCoreClockUpdate+0x108>)
   82952:	4b1a      	ldr	r3, [pc, #104]	; (829bc <SystemCoreClockUpdate+0x104>)
   82954:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82956:	4b17      	ldr	r3, [pc, #92]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   82958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8295a:	f003 0303 	and.w	r3, r3, #3
   8295e:	2b02      	cmp	r3, #2
   82960:	d10d      	bne.n	8297e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82962:	4a14      	ldr	r2, [pc, #80]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   82964:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82966:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82968:	4814      	ldr	r0, [pc, #80]	; (829bc <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8296a:	f3c3 410a 	ubfx	r1, r3, #16, #11
   8296e:	6803      	ldr	r3, [r0, #0]
   82970:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82974:	b2d2      	uxtb	r2, r2
   82976:	fbb3 f3f2 	udiv	r3, r3, r2
   8297a:	6003      	str	r3, [r0, #0]
   8297c:	e002      	b.n	82984 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8297e:	4a13      	ldr	r2, [pc, #76]	; (829cc <SystemCoreClockUpdate+0x114>)
   82980:	4b0e      	ldr	r3, [pc, #56]	; (829bc <SystemCoreClockUpdate+0x104>)
   82982:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82984:	4b0b      	ldr	r3, [pc, #44]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   82986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82988:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8298c:	2b70      	cmp	r3, #112	; 0x70
   8298e:	d107      	bne.n	829a0 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82990:	4a0a      	ldr	r2, [pc, #40]	; (829bc <SystemCoreClockUpdate+0x104>)
   82992:	6813      	ldr	r3, [r2, #0]
   82994:	490e      	ldr	r1, [pc, #56]	; (829d0 <SystemCoreClockUpdate+0x118>)
   82996:	fba1 1303 	umull	r1, r3, r1, r3
   8299a:	085b      	lsrs	r3, r3, #1
   8299c:	6013      	str	r3, [r2, #0]
   8299e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   829a0:	4b04      	ldr	r3, [pc, #16]	; (829b4 <SystemCoreClockUpdate+0xfc>)
   829a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   829a4:	4905      	ldr	r1, [pc, #20]	; (829bc <SystemCoreClockUpdate+0x104>)
   829a6:	f3c2 1202 	ubfx	r2, r2, #4, #3
   829aa:	680b      	ldr	r3, [r1, #0]
   829ac:	40d3      	lsrs	r3, r2
   829ae:	600b      	str	r3, [r1, #0]
   829b0:	4770      	bx	lr
   829b2:	bf00      	nop
   829b4:	400e0600 	.word	0x400e0600
   829b8:	400e1a10 	.word	0x400e1a10
   829bc:	200701dc 	.word	0x200701dc
   829c0:	00b71b00 	.word	0x00b71b00
   829c4:	003d0900 	.word	0x003d0900
   829c8:	007a1200 	.word	0x007a1200
   829cc:	0e4e1c00 	.word	0x0e4e1c00
   829d0:	aaaaaaab 	.word	0xaaaaaaab

000829d4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   829d4:	4b09      	ldr	r3, [pc, #36]	; (829fc <_sbrk+0x28>)
   829d6:	681b      	ldr	r3, [r3, #0]
   829d8:	b913      	cbnz	r3, 829e0 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   829da:	4a09      	ldr	r2, [pc, #36]	; (82a00 <_sbrk+0x2c>)
   829dc:	4b07      	ldr	r3, [pc, #28]	; (829fc <_sbrk+0x28>)
   829de:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   829e0:	4b06      	ldr	r3, [pc, #24]	; (829fc <_sbrk+0x28>)
   829e2:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   829e4:	181a      	adds	r2, r3, r0
   829e6:	4907      	ldr	r1, [pc, #28]	; (82a04 <_sbrk+0x30>)
   829e8:	4291      	cmp	r1, r2
   829ea:	db04      	blt.n	829f6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   829ec:	4610      	mov	r0, r2
   829ee:	4a03      	ldr	r2, [pc, #12]	; (829fc <_sbrk+0x28>)
   829f0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   829f2:	4618      	mov	r0, r3
   829f4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   829f6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   829fa:	4770      	bx	lr
   829fc:	20070c58 	.word	0x20070c58
   82a00:	20072cb8 	.word	0x20072cb8
   82a04:	20087ffc 	.word	0x20087ffc

00082a08 <main>:
#include <asf.h> 

/* Global Variables */
static bool my_flag_autorize_cdc_transfert = false;

int main (void) {
   82a08:	b580      	push	{r7, lr}
 
	/* Initializations */
	sysclk_init();
   82a0a:	4b2b      	ldr	r3, [pc, #172]	; (82ab8 <main+0xb0>)
   82a0c:	4798      	blx	r3
	board_init();
   82a0e:	4b2b      	ldr	r3, [pc, #172]	; (82abc <main+0xb4>)
   82a10:	4798      	blx	r3
	
	pio_set_pin_high(BUZ_PIN);
   82a12:	2001      	movs	r0, #1
   82a14:	4f2a      	ldr	r7, [pc, #168]	; (82ac0 <main+0xb8>)
   82a16:	47b8      	blx	r7
	delay_ms(50);
   82a18:	4d2a      	ldr	r5, [pc, #168]	; (82ac4 <main+0xbc>)
   82a1a:	4628      	mov	r0, r5
   82a1c:	4c2a      	ldr	r4, [pc, #168]	; (82ac8 <main+0xc0>)
   82a1e:	47a0      	blx	r4
	pio_set_pin_low(BUZ_PIN);
   82a20:	2001      	movs	r0, #1
   82a22:	4e2a      	ldr	r6, [pc, #168]	; (82acc <main+0xc4>)
   82a24:	47b0      	blx	r6
	delay_ms(50);
   82a26:	4628      	mov	r0, r5
   82a28:	47a0      	blx	r4
	pio_set_pin_high(BUZ_PIN);
   82a2a:	2001      	movs	r0, #1
   82a2c:	47b8      	blx	r7
	delay_ms(50);
   82a2e:	4628      	mov	r0, r5
   82a30:	47a0      	blx	r4
	pio_set_pin_low(BUZ_PIN);
   82a32:	2001      	movs	r0, #1
   82a34:	47b0      	blx	r6

	/* Application */
	while(1) {
		pio_set_pin_high(ULED3_PIN);
   82a36:	2008      	movs	r0, #8
   82a38:	47b8      	blx	r7
		delay_ms(100);		
   82a3a:	4d25      	ldr	r5, [pc, #148]	; (82ad0 <main+0xc8>)
   82a3c:	4628      	mov	r0, r5
   82a3e:	47a0      	blx	r4
		pio_set_pin_high(MAIN1_CONTACTOR_PIN);
   82a40:	2040      	movs	r0, #64	; 0x40
   82a42:	47b8      	blx	r7
		delay_ms(100);
   82a44:	4628      	mov	r0, r5
   82a46:	47a0      	blx	r4
		pio_set_pin_low(MAIN1_CONTACTOR_PIN);
   82a48:	2040      	movs	r0, #64	; 0x40
   82a4a:	47b0      	blx	r6
		delay_ms(100);		
   82a4c:	4628      	mov	r0, r5
   82a4e:	47a0      	blx	r4
		pio_set_pin_high(ASTR_CONTACTOR_PIN);
   82a50:	f44f 7080 	mov.w	r0, #256	; 0x100
   82a54:	47b8      	blx	r7
		delay_ms(100);
   82a56:	4628      	mov	r0, r5
   82a58:	47a0      	blx	r4
		pio_set_pin_low(ASTR_CONTACTOR_PIN);
   82a5a:	f44f 7080 	mov.w	r0, #256	; 0x100
   82a5e:	47b0      	blx	r6
		delay_ms(100);				
   82a60:	4628      	mov	r0, r5
   82a62:	47a0      	blx	r4
		pio_set_pin_high(BSTR_CONTACTOR_PIN);
   82a64:	f44f 7000 	mov.w	r0, #512	; 0x200
   82a68:	47b8      	blx	r7
		delay_ms(100);
   82a6a:	4628      	mov	r0, r5
   82a6c:	47a0      	blx	r4
		pio_set_pin_low(BSTR_CONTACTOR_PIN);
   82a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
   82a72:	47b0      	blx	r6
		delay_ms(100);				
   82a74:	4628      	mov	r0, r5
   82a76:	47a0      	blx	r4
		pio_set_pin_high(PCRG_CONTACTOR_PIN);
   82a78:	2080      	movs	r0, #128	; 0x80
   82a7a:	47b8      	blx	r7
		delay_ms(100);
   82a7c:	4628      	mov	r0, r5
   82a7e:	47a0      	blx	r4
		pio_set_pin_low(PCRG_CONTACTOR_PIN);
   82a80:	2080      	movs	r0, #128	; 0x80
   82a82:	47b0      	blx	r6
		delay_ms(100);				
   82a84:	4628      	mov	r0, r5
   82a86:	47a0      	blx	r4
		pio_set_pin_high(MAIN2_CONTACTOR_PIN);
   82a88:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82a8c:	47b8      	blx	r7
		delay_ms(100);
   82a8e:	4628      	mov	r0, r5
   82a90:	47a0      	blx	r4
		pio_set_pin_low(MAIN2_CONTACTOR_PIN);		
   82a92:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82a96:	47b0      	blx	r6
		pio_set_pin_low(ULED3_PIN);
   82a98:	2008      	movs	r0, #8
   82a9a:	47b0      	blx	r6
			pio_clear(ULED3_PIO, ULED3);
			while (!(can_mailbox_get_status(CAN0, 0) & CAN_MSR_MRDY));	
			pio_set(ULED2_PIO, ULED2);
			pio_clear(ULED2_PIO, ULED2);	
      */
			udi_cdc_putc('a');
   82a9c:	4d0d      	ldr	r5, [pc, #52]	; (82ad4 <main+0xcc>)
			//udi_cdc_write_buf("Hello World/n/r",14);	
			if(my_flag_autorize_cdc_transfert == true) {
   82a9e:	4c0e      	ldr	r4, [pc, #56]	; (82ad8 <main+0xd0>)
			pio_clear(ULED3_PIO, ULED3);
			while (!(can_mailbox_get_status(CAN0, 0) & CAN_MSR_MRDY));	
			pio_set(ULED2_PIO, ULED2);
			pio_clear(ULED2_PIO, ULED2);	
      */
			udi_cdc_putc('a');
   82aa0:	2061      	movs	r0, #97	; 0x61
   82aa2:	47a8      	blx	r5
			//udi_cdc_write_buf("Hello World/n/r",14);	
			if(my_flag_autorize_cdc_transfert == true) {
   82aa4:	7823      	ldrb	r3, [r4, #0]
   82aa6:	b11b      	cbz	r3, 82ab0 <main+0xa8>
				pio_set_pin_high(ULED2_PIN);
   82aa8:	2004      	movs	r0, #4
   82aaa:	4b05      	ldr	r3, [pc, #20]	; (82ac0 <main+0xb8>)
   82aac:	4798      	blx	r3
   82aae:	e7f7      	b.n	82aa0 <main+0x98>
			} else {
				pio_set_pin_low(ULED2_PIN);
   82ab0:	2004      	movs	r0, #4
   82ab2:	47b0      	blx	r6
   82ab4:	e7f4      	b.n	82aa0 <main+0x98>
   82ab6:	bf00      	nop
   82ab8:	00080f79 	.word	0x00080f79
   82abc:	000812d5 	.word	0x000812d5
   82ac0:	00081109 	.word	0x00081109
   82ac4:	000493e0 	.word	0x000493e0
   82ac8:	20070001 	.word	0x20070001
   82acc:	00081121 	.word	0x00081121
   82ad0:	000927c0 	.word	0x000927c0
   82ad4:	00080719 	.word	0x00080719
   82ad8:	20070c5c 	.word	0x20070c5c

00082adc <my_callback_cdc_enable>:
}


bool my_callback_cdc_enable(void)
{
  my_flag_autorize_cdc_transfert = true;
   82adc:	2001      	movs	r0, #1
   82ade:	4b01      	ldr	r3, [pc, #4]	; (82ae4 <my_callback_cdc_enable+0x8>)
   82ae0:	7018      	strb	r0, [r3, #0]
  return true;
}
   82ae2:	4770      	bx	lr
   82ae4:	20070c5c 	.word	0x20070c5c

00082ae8 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
  my_flag_autorize_cdc_transfert = false;
   82ae8:	2200      	movs	r2, #0
   82aea:	4b01      	ldr	r3, [pc, #4]	; (82af0 <my_callback_cdc_disable+0x8>)
   82aec:	701a      	strb	r2, [r3, #0]
   82aee:	4770      	bx	lr
   82af0:	20070c5c 	.word	0x20070c5c

00082af4 <user_callback_vbus_action>:
}

void user_callback_vbus_action(bool b_vbus_high) {
   82af4:	b508      	push	{r3, lr}
	if (b_vbus_high) {
   82af6:	b128      	cbz	r0, 82b04 <user_callback_vbus_action+0x10>
		// Connect USB device
		pio_set_pin_high(ULED1_PIN);
   82af8:	2002      	movs	r0, #2
   82afa:	4b05      	ldr	r3, [pc, #20]	; (82b10 <user_callback_vbus_action+0x1c>)
   82afc:	4798      	blx	r3
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
   82afe:	4b05      	ldr	r3, [pc, #20]	; (82b14 <user_callback_vbus_action+0x20>)
   82b00:	4798      	blx	r3
   82b02:	bd08      	pop	{r3, pc}
		udc_attach();
	} else { 
		// Disconnect USB device
		pio_set_pin_low(ULED1_PIN);
   82b04:	2002      	movs	r0, #2
   82b06:	4b04      	ldr	r3, [pc, #16]	; (82b18 <user_callback_vbus_action+0x24>)
   82b08:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82b0a:	4b04      	ldr	r3, [pc, #16]	; (82b1c <user_callback_vbus_action+0x28>)
   82b0c:	4798      	blx	r3
   82b0e:	bd08      	pop	{r3, pc}
   82b10:	00081109 	.word	0x00081109
   82b14:	00081a09 	.word	0x00081a09
   82b18:	00081121 	.word	0x00081121
   82b1c:	00081a85 	.word	0x00081a85

00082b20 <__libc_init_array>:
   82b20:	b570      	push	{r4, r5, r6, lr}
   82b22:	4e0f      	ldr	r6, [pc, #60]	; (82b60 <__libc_init_array+0x40>)
   82b24:	4d0f      	ldr	r5, [pc, #60]	; (82b64 <__libc_init_array+0x44>)
   82b26:	1b76      	subs	r6, r6, r5
   82b28:	10b6      	asrs	r6, r6, #2
   82b2a:	bf18      	it	ne
   82b2c:	2400      	movne	r4, #0
   82b2e:	d005      	beq.n	82b3c <__libc_init_array+0x1c>
   82b30:	3401      	adds	r4, #1
   82b32:	f855 3b04 	ldr.w	r3, [r5], #4
   82b36:	4798      	blx	r3
   82b38:	42a6      	cmp	r6, r4
   82b3a:	d1f9      	bne.n	82b30 <__libc_init_array+0x10>
   82b3c:	4e0a      	ldr	r6, [pc, #40]	; (82b68 <__libc_init_array+0x48>)
   82b3e:	4d0b      	ldr	r5, [pc, #44]	; (82b6c <__libc_init_array+0x4c>)
   82b40:	f000 fc92 	bl	83468 <_init>
   82b44:	1b76      	subs	r6, r6, r5
   82b46:	10b6      	asrs	r6, r6, #2
   82b48:	bf18      	it	ne
   82b4a:	2400      	movne	r4, #0
   82b4c:	d006      	beq.n	82b5c <__libc_init_array+0x3c>
   82b4e:	3401      	adds	r4, #1
   82b50:	f855 3b04 	ldr.w	r3, [r5], #4
   82b54:	4798      	blx	r3
   82b56:	42a6      	cmp	r6, r4
   82b58:	d1f9      	bne.n	82b4e <__libc_init_array+0x2e>
   82b5a:	bd70      	pop	{r4, r5, r6, pc}
   82b5c:	bd70      	pop	{r4, r5, r6, pc}
   82b5e:	bf00      	nop
   82b60:	00083474 	.word	0x00083474
   82b64:	00083474 	.word	0x00083474
   82b68:	0008347c 	.word	0x0008347c
   82b6c:	00083474 	.word	0x00083474

00082b70 <register_fini>:
   82b70:	4b02      	ldr	r3, [pc, #8]	; (82b7c <register_fini+0xc>)
   82b72:	b113      	cbz	r3, 82b7a <register_fini+0xa>
   82b74:	4802      	ldr	r0, [pc, #8]	; (82b80 <register_fini+0x10>)
   82b76:	f000 b805 	b.w	82b84 <atexit>
   82b7a:	4770      	bx	lr
   82b7c:	00000000 	.word	0x00000000
   82b80:	00082b91 	.word	0x00082b91

00082b84 <atexit>:
   82b84:	4601      	mov	r1, r0
   82b86:	2000      	movs	r0, #0
   82b88:	4602      	mov	r2, r0
   82b8a:	4603      	mov	r3, r0
   82b8c:	f000 bbe0 	b.w	83350 <__register_exitproc>

00082b90 <__libc_fini_array>:
   82b90:	b538      	push	{r3, r4, r5, lr}
   82b92:	4b08      	ldr	r3, [pc, #32]	; (82bb4 <__libc_fini_array+0x24>)
   82b94:	4d08      	ldr	r5, [pc, #32]	; (82bb8 <__libc_fini_array+0x28>)
   82b96:	1aed      	subs	r5, r5, r3
   82b98:	10ac      	asrs	r4, r5, #2
   82b9a:	bf18      	it	ne
   82b9c:	18ed      	addne	r5, r5, r3
   82b9e:	d005      	beq.n	82bac <__libc_fini_array+0x1c>
   82ba0:	3c01      	subs	r4, #1
   82ba2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82ba6:	4798      	blx	r3
   82ba8:	2c00      	cmp	r4, #0
   82baa:	d1f9      	bne.n	82ba0 <__libc_fini_array+0x10>
   82bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82bb0:	f000 bc64 	b.w	8347c <_fini>
   82bb4:	00083488 	.word	0x00083488
   82bb8:	0008348c 	.word	0x0008348c

00082bbc <_malloc_trim_r>:
   82bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82bbe:	460c      	mov	r4, r1
   82bc0:	4f22      	ldr	r7, [pc, #136]	; (82c4c <_malloc_trim_r+0x90>)
   82bc2:	4606      	mov	r6, r0
   82bc4:	f000 fbae 	bl	83324 <__malloc_lock>
   82bc8:	68bb      	ldr	r3, [r7, #8]
   82bca:	685d      	ldr	r5, [r3, #4]
   82bcc:	f025 0503 	bic.w	r5, r5, #3
   82bd0:	1b29      	subs	r1, r5, r4
   82bd2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82bd6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82bda:	f021 010f 	bic.w	r1, r1, #15
   82bde:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82be2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82be6:	db07      	blt.n	82bf8 <_malloc_trim_r+0x3c>
   82be8:	4630      	mov	r0, r6
   82bea:	2100      	movs	r1, #0
   82bec:	f000 fb9e 	bl	8332c <_sbrk_r>
   82bf0:	68bb      	ldr	r3, [r7, #8]
   82bf2:	442b      	add	r3, r5
   82bf4:	4298      	cmp	r0, r3
   82bf6:	d004      	beq.n	82c02 <_malloc_trim_r+0x46>
   82bf8:	4630      	mov	r0, r6
   82bfa:	f000 fb95 	bl	83328 <__malloc_unlock>
   82bfe:	2000      	movs	r0, #0
   82c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c02:	4630      	mov	r0, r6
   82c04:	4261      	negs	r1, r4
   82c06:	f000 fb91 	bl	8332c <_sbrk_r>
   82c0a:	3001      	adds	r0, #1
   82c0c:	d00d      	beq.n	82c2a <_malloc_trim_r+0x6e>
   82c0e:	4b10      	ldr	r3, [pc, #64]	; (82c50 <_malloc_trim_r+0x94>)
   82c10:	68ba      	ldr	r2, [r7, #8]
   82c12:	6819      	ldr	r1, [r3, #0]
   82c14:	1b2d      	subs	r5, r5, r4
   82c16:	f045 0501 	orr.w	r5, r5, #1
   82c1a:	4630      	mov	r0, r6
   82c1c:	1b09      	subs	r1, r1, r4
   82c1e:	6055      	str	r5, [r2, #4]
   82c20:	6019      	str	r1, [r3, #0]
   82c22:	f000 fb81 	bl	83328 <__malloc_unlock>
   82c26:	2001      	movs	r0, #1
   82c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82c2a:	4630      	mov	r0, r6
   82c2c:	2100      	movs	r1, #0
   82c2e:	f000 fb7d 	bl	8332c <_sbrk_r>
   82c32:	68ba      	ldr	r2, [r7, #8]
   82c34:	1a83      	subs	r3, r0, r2
   82c36:	2b0f      	cmp	r3, #15
   82c38:	ddde      	ble.n	82bf8 <_malloc_trim_r+0x3c>
   82c3a:	4c06      	ldr	r4, [pc, #24]	; (82c54 <_malloc_trim_r+0x98>)
   82c3c:	4904      	ldr	r1, [pc, #16]	; (82c50 <_malloc_trim_r+0x94>)
   82c3e:	6824      	ldr	r4, [r4, #0]
   82c40:	f043 0301 	orr.w	r3, r3, #1
   82c44:	1b00      	subs	r0, r0, r4
   82c46:	6053      	str	r3, [r2, #4]
   82c48:	6008      	str	r0, [r1, #0]
   82c4a:	e7d5      	b.n	82bf8 <_malloc_trim_r+0x3c>
   82c4c:	2007060c 	.word	0x2007060c
   82c50:	20070c6c 	.word	0x20070c6c
   82c54:	20070a18 	.word	0x20070a18

00082c58 <_free_r>:
   82c58:	2900      	cmp	r1, #0
   82c5a:	d04e      	beq.n	82cfa <_free_r+0xa2>
   82c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82c60:	460c      	mov	r4, r1
   82c62:	4680      	mov	r8, r0
   82c64:	f000 fb5e 	bl	83324 <__malloc_lock>
   82c68:	f854 7c04 	ldr.w	r7, [r4, #-4]
   82c6c:	4962      	ldr	r1, [pc, #392]	; (82df8 <_free_r+0x1a0>)
   82c6e:	f1a4 0508 	sub.w	r5, r4, #8
   82c72:	f027 0201 	bic.w	r2, r7, #1
   82c76:	18ab      	adds	r3, r5, r2
   82c78:	688e      	ldr	r6, [r1, #8]
   82c7a:	6858      	ldr	r0, [r3, #4]
   82c7c:	429e      	cmp	r6, r3
   82c7e:	f020 0003 	bic.w	r0, r0, #3
   82c82:	d05a      	beq.n	82d3a <_free_r+0xe2>
   82c84:	07fe      	lsls	r6, r7, #31
   82c86:	6058      	str	r0, [r3, #4]
   82c88:	d40b      	bmi.n	82ca2 <_free_r+0x4a>
   82c8a:	f854 7c08 	ldr.w	r7, [r4, #-8]
   82c8e:	f101 0e08 	add.w	lr, r1, #8
   82c92:	1bed      	subs	r5, r5, r7
   82c94:	68ac      	ldr	r4, [r5, #8]
   82c96:	443a      	add	r2, r7
   82c98:	4574      	cmp	r4, lr
   82c9a:	d067      	beq.n	82d6c <_free_r+0x114>
   82c9c:	68ef      	ldr	r7, [r5, #12]
   82c9e:	60e7      	str	r7, [r4, #12]
   82ca0:	60bc      	str	r4, [r7, #8]
   82ca2:	181c      	adds	r4, r3, r0
   82ca4:	6864      	ldr	r4, [r4, #4]
   82ca6:	07e4      	lsls	r4, r4, #31
   82ca8:	d40c      	bmi.n	82cc4 <_free_r+0x6c>
   82caa:	4f54      	ldr	r7, [pc, #336]	; (82dfc <_free_r+0x1a4>)
   82cac:	689c      	ldr	r4, [r3, #8]
   82cae:	4402      	add	r2, r0
   82cb0:	42bc      	cmp	r4, r7
   82cb2:	d07c      	beq.n	82dae <_free_r+0x156>
   82cb4:	68d8      	ldr	r0, [r3, #12]
   82cb6:	f042 0301 	orr.w	r3, r2, #1
   82cba:	60e0      	str	r0, [r4, #12]
   82cbc:	6084      	str	r4, [r0, #8]
   82cbe:	606b      	str	r3, [r5, #4]
   82cc0:	50aa      	str	r2, [r5, r2]
   82cc2:	e003      	b.n	82ccc <_free_r+0x74>
   82cc4:	f042 0301 	orr.w	r3, r2, #1
   82cc8:	606b      	str	r3, [r5, #4]
   82cca:	50aa      	str	r2, [r5, r2]
   82ccc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82cd0:	d214      	bcs.n	82cfc <_free_r+0xa4>
   82cd2:	08d2      	lsrs	r2, r2, #3
   82cd4:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   82cd8:	2401      	movs	r4, #1
   82cda:	6848      	ldr	r0, [r1, #4]
   82cdc:	1092      	asrs	r2, r2, #2
   82cde:	fa04 f202 	lsl.w	r2, r4, r2
   82ce2:	689c      	ldr	r4, [r3, #8]
   82ce4:	4310      	orrs	r0, r2
   82ce6:	60ac      	str	r4, [r5, #8]
   82ce8:	60eb      	str	r3, [r5, #12]
   82cea:	6048      	str	r0, [r1, #4]
   82cec:	609d      	str	r5, [r3, #8]
   82cee:	60e5      	str	r5, [r4, #12]
   82cf0:	4640      	mov	r0, r8
   82cf2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82cf6:	f000 bb17 	b.w	83328 <__malloc_unlock>
   82cfa:	4770      	bx	lr
   82cfc:	0a53      	lsrs	r3, r2, #9
   82cfe:	2b04      	cmp	r3, #4
   82d00:	d847      	bhi.n	82d92 <_free_r+0x13a>
   82d02:	0993      	lsrs	r3, r2, #6
   82d04:	f103 0438 	add.w	r4, r3, #56	; 0x38
   82d08:	0060      	lsls	r0, r4, #1
   82d0a:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   82d0e:	6883      	ldr	r3, [r0, #8]
   82d10:	4939      	ldr	r1, [pc, #228]	; (82df8 <_free_r+0x1a0>)
   82d12:	4283      	cmp	r3, r0
   82d14:	d043      	beq.n	82d9e <_free_r+0x146>
   82d16:	6859      	ldr	r1, [r3, #4]
   82d18:	f021 0103 	bic.w	r1, r1, #3
   82d1c:	4291      	cmp	r1, r2
   82d1e:	d902      	bls.n	82d26 <_free_r+0xce>
   82d20:	689b      	ldr	r3, [r3, #8]
   82d22:	4298      	cmp	r0, r3
   82d24:	d1f7      	bne.n	82d16 <_free_r+0xbe>
   82d26:	68da      	ldr	r2, [r3, #12]
   82d28:	60ea      	str	r2, [r5, #12]
   82d2a:	60ab      	str	r3, [r5, #8]
   82d2c:	4640      	mov	r0, r8
   82d2e:	6095      	str	r5, [r2, #8]
   82d30:	60dd      	str	r5, [r3, #12]
   82d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82d36:	f000 baf7 	b.w	83328 <__malloc_unlock>
   82d3a:	07ff      	lsls	r7, r7, #31
   82d3c:	4402      	add	r2, r0
   82d3e:	d407      	bmi.n	82d50 <_free_r+0xf8>
   82d40:	f854 4c08 	ldr.w	r4, [r4, #-8]
   82d44:	1b2d      	subs	r5, r5, r4
   82d46:	68eb      	ldr	r3, [r5, #12]
   82d48:	68a8      	ldr	r0, [r5, #8]
   82d4a:	4422      	add	r2, r4
   82d4c:	60c3      	str	r3, [r0, #12]
   82d4e:	6098      	str	r0, [r3, #8]
   82d50:	4b2b      	ldr	r3, [pc, #172]	; (82e00 <_free_r+0x1a8>)
   82d52:	f042 0001 	orr.w	r0, r2, #1
   82d56:	681b      	ldr	r3, [r3, #0]
   82d58:	6068      	str	r0, [r5, #4]
   82d5a:	429a      	cmp	r2, r3
   82d5c:	608d      	str	r5, [r1, #8]
   82d5e:	d3c7      	bcc.n	82cf0 <_free_r+0x98>
   82d60:	4b28      	ldr	r3, [pc, #160]	; (82e04 <_free_r+0x1ac>)
   82d62:	4640      	mov	r0, r8
   82d64:	6819      	ldr	r1, [r3, #0]
   82d66:	f7ff ff29 	bl	82bbc <_malloc_trim_r>
   82d6a:	e7c1      	b.n	82cf0 <_free_r+0x98>
   82d6c:	1819      	adds	r1, r3, r0
   82d6e:	6849      	ldr	r1, [r1, #4]
   82d70:	07c9      	lsls	r1, r1, #31
   82d72:	d409      	bmi.n	82d88 <_free_r+0x130>
   82d74:	68d9      	ldr	r1, [r3, #12]
   82d76:	4402      	add	r2, r0
   82d78:	689b      	ldr	r3, [r3, #8]
   82d7a:	f042 0001 	orr.w	r0, r2, #1
   82d7e:	60d9      	str	r1, [r3, #12]
   82d80:	608b      	str	r3, [r1, #8]
   82d82:	6068      	str	r0, [r5, #4]
   82d84:	50aa      	str	r2, [r5, r2]
   82d86:	e7b3      	b.n	82cf0 <_free_r+0x98>
   82d88:	f042 0301 	orr.w	r3, r2, #1
   82d8c:	606b      	str	r3, [r5, #4]
   82d8e:	50aa      	str	r2, [r5, r2]
   82d90:	e7ae      	b.n	82cf0 <_free_r+0x98>
   82d92:	2b14      	cmp	r3, #20
   82d94:	d814      	bhi.n	82dc0 <_free_r+0x168>
   82d96:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   82d9a:	0060      	lsls	r0, r4, #1
   82d9c:	e7b5      	b.n	82d0a <_free_r+0xb2>
   82d9e:	684a      	ldr	r2, [r1, #4]
   82da0:	10a4      	asrs	r4, r4, #2
   82da2:	2001      	movs	r0, #1
   82da4:	40a0      	lsls	r0, r4
   82da6:	4302      	orrs	r2, r0
   82da8:	604a      	str	r2, [r1, #4]
   82daa:	461a      	mov	r2, r3
   82dac:	e7bc      	b.n	82d28 <_free_r+0xd0>
   82dae:	f042 0301 	orr.w	r3, r2, #1
   82db2:	614d      	str	r5, [r1, #20]
   82db4:	610d      	str	r5, [r1, #16]
   82db6:	60ec      	str	r4, [r5, #12]
   82db8:	60ac      	str	r4, [r5, #8]
   82dba:	606b      	str	r3, [r5, #4]
   82dbc:	50aa      	str	r2, [r5, r2]
   82dbe:	e797      	b.n	82cf0 <_free_r+0x98>
   82dc0:	2b54      	cmp	r3, #84	; 0x54
   82dc2:	d804      	bhi.n	82dce <_free_r+0x176>
   82dc4:	0b13      	lsrs	r3, r2, #12
   82dc6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   82dca:	0060      	lsls	r0, r4, #1
   82dcc:	e79d      	b.n	82d0a <_free_r+0xb2>
   82dce:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82dd2:	d804      	bhi.n	82dde <_free_r+0x186>
   82dd4:	0bd3      	lsrs	r3, r2, #15
   82dd6:	f103 0477 	add.w	r4, r3, #119	; 0x77
   82dda:	0060      	lsls	r0, r4, #1
   82ddc:	e795      	b.n	82d0a <_free_r+0xb2>
   82dde:	f240 5054 	movw	r0, #1364	; 0x554
   82de2:	4283      	cmp	r3, r0
   82de4:	d804      	bhi.n	82df0 <_free_r+0x198>
   82de6:	0c93      	lsrs	r3, r2, #18
   82de8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82dec:	0060      	lsls	r0, r4, #1
   82dee:	e78c      	b.n	82d0a <_free_r+0xb2>
   82df0:	20fc      	movs	r0, #252	; 0xfc
   82df2:	247e      	movs	r4, #126	; 0x7e
   82df4:	e789      	b.n	82d0a <_free_r+0xb2>
   82df6:	bf00      	nop
   82df8:	2007060c 	.word	0x2007060c
   82dfc:	20070614 	.word	0x20070614
   82e00:	20070a14 	.word	0x20070a14
   82e04:	20070c68 	.word	0x20070c68

00082e08 <malloc>:
   82e08:	4b02      	ldr	r3, [pc, #8]	; (82e14 <malloc+0xc>)
   82e0a:	4601      	mov	r1, r0
   82e0c:	6818      	ldr	r0, [r3, #0]
   82e0e:	f000 b803 	b.w	82e18 <_malloc_r>
   82e12:	bf00      	nop
   82e14:	20070608 	.word	0x20070608

00082e18 <_malloc_r>:
   82e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e1c:	f101 050b 	add.w	r5, r1, #11
   82e20:	2d16      	cmp	r5, #22
   82e22:	b083      	sub	sp, #12
   82e24:	4606      	mov	r6, r0
   82e26:	d927      	bls.n	82e78 <_malloc_r+0x60>
   82e28:	f035 0507 	bics.w	r5, r5, #7
   82e2c:	f100 80b6 	bmi.w	82f9c <_malloc_r+0x184>
   82e30:	42a9      	cmp	r1, r5
   82e32:	f200 80b3 	bhi.w	82f9c <_malloc_r+0x184>
   82e36:	f000 fa75 	bl	83324 <__malloc_lock>
   82e3a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82e3e:	d222      	bcs.n	82e86 <_malloc_r+0x6e>
   82e40:	4fbc      	ldr	r7, [pc, #752]	; (83134 <_malloc_r+0x31c>)
   82e42:	08e8      	lsrs	r0, r5, #3
   82e44:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82e48:	68dc      	ldr	r4, [r3, #12]
   82e4a:	429c      	cmp	r4, r3
   82e4c:	f000 81bc 	beq.w	831c8 <_malloc_r+0x3b0>
   82e50:	6863      	ldr	r3, [r4, #4]
   82e52:	68e1      	ldr	r1, [r4, #12]
   82e54:	f023 0303 	bic.w	r3, r3, #3
   82e58:	4423      	add	r3, r4
   82e5a:	685a      	ldr	r2, [r3, #4]
   82e5c:	68a5      	ldr	r5, [r4, #8]
   82e5e:	f042 0201 	orr.w	r2, r2, #1
   82e62:	60e9      	str	r1, [r5, #12]
   82e64:	4630      	mov	r0, r6
   82e66:	608d      	str	r5, [r1, #8]
   82e68:	605a      	str	r2, [r3, #4]
   82e6a:	f000 fa5d 	bl	83328 <__malloc_unlock>
   82e6e:	3408      	adds	r4, #8
   82e70:	4620      	mov	r0, r4
   82e72:	b003      	add	sp, #12
   82e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e78:	2910      	cmp	r1, #16
   82e7a:	f200 808f 	bhi.w	82f9c <_malloc_r+0x184>
   82e7e:	f000 fa51 	bl	83324 <__malloc_lock>
   82e82:	2510      	movs	r5, #16
   82e84:	e7dc      	b.n	82e40 <_malloc_r+0x28>
   82e86:	0a68      	lsrs	r0, r5, #9
   82e88:	f000 808f 	beq.w	82faa <_malloc_r+0x192>
   82e8c:	2804      	cmp	r0, #4
   82e8e:	f200 8147 	bhi.w	83120 <_malloc_r+0x308>
   82e92:	09a8      	lsrs	r0, r5, #6
   82e94:	3038      	adds	r0, #56	; 0x38
   82e96:	0041      	lsls	r1, r0, #1
   82e98:	4fa6      	ldr	r7, [pc, #664]	; (83134 <_malloc_r+0x31c>)
   82e9a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   82e9e:	68cc      	ldr	r4, [r1, #12]
   82ea0:	42a1      	cmp	r1, r4
   82ea2:	d106      	bne.n	82eb2 <_malloc_r+0x9a>
   82ea4:	e00c      	b.n	82ec0 <_malloc_r+0xa8>
   82ea6:	2a00      	cmp	r2, #0
   82ea8:	f280 8082 	bge.w	82fb0 <_malloc_r+0x198>
   82eac:	68e4      	ldr	r4, [r4, #12]
   82eae:	42a1      	cmp	r1, r4
   82eb0:	d006      	beq.n	82ec0 <_malloc_r+0xa8>
   82eb2:	6863      	ldr	r3, [r4, #4]
   82eb4:	f023 0303 	bic.w	r3, r3, #3
   82eb8:	1b5a      	subs	r2, r3, r5
   82eba:	2a0f      	cmp	r2, #15
   82ebc:	ddf3      	ble.n	82ea6 <_malloc_r+0x8e>
   82ebe:	3801      	subs	r0, #1
   82ec0:	3001      	adds	r0, #1
   82ec2:	499c      	ldr	r1, [pc, #624]	; (83134 <_malloc_r+0x31c>)
   82ec4:	693c      	ldr	r4, [r7, #16]
   82ec6:	f101 0e08 	add.w	lr, r1, #8
   82eca:	4574      	cmp	r4, lr
   82ecc:	f000 8171 	beq.w	831b2 <_malloc_r+0x39a>
   82ed0:	6863      	ldr	r3, [r4, #4]
   82ed2:	f023 0303 	bic.w	r3, r3, #3
   82ed6:	1b5a      	subs	r2, r3, r5
   82ed8:	2a0f      	cmp	r2, #15
   82eda:	f300 8157 	bgt.w	8318c <_malloc_r+0x374>
   82ede:	2a00      	cmp	r2, #0
   82ee0:	f8c1 e014 	str.w	lr, [r1, #20]
   82ee4:	f8c1 e010 	str.w	lr, [r1, #16]
   82ee8:	da66      	bge.n	82fb8 <_malloc_r+0x1a0>
   82eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82eee:	f080 812d 	bcs.w	8314c <_malloc_r+0x334>
   82ef2:	08db      	lsrs	r3, r3, #3
   82ef4:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   82ef8:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82efc:	684a      	ldr	r2, [r1, #4]
   82efe:	2301      	movs	r3, #1
   82f00:	fa03 f30c 	lsl.w	r3, r3, ip
   82f04:	f8d8 c008 	ldr.w	ip, [r8, #8]
   82f08:	4313      	orrs	r3, r2
   82f0a:	f8c4 c008 	str.w	ip, [r4, #8]
   82f0e:	f8c4 800c 	str.w	r8, [r4, #12]
   82f12:	604b      	str	r3, [r1, #4]
   82f14:	f8c8 4008 	str.w	r4, [r8, #8]
   82f18:	f8cc 400c 	str.w	r4, [ip, #12]
   82f1c:	1082      	asrs	r2, r0, #2
   82f1e:	2401      	movs	r4, #1
   82f20:	4094      	lsls	r4, r2
   82f22:	429c      	cmp	r4, r3
   82f24:	d855      	bhi.n	82fd2 <_malloc_r+0x1ba>
   82f26:	4223      	tst	r3, r4
   82f28:	d106      	bne.n	82f38 <_malloc_r+0x120>
   82f2a:	f020 0003 	bic.w	r0, r0, #3
   82f2e:	0064      	lsls	r4, r4, #1
   82f30:	4223      	tst	r3, r4
   82f32:	f100 0004 	add.w	r0, r0, #4
   82f36:	d0fa      	beq.n	82f2e <_malloc_r+0x116>
   82f38:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   82f3c:	46c4      	mov	ip, r8
   82f3e:	4681      	mov	r9, r0
   82f40:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82f44:	459c      	cmp	ip, r3
   82f46:	d107      	bne.n	82f58 <_malloc_r+0x140>
   82f48:	e135      	b.n	831b6 <_malloc_r+0x39e>
   82f4a:	2900      	cmp	r1, #0
   82f4c:	f280 8145 	bge.w	831da <_malloc_r+0x3c2>
   82f50:	68db      	ldr	r3, [r3, #12]
   82f52:	459c      	cmp	ip, r3
   82f54:	f000 812f 	beq.w	831b6 <_malloc_r+0x39e>
   82f58:	685a      	ldr	r2, [r3, #4]
   82f5a:	f022 0203 	bic.w	r2, r2, #3
   82f5e:	1b51      	subs	r1, r2, r5
   82f60:	290f      	cmp	r1, #15
   82f62:	ddf2      	ble.n	82f4a <_malloc_r+0x132>
   82f64:	461c      	mov	r4, r3
   82f66:	68da      	ldr	r2, [r3, #12]
   82f68:	f854 cf08 	ldr.w	ip, [r4, #8]!
   82f6c:	f045 0901 	orr.w	r9, r5, #1
   82f70:	f041 0801 	orr.w	r8, r1, #1
   82f74:	441d      	add	r5, r3
   82f76:	f8c3 9004 	str.w	r9, [r3, #4]
   82f7a:	4630      	mov	r0, r6
   82f7c:	f8cc 200c 	str.w	r2, [ip, #12]
   82f80:	f8c2 c008 	str.w	ip, [r2, #8]
   82f84:	617d      	str	r5, [r7, #20]
   82f86:	613d      	str	r5, [r7, #16]
   82f88:	f8c5 e00c 	str.w	lr, [r5, #12]
   82f8c:	f8c5 e008 	str.w	lr, [r5, #8]
   82f90:	f8c5 8004 	str.w	r8, [r5, #4]
   82f94:	5069      	str	r1, [r5, r1]
   82f96:	f000 f9c7 	bl	83328 <__malloc_unlock>
   82f9a:	e769      	b.n	82e70 <_malloc_r+0x58>
   82f9c:	2400      	movs	r4, #0
   82f9e:	4620      	mov	r0, r4
   82fa0:	230c      	movs	r3, #12
   82fa2:	6033      	str	r3, [r6, #0]
   82fa4:	b003      	add	sp, #12
   82fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82faa:	217e      	movs	r1, #126	; 0x7e
   82fac:	203f      	movs	r0, #63	; 0x3f
   82fae:	e773      	b.n	82e98 <_malloc_r+0x80>
   82fb0:	4423      	add	r3, r4
   82fb2:	685a      	ldr	r2, [r3, #4]
   82fb4:	68e1      	ldr	r1, [r4, #12]
   82fb6:	e751      	b.n	82e5c <_malloc_r+0x44>
   82fb8:	4423      	add	r3, r4
   82fba:	685a      	ldr	r2, [r3, #4]
   82fbc:	4630      	mov	r0, r6
   82fbe:	f042 0201 	orr.w	r2, r2, #1
   82fc2:	605a      	str	r2, [r3, #4]
   82fc4:	3408      	adds	r4, #8
   82fc6:	f000 f9af 	bl	83328 <__malloc_unlock>
   82fca:	4620      	mov	r0, r4
   82fcc:	b003      	add	sp, #12
   82fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fd2:	68bc      	ldr	r4, [r7, #8]
   82fd4:	6863      	ldr	r3, [r4, #4]
   82fd6:	f023 0803 	bic.w	r8, r3, #3
   82fda:	4545      	cmp	r5, r8
   82fdc:	d804      	bhi.n	82fe8 <_malloc_r+0x1d0>
   82fde:	ebc5 0308 	rsb	r3, r5, r8
   82fe2:	2b0f      	cmp	r3, #15
   82fe4:	f300 808c 	bgt.w	83100 <_malloc_r+0x2e8>
   82fe8:	4b53      	ldr	r3, [pc, #332]	; (83138 <_malloc_r+0x320>)
   82fea:	f8df a15c 	ldr.w	sl, [pc, #348]	; 83148 <_malloc_r+0x330>
   82fee:	681a      	ldr	r2, [r3, #0]
   82ff0:	f8da 3000 	ldr.w	r3, [sl]
   82ff4:	442a      	add	r2, r5
   82ff6:	3301      	adds	r3, #1
   82ff8:	eb04 0b08 	add.w	fp, r4, r8
   82ffc:	f000 8151 	beq.w	832a2 <_malloc_r+0x48a>
   83000:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   83004:	320f      	adds	r2, #15
   83006:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8300a:	f022 020f 	bic.w	r2, r2, #15
   8300e:	4611      	mov	r1, r2
   83010:	4630      	mov	r0, r6
   83012:	9201      	str	r2, [sp, #4]
   83014:	f000 f98a 	bl	8332c <_sbrk_r>
   83018:	f1b0 3fff 	cmp.w	r0, #4294967295
   8301c:	4681      	mov	r9, r0
   8301e:	9a01      	ldr	r2, [sp, #4]
   83020:	f000 8148 	beq.w	832b4 <_malloc_r+0x49c>
   83024:	4583      	cmp	fp, r0
   83026:	f200 80ef 	bhi.w	83208 <_malloc_r+0x3f0>
   8302a:	4b44      	ldr	r3, [pc, #272]	; (8313c <_malloc_r+0x324>)
   8302c:	45cb      	cmp	fp, r9
   8302e:	6819      	ldr	r1, [r3, #0]
   83030:	4411      	add	r1, r2
   83032:	6019      	str	r1, [r3, #0]
   83034:	f000 8143 	beq.w	832be <_malloc_r+0x4a6>
   83038:	f8da 0000 	ldr.w	r0, [sl]
   8303c:	f8df e108 	ldr.w	lr, [pc, #264]	; 83148 <_malloc_r+0x330>
   83040:	3001      	adds	r0, #1
   83042:	bf1b      	ittet	ne
   83044:	ebcb 0b09 	rsbne	fp, fp, r9
   83048:	4459      	addne	r1, fp
   8304a:	f8ce 9000 	streq.w	r9, [lr]
   8304e:	6019      	strne	r1, [r3, #0]
   83050:	f019 0107 	ands.w	r1, r9, #7
   83054:	f000 8108 	beq.w	83268 <_malloc_r+0x450>
   83058:	f1c1 0008 	rsb	r0, r1, #8
   8305c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83060:	4481      	add	r9, r0
   83062:	3108      	adds	r1, #8
   83064:	444a      	add	r2, r9
   83066:	f3c2 020b 	ubfx	r2, r2, #0, #12
   8306a:	ebc2 0a01 	rsb	sl, r2, r1
   8306e:	4651      	mov	r1, sl
   83070:	4630      	mov	r0, r6
   83072:	9301      	str	r3, [sp, #4]
   83074:	f000 f95a 	bl	8332c <_sbrk_r>
   83078:	1c43      	adds	r3, r0, #1
   8307a:	9b01      	ldr	r3, [sp, #4]
   8307c:	f000 812d 	beq.w	832da <_malloc_r+0x4c2>
   83080:	ebc9 0200 	rsb	r2, r9, r0
   83084:	4452      	add	r2, sl
   83086:	f042 0201 	orr.w	r2, r2, #1
   8308a:	6819      	ldr	r1, [r3, #0]
   8308c:	42bc      	cmp	r4, r7
   8308e:	4451      	add	r1, sl
   83090:	f8c7 9008 	str.w	r9, [r7, #8]
   83094:	6019      	str	r1, [r3, #0]
   83096:	f8c9 2004 	str.w	r2, [r9, #4]
   8309a:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8313c <_malloc_r+0x324>
   8309e:	d016      	beq.n	830ce <_malloc_r+0x2b6>
   830a0:	f1b8 0f0f 	cmp.w	r8, #15
   830a4:	f240 80ef 	bls.w	83286 <_malloc_r+0x46e>
   830a8:	6862      	ldr	r2, [r4, #4]
   830aa:	f1a8 030c 	sub.w	r3, r8, #12
   830ae:	f023 0307 	bic.w	r3, r3, #7
   830b2:	f002 0201 	and.w	r2, r2, #1
   830b6:	18e0      	adds	r0, r4, r3
   830b8:	f04f 0e05 	mov.w	lr, #5
   830bc:	431a      	orrs	r2, r3
   830be:	2b0f      	cmp	r3, #15
   830c0:	6062      	str	r2, [r4, #4]
   830c2:	f8c0 e004 	str.w	lr, [r0, #4]
   830c6:	f8c0 e008 	str.w	lr, [r0, #8]
   830ca:	f200 810a 	bhi.w	832e2 <_malloc_r+0x4ca>
   830ce:	4b1c      	ldr	r3, [pc, #112]	; (83140 <_malloc_r+0x328>)
   830d0:	68bc      	ldr	r4, [r7, #8]
   830d2:	681a      	ldr	r2, [r3, #0]
   830d4:	4291      	cmp	r1, r2
   830d6:	bf88      	it	hi
   830d8:	6019      	strhi	r1, [r3, #0]
   830da:	4b1a      	ldr	r3, [pc, #104]	; (83144 <_malloc_r+0x32c>)
   830dc:	681a      	ldr	r2, [r3, #0]
   830de:	4291      	cmp	r1, r2
   830e0:	6862      	ldr	r2, [r4, #4]
   830e2:	bf88      	it	hi
   830e4:	6019      	strhi	r1, [r3, #0]
   830e6:	f022 0203 	bic.w	r2, r2, #3
   830ea:	4295      	cmp	r5, r2
   830ec:	eba2 0305 	sub.w	r3, r2, r5
   830f0:	d801      	bhi.n	830f6 <_malloc_r+0x2de>
   830f2:	2b0f      	cmp	r3, #15
   830f4:	dc04      	bgt.n	83100 <_malloc_r+0x2e8>
   830f6:	4630      	mov	r0, r6
   830f8:	f000 f916 	bl	83328 <__malloc_unlock>
   830fc:	2400      	movs	r4, #0
   830fe:	e6b7      	b.n	82e70 <_malloc_r+0x58>
   83100:	f045 0201 	orr.w	r2, r5, #1
   83104:	f043 0301 	orr.w	r3, r3, #1
   83108:	4425      	add	r5, r4
   8310a:	6062      	str	r2, [r4, #4]
   8310c:	4630      	mov	r0, r6
   8310e:	60bd      	str	r5, [r7, #8]
   83110:	3408      	adds	r4, #8
   83112:	606b      	str	r3, [r5, #4]
   83114:	f000 f908 	bl	83328 <__malloc_unlock>
   83118:	4620      	mov	r0, r4
   8311a:	b003      	add	sp, #12
   8311c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83120:	2814      	cmp	r0, #20
   83122:	d969      	bls.n	831f8 <_malloc_r+0x3e0>
   83124:	2854      	cmp	r0, #84	; 0x54
   83126:	f200 8098 	bhi.w	8325a <_malloc_r+0x442>
   8312a:	0b28      	lsrs	r0, r5, #12
   8312c:	306e      	adds	r0, #110	; 0x6e
   8312e:	0041      	lsls	r1, r0, #1
   83130:	e6b2      	b.n	82e98 <_malloc_r+0x80>
   83132:	bf00      	nop
   83134:	2007060c 	.word	0x2007060c
   83138:	20070c68 	.word	0x20070c68
   8313c:	20070c6c 	.word	0x20070c6c
   83140:	20070c64 	.word	0x20070c64
   83144:	20070c60 	.word	0x20070c60
   83148:	20070a18 	.word	0x20070a18
   8314c:	0a5a      	lsrs	r2, r3, #9
   8314e:	2a04      	cmp	r2, #4
   83150:	d955      	bls.n	831fe <_malloc_r+0x3e6>
   83152:	2a14      	cmp	r2, #20
   83154:	f200 80a7 	bhi.w	832a6 <_malloc_r+0x48e>
   83158:	325b      	adds	r2, #91	; 0x5b
   8315a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8315e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   83162:	f8dc 1008 	ldr.w	r1, [ip, #8]
   83166:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83320 <_malloc_r+0x508>
   8316a:	4561      	cmp	r1, ip
   8316c:	d07f      	beq.n	8326e <_malloc_r+0x456>
   8316e:	684a      	ldr	r2, [r1, #4]
   83170:	f022 0203 	bic.w	r2, r2, #3
   83174:	4293      	cmp	r3, r2
   83176:	d202      	bcs.n	8317e <_malloc_r+0x366>
   83178:	6889      	ldr	r1, [r1, #8]
   8317a:	458c      	cmp	ip, r1
   8317c:	d1f7      	bne.n	8316e <_malloc_r+0x356>
   8317e:	68ca      	ldr	r2, [r1, #12]
   83180:	687b      	ldr	r3, [r7, #4]
   83182:	60e2      	str	r2, [r4, #12]
   83184:	60a1      	str	r1, [r4, #8]
   83186:	6094      	str	r4, [r2, #8]
   83188:	60cc      	str	r4, [r1, #12]
   8318a:	e6c7      	b.n	82f1c <_malloc_r+0x104>
   8318c:	f045 0701 	orr.w	r7, r5, #1
   83190:	f042 0301 	orr.w	r3, r2, #1
   83194:	4425      	add	r5, r4
   83196:	6067      	str	r7, [r4, #4]
   83198:	4630      	mov	r0, r6
   8319a:	614d      	str	r5, [r1, #20]
   8319c:	610d      	str	r5, [r1, #16]
   8319e:	f8c5 e00c 	str.w	lr, [r5, #12]
   831a2:	f8c5 e008 	str.w	lr, [r5, #8]
   831a6:	606b      	str	r3, [r5, #4]
   831a8:	50aa      	str	r2, [r5, r2]
   831aa:	3408      	adds	r4, #8
   831ac:	f000 f8bc 	bl	83328 <__malloc_unlock>
   831b0:	e65e      	b.n	82e70 <_malloc_r+0x58>
   831b2:	684b      	ldr	r3, [r1, #4]
   831b4:	e6b2      	b.n	82f1c <_malloc_r+0x104>
   831b6:	f109 0901 	add.w	r9, r9, #1
   831ba:	f019 0f03 	tst.w	r9, #3
   831be:	f10c 0c08 	add.w	ip, ip, #8
   831c2:	f47f aebd 	bne.w	82f40 <_malloc_r+0x128>
   831c6:	e02c      	b.n	83222 <_malloc_r+0x40a>
   831c8:	f104 0308 	add.w	r3, r4, #8
   831cc:	6964      	ldr	r4, [r4, #20]
   831ce:	42a3      	cmp	r3, r4
   831d0:	bf08      	it	eq
   831d2:	3002      	addeq	r0, #2
   831d4:	f43f ae75 	beq.w	82ec2 <_malloc_r+0xaa>
   831d8:	e63a      	b.n	82e50 <_malloc_r+0x38>
   831da:	461c      	mov	r4, r3
   831dc:	441a      	add	r2, r3
   831de:	6851      	ldr	r1, [r2, #4]
   831e0:	68db      	ldr	r3, [r3, #12]
   831e2:	f854 5f08 	ldr.w	r5, [r4, #8]!
   831e6:	f041 0101 	orr.w	r1, r1, #1
   831ea:	6051      	str	r1, [r2, #4]
   831ec:	4630      	mov	r0, r6
   831ee:	60eb      	str	r3, [r5, #12]
   831f0:	609d      	str	r5, [r3, #8]
   831f2:	f000 f899 	bl	83328 <__malloc_unlock>
   831f6:	e63b      	b.n	82e70 <_malloc_r+0x58>
   831f8:	305b      	adds	r0, #91	; 0x5b
   831fa:	0041      	lsls	r1, r0, #1
   831fc:	e64c      	b.n	82e98 <_malloc_r+0x80>
   831fe:	099a      	lsrs	r2, r3, #6
   83200:	3238      	adds	r2, #56	; 0x38
   83202:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83206:	e7aa      	b.n	8315e <_malloc_r+0x346>
   83208:	42bc      	cmp	r4, r7
   8320a:	4b45      	ldr	r3, [pc, #276]	; (83320 <_malloc_r+0x508>)
   8320c:	f43f af0d 	beq.w	8302a <_malloc_r+0x212>
   83210:	689c      	ldr	r4, [r3, #8]
   83212:	6862      	ldr	r2, [r4, #4]
   83214:	f022 0203 	bic.w	r2, r2, #3
   83218:	e767      	b.n	830ea <_malloc_r+0x2d2>
   8321a:	f8d8 8000 	ldr.w	r8, [r8]
   8321e:	4598      	cmp	r8, r3
   83220:	d17c      	bne.n	8331c <_malloc_r+0x504>
   83222:	f010 0f03 	tst.w	r0, #3
   83226:	f1a8 0308 	sub.w	r3, r8, #8
   8322a:	f100 30ff 	add.w	r0, r0, #4294967295
   8322e:	d1f4      	bne.n	8321a <_malloc_r+0x402>
   83230:	687b      	ldr	r3, [r7, #4]
   83232:	ea23 0304 	bic.w	r3, r3, r4
   83236:	607b      	str	r3, [r7, #4]
   83238:	0064      	lsls	r4, r4, #1
   8323a:	429c      	cmp	r4, r3
   8323c:	f63f aec9 	bhi.w	82fd2 <_malloc_r+0x1ba>
   83240:	2c00      	cmp	r4, #0
   83242:	f43f aec6 	beq.w	82fd2 <_malloc_r+0x1ba>
   83246:	4223      	tst	r3, r4
   83248:	4648      	mov	r0, r9
   8324a:	f47f ae75 	bne.w	82f38 <_malloc_r+0x120>
   8324e:	0064      	lsls	r4, r4, #1
   83250:	4223      	tst	r3, r4
   83252:	f100 0004 	add.w	r0, r0, #4
   83256:	d0fa      	beq.n	8324e <_malloc_r+0x436>
   83258:	e66e      	b.n	82f38 <_malloc_r+0x120>
   8325a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   8325e:	d818      	bhi.n	83292 <_malloc_r+0x47a>
   83260:	0be8      	lsrs	r0, r5, #15
   83262:	3077      	adds	r0, #119	; 0x77
   83264:	0041      	lsls	r1, r0, #1
   83266:	e617      	b.n	82e98 <_malloc_r+0x80>
   83268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8326c:	e6fa      	b.n	83064 <_malloc_r+0x24c>
   8326e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   83272:	1092      	asrs	r2, r2, #2
   83274:	f04f 0c01 	mov.w	ip, #1
   83278:	fa0c f202 	lsl.w	r2, ip, r2
   8327c:	4313      	orrs	r3, r2
   8327e:	f8c8 3004 	str.w	r3, [r8, #4]
   83282:	460a      	mov	r2, r1
   83284:	e77d      	b.n	83182 <_malloc_r+0x36a>
   83286:	2301      	movs	r3, #1
   83288:	f8c9 3004 	str.w	r3, [r9, #4]
   8328c:	464c      	mov	r4, r9
   8328e:	2200      	movs	r2, #0
   83290:	e72b      	b.n	830ea <_malloc_r+0x2d2>
   83292:	f240 5354 	movw	r3, #1364	; 0x554
   83296:	4298      	cmp	r0, r3
   83298:	d81c      	bhi.n	832d4 <_malloc_r+0x4bc>
   8329a:	0ca8      	lsrs	r0, r5, #18
   8329c:	307c      	adds	r0, #124	; 0x7c
   8329e:	0041      	lsls	r1, r0, #1
   832a0:	e5fa      	b.n	82e98 <_malloc_r+0x80>
   832a2:	3210      	adds	r2, #16
   832a4:	e6b3      	b.n	8300e <_malloc_r+0x1f6>
   832a6:	2a54      	cmp	r2, #84	; 0x54
   832a8:	d823      	bhi.n	832f2 <_malloc_r+0x4da>
   832aa:	0b1a      	lsrs	r2, r3, #12
   832ac:	326e      	adds	r2, #110	; 0x6e
   832ae:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   832b2:	e754      	b.n	8315e <_malloc_r+0x346>
   832b4:	68bc      	ldr	r4, [r7, #8]
   832b6:	6862      	ldr	r2, [r4, #4]
   832b8:	f022 0203 	bic.w	r2, r2, #3
   832bc:	e715      	b.n	830ea <_malloc_r+0x2d2>
   832be:	f3cb 000b 	ubfx	r0, fp, #0, #12
   832c2:	2800      	cmp	r0, #0
   832c4:	f47f aeb8 	bne.w	83038 <_malloc_r+0x220>
   832c8:	4442      	add	r2, r8
   832ca:	68bb      	ldr	r3, [r7, #8]
   832cc:	f042 0201 	orr.w	r2, r2, #1
   832d0:	605a      	str	r2, [r3, #4]
   832d2:	e6fc      	b.n	830ce <_malloc_r+0x2b6>
   832d4:	21fc      	movs	r1, #252	; 0xfc
   832d6:	207e      	movs	r0, #126	; 0x7e
   832d8:	e5de      	b.n	82e98 <_malloc_r+0x80>
   832da:	2201      	movs	r2, #1
   832dc:	f04f 0a00 	mov.w	sl, #0
   832e0:	e6d3      	b.n	8308a <_malloc_r+0x272>
   832e2:	f104 0108 	add.w	r1, r4, #8
   832e6:	4630      	mov	r0, r6
   832e8:	f7ff fcb6 	bl	82c58 <_free_r>
   832ec:	f8da 1000 	ldr.w	r1, [sl]
   832f0:	e6ed      	b.n	830ce <_malloc_r+0x2b6>
   832f2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832f6:	d804      	bhi.n	83302 <_malloc_r+0x4ea>
   832f8:	0bda      	lsrs	r2, r3, #15
   832fa:	3277      	adds	r2, #119	; 0x77
   832fc:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83300:	e72d      	b.n	8315e <_malloc_r+0x346>
   83302:	f240 5154 	movw	r1, #1364	; 0x554
   83306:	428a      	cmp	r2, r1
   83308:	d804      	bhi.n	83314 <_malloc_r+0x4fc>
   8330a:	0c9a      	lsrs	r2, r3, #18
   8330c:	327c      	adds	r2, #124	; 0x7c
   8330e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83312:	e724      	b.n	8315e <_malloc_r+0x346>
   83314:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   83318:	227e      	movs	r2, #126	; 0x7e
   8331a:	e720      	b.n	8315e <_malloc_r+0x346>
   8331c:	687b      	ldr	r3, [r7, #4]
   8331e:	e78b      	b.n	83238 <_malloc_r+0x420>
   83320:	2007060c 	.word	0x2007060c

00083324 <__malloc_lock>:
   83324:	4770      	bx	lr
   83326:	bf00      	nop

00083328 <__malloc_unlock>:
   83328:	4770      	bx	lr
   8332a:	bf00      	nop

0008332c <_sbrk_r>:
   8332c:	b538      	push	{r3, r4, r5, lr}
   8332e:	4c07      	ldr	r4, [pc, #28]	; (8334c <_sbrk_r+0x20>)
   83330:	2300      	movs	r3, #0
   83332:	4605      	mov	r5, r0
   83334:	4608      	mov	r0, r1
   83336:	6023      	str	r3, [r4, #0]
   83338:	f7ff fb4c 	bl	829d4 <_sbrk>
   8333c:	1c43      	adds	r3, r0, #1
   8333e:	d000      	beq.n	83342 <_sbrk_r+0x16>
   83340:	bd38      	pop	{r3, r4, r5, pc}
   83342:	6823      	ldr	r3, [r4, #0]
   83344:	2b00      	cmp	r3, #0
   83346:	d0fb      	beq.n	83340 <_sbrk_r+0x14>
   83348:	602b      	str	r3, [r5, #0]
   8334a:	bd38      	pop	{r3, r4, r5, pc}
   8334c:	20070cb4 	.word	0x20070cb4

00083350 <__register_exitproc>:
   83350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83354:	4c25      	ldr	r4, [pc, #148]	; (833ec <__register_exitproc+0x9c>)
   83356:	4606      	mov	r6, r0
   83358:	6825      	ldr	r5, [r4, #0]
   8335a:	4688      	mov	r8, r1
   8335c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   83360:	4692      	mov	sl, r2
   83362:	4699      	mov	r9, r3
   83364:	b3c4      	cbz	r4, 833d8 <__register_exitproc+0x88>
   83366:	6860      	ldr	r0, [r4, #4]
   83368:	281f      	cmp	r0, #31
   8336a:	dc17      	bgt.n	8339c <__register_exitproc+0x4c>
   8336c:	1c41      	adds	r1, r0, #1
   8336e:	b176      	cbz	r6, 8338e <__register_exitproc+0x3e>
   83370:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   83374:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   83378:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   8337c:	2201      	movs	r2, #1
   8337e:	4082      	lsls	r2, r0
   83380:	4315      	orrs	r5, r2
   83382:	2e02      	cmp	r6, #2
   83384:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   83388:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8338c:	d01e      	beq.n	833cc <__register_exitproc+0x7c>
   8338e:	1c83      	adds	r3, r0, #2
   83390:	6061      	str	r1, [r4, #4]
   83392:	2000      	movs	r0, #0
   83394:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8339c:	4b14      	ldr	r3, [pc, #80]	; (833f0 <__register_exitproc+0xa0>)
   8339e:	b303      	cbz	r3, 833e2 <__register_exitproc+0x92>
   833a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   833a4:	f7ff fd30 	bl	82e08 <malloc>
   833a8:	4604      	mov	r4, r0
   833aa:	b1d0      	cbz	r0, 833e2 <__register_exitproc+0x92>
   833ac:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   833b0:	2700      	movs	r7, #0
   833b2:	e884 0088 	stmia.w	r4, {r3, r7}
   833b6:	4638      	mov	r0, r7
   833b8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   833bc:	2101      	movs	r1, #1
   833be:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   833c2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   833c6:	2e00      	cmp	r6, #0
   833c8:	d0e1      	beq.n	8338e <__register_exitproc+0x3e>
   833ca:	e7d1      	b.n	83370 <__register_exitproc+0x20>
   833cc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   833d0:	431a      	orrs	r2, r3
   833d2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   833d6:	e7da      	b.n	8338e <__register_exitproc+0x3e>
   833d8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   833dc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   833e0:	e7c1      	b.n	83366 <__register_exitproc+0x16>
   833e2:	f04f 30ff 	mov.w	r0, #4294967295
   833e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   833ea:	bf00      	nop
   833ec:	00083464 	.word	0x00083464
   833f0:	00082e09 	.word	0x00082e09

000833f4 <can_bit_time>:
   833f4:	02020308 02094b03 43020303 0303030a     .....K.....C....
   83404:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   83414:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   83424:	05050510 06114504 47040505 06060512     .....E.....G....
   83434:	06134304 44040606 06060714 08154604     .C.....D.....F..
   83444:	47040606 07070716 08174404 46040708     ...G.....D.....F
   83454:	08080718 08194304 44040808 00000043     .....C.....DC...

00083464 <_global_impure_ptr>:
   83464:	200701e0                                ... 

00083468 <_init>:
   83468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8346a:	bf00      	nop
   8346c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8346e:	bc08      	pop	{r3}
   83470:	469e      	mov	lr, r3
   83472:	4770      	bx	lr

00083474 <__init_array_start>:
   83474:	00082b71 	.word	0x00082b71

00083478 <__frame_dummy_init_array_entry>:
   83478:	00080119                                ....

0008347c <_fini>:
   8347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8347e:	bf00      	nop
   83480:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83482:	bc08      	pop	{r3}
   83484:	469e      	mov	lr, r3
   83486:	4770      	bx	lr

00083488 <__fini_array_start>:
   83488:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701dc 	.word	0x200701dc

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <udi_api_cdc_data>:
20070138:	00080515 000803d9 00080161 00080165     ........a...e...
20070148:	000803c9                                ....

2007014c <udi_api_cdc_comm>:
2007014c:	000801f1 00080151 00080169 00080165     ....Q...i...e...
2007015c:	00000000                                ....

20070160 <udc_config>:
20070160:	2007017c 20070174 00000000              |.. t.. ....

2007016c <udi_apis>:
2007016c:	2007014c 20070138                       L.. 8.. 

20070174 <udc_config_fs>:
20070174:	20070190 2007016c                       ... l.. 

2007017c <udc_device_desc>:
2007017c:	02000112 40000002 240403eb 00000100     .......@...$....
2007018c:	00000100                                ....

20070190 <udc_desc_fs>:
20070190:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701a0:	24050001 04011000 05020224 01000624     ...$....$...$...
200701b0:	03012405 83050701 10004003 00010409     .$.......@......
200701c0:	00000a02 81050700 00004002 02020507     .........@......
200701d0:	00000040                                @...

200701d4 <udc_string_desc_languageid>:
200701d4:	04090304                                ....

200701d8 <g_interrupt_enabled>:
200701d8:	00000001                                ....

200701dc <SystemCoreClock>:
200701dc:	003d0900                                ..=.

200701e0 <impure_data>:
200701e0:	00000000 200704cc 20070534 2007059c     ....... 4.. ... 
	...
20070214:	00083460 00000000 00000000 00000000     `4..............
	...
20070288:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070298:	0005deec 0000000b 00000000 00000000     ................
	...

20070608 <_impure_ptr>:
20070608:	200701e0                                ... 

2007060c <__malloc_av_>:
	...
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 

20070a14 <__malloc_trim_threshold>:
20070a14:	00020000                                ....

20070a18 <__malloc_sbrk_base>:
20070a18:	ffffffff                                ....
