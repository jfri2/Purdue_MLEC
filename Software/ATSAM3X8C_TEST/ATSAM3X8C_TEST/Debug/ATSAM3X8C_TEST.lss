
ATSAM3X8C_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035f4  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000a1c  20070000  000835f4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000029c  20070a1c  00084010  00010a1c  2**2
                  ALLOC
  3 .stack        00002000  20070cb8  000842ac  00010a1c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001072a  00000000  00000000  00010aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e66  00000000  00000000  000211ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000d88  00000000  00000000  00024030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_macro  00018bb7  00000000  00000000  00024db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00011a8e  00000000  00000000  0003d96f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00066d68  00000000  00000000  0004f3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007340  00000000  00000000  000b6165  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d40  00000000  00000000  000bd4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002118  00000000  00000000  000be1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072cb8 	.word	0x20072cb8
   80004:	00082935 	.word	0x00082935
   80008:	00082931 	.word	0x00082931
   8000c:	00082931 	.word	0x00082931
   80010:	00082931 	.word	0x00082931
   80014:	00082931 	.word	0x00082931
   80018:	00082931 	.word	0x00082931
	...
   8002c:	00082931 	.word	0x00082931
   80030:	00082931 	.word	0x00082931
   80034:	00000000 	.word	0x00000000
   80038:	00082931 	.word	0x00082931
   8003c:	00082931 	.word	0x00082931
   80040:	00082931 	.word	0x00082931
   80044:	00082931 	.word	0x00082931
   80048:	00082931 	.word	0x00082931
   8004c:	00082931 	.word	0x00082931
   80050:	00082931 	.word	0x00082931
   80054:	00082931 	.word	0x00082931
   80058:	00082931 	.word	0x00082931
   8005c:	00082931 	.word	0x00082931
   80060:	00082931 	.word	0x00082931
	...
   8006c:	00080e0d 	.word	0x00080e0d
   80070:	00080e21 	.word	0x00080e21
	...
   80084:	00082931 	.word	0x00082931
   80088:	00082931 	.word	0x00082931
   8008c:	00082931 	.word	0x00082931
   80090:	00000000 	.word	0x00000000
   80094:	00082931 	.word	0x00082931
   80098:	00082931 	.word	0x00082931
   8009c:	00082931 	.word	0x00082931
   800a0:	00082931 	.word	0x00082931
   800a4:	00000000 	.word	0x00000000
   800a8:	00082931 	.word	0x00082931
   800ac:	00082931 	.word	0x00082931
   800b0:	00082931 	.word	0x00082931
   800b4:	00082931 	.word	0x00082931
   800b8:	00082931 	.word	0x00082931
   800bc:	00082931 	.word	0x00082931
   800c0:	00082931 	.word	0x00082931
	...
   800d0:	00082931 	.word	0x00082931
   800d4:	00082931 	.word	0x00082931
   800d8:	00082931 	.word	0x00082931
   800dc:	00082931 	.word	0x00082931
   800e0:	00081be5 	.word	0x00081be5
   800e4:	00082931 	.word	0x00082931
   800e8:	00082931 	.word	0x00082931
   800ec:	00082931 	.word	0x00082931
   800f0:	00082931 	.word	0x00082931

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070a1c 	.word	0x20070a1c
   80110:	00000000 	.word	0x00000000
   80114:	000835f4 	.word	0x000835f4

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000835f4 	.word	0x000835f4
   80144:	20070a20 	.word	0x20070a20
   80148:	000835f4 	.word	0x000835f4
   8014c:	00000000 	.word	0x00000000

00080150 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   80150:	4a02      	ldr	r2, [pc, #8]	; (8015c <udi_cdc_comm_disable+0xc>)
   80152:	7813      	ldrb	r3, [r2, #0]
   80154:	3b01      	subs	r3, #1
   80156:	b2db      	uxtb	r3, r3
   80158:	7013      	strb	r3, [r2, #0]
   8015a:	4770      	bx	lr
   8015c:	20070ad0 	.word	0x20070ad0

00080160 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
   80160:	2000      	movs	r0, #0
   80162:	4770      	bx	lr

00080164 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
   80164:	2000      	movs	r0, #0
   80166:	4770      	bx	lr

00080168 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
	uint8_t port = udi_cdc_setup_to_port();

	if (Udd_setup_is_in()) {
   80168:	4b1d      	ldr	r3, [pc, #116]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8016a:	781b      	ldrb	r3, [r3, #0]
   8016c:	f013 0f80 	tst.w	r3, #128	; 0x80
   80170:	d012      	beq.n	80198 <udi_cdc_comm_setup+0x30>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80172:	f003 0360 	and.w	r3, r3, #96	; 0x60
   80176:	2b20      	cmp	r3, #32
   80178:	d128      	bne.n	801cc <udi_cdc_comm_setup+0x64>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
   8017a:	4b19      	ldr	r3, [pc, #100]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8017c:	785b      	ldrb	r3, [r3, #1]
   8017e:	2b21      	cmp	r3, #33	; 0x21
   80180:	d126      	bne.n	801d0 <udi_cdc_comm_setup+0x68>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   80182:	4b17      	ldr	r3, [pc, #92]	; (801e0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   80184:	88db      	ldrh	r3, [r3, #6]
   80186:	2b07      	cmp	r3, #7
   80188:	d124      	bne.n	801d4 <udi_cdc_comm_setup+0x6c>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
   8018a:	4b15      	ldr	r3, [pc, #84]	; (801e0 <udi_cdc_comm_setup+0x78>)
   8018c:	4a15      	ldr	r2, [pc, #84]	; (801e4 <udi_cdc_comm_setup+0x7c>)
   8018e:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   80190:	2207      	movs	r2, #7
   80192:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   80194:	2001      	movs	r0, #1
   80196:	4770      	bx	lr
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   80198:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8019c:	2b20      	cmp	r3, #32
   8019e:	d11b      	bne.n	801d8 <udi_cdc_comm_setup+0x70>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
   801a0:	4b0f      	ldr	r3, [pc, #60]	; (801e0 <udi_cdc_comm_setup+0x78>)
   801a2:	7858      	ldrb	r0, [r3, #1]
   801a4:	2820      	cmp	r0, #32
   801a6:	d004      	beq.n	801b2 <udi_cdc_comm_setup+0x4a>
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801a8:	2822      	cmp	r0, #34	; 0x22
   801aa:	bf14      	ite	ne
   801ac:	2000      	movne	r0, #0
   801ae:	2001      	moveq	r0, #1
   801b0:	4770      	bx	lr
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
   801b2:	4b0b      	ldr	r3, [pc, #44]	; (801e0 <udi_cdc_comm_setup+0x78>)
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
   801b4:	88db      	ldrh	r3, [r3, #6]
   801b6:	2b07      	cmp	r3, #7
   801b8:	d110      	bne.n	801dc <udi_cdc_comm_setup+0x74>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
   801ba:	4b09      	ldr	r3, [pc, #36]	; (801e0 <udi_cdc_comm_setup+0x78>)
   801bc:	4a0a      	ldr	r2, [pc, #40]	; (801e8 <udi_cdc_comm_setup+0x80>)
   801be:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
   801c0:	4a08      	ldr	r2, [pc, #32]	; (801e4 <udi_cdc_comm_setup+0x7c>)
   801c2:	609a      	str	r2, [r3, #8]
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
   801c4:	2207      	movs	r2, #7
   801c6:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
   801c8:	2001      	movs	r0, #1
   801ca:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801cc:	2000      	movs	r0, #0
   801ce:	4770      	bx	lr
   801d0:	2000      	movs	r0, #0
   801d2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   801d4:	2000      	movs	r0, #0
   801d6:	4770      	bx	lr
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
			}
		}
	}
	return false;  // request Not supported
   801d8:	2000      	movs	r0, #0
   801da:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
   801dc:	2000      	movs	r0, #0
				return true;
			}
		}
	}
	return false;  // request Not supported
}
   801de:	4770      	bx	lr
   801e0:	20070c9c 	.word	0x20070c9c
   801e4:	20070a3c 	.word	0x20070a3c
   801e8:	000801ed 	.word	0x000801ed

000801ec <udi_cdc_line_coding_received>:
	}
	return port;
}

static void udi_cdc_line_coding_received(void)
{
   801ec:	4770      	bx	lr
   801ee:	bf00      	nop

000801f0 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
   801f0:	b508      	push	{r3, lr}
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
   801f2:	2300      	movs	r3, #0
   801f4:	4a10      	ldr	r2, [pc, #64]	; (80238 <udi_cdc_comm_enable+0x48>)
   801f6:	7013      	strb	r3, [r2, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
   801f8:	4a10      	ldr	r2, [pc, #64]	; (8023c <udi_cdc_comm_enable+0x4c>)
   801fa:	8013      	strh	r3, [r2, #0]

	uid_cdc_state_msg[port].header.bmRequestType =
   801fc:	4a10      	ldr	r2, [pc, #64]	; (80240 <udi_cdc_comm_enable+0x50>)
   801fe:	21a1      	movs	r1, #161	; 0xa1
   80200:	7011      	strb	r1, [r2, #0]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
   80202:	2120      	movs	r1, #32
   80204:	7051      	strb	r1, [r2, #1]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   80206:	8053      	strh	r3, [r2, #2]
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   80208:	8093      	strh	r3, [r2, #4]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8020a:	2102      	movs	r1, #2
   8020c:	80d1      	strh	r1, [r2, #6]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8020e:	8113      	strh	r3, [r2, #8]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   80210:	4a0c      	ldr	r2, [pc, #48]	; (80244 <udi_cdc_comm_enable+0x54>)
   80212:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   80216:	6011      	str	r1, [r2, #0]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   80218:	7113      	strb	r3, [r2, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8021a:	7153      	strb	r3, [r2, #5]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8021c:	2308      	movs	r3, #8
   8021e:	7193      	strb	r3, [r2, #6]
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
   80220:	4b09      	ldr	r3, [pc, #36]	; (80248 <udi_cdc_comm_enable+0x58>)
   80222:	4798      	blx	r3
   80224:	4602      	mov	r2, r0
   80226:	b120      	cbz	r0, 80232 <udi_cdc_comm_enable+0x42>
		return false;
	}
	udi_cdc_nb_comm_enabled++;
   80228:	4903      	ldr	r1, [pc, #12]	; (80238 <udi_cdc_comm_enable+0x48>)
   8022a:	780b      	ldrb	r3, [r1, #0]
   8022c:	3301      	adds	r3, #1
   8022e:	b2db      	uxtb	r3, r3
   80230:	700b      	strb	r3, [r1, #0]
	return true;
}
   80232:	4610      	mov	r0, r2
   80234:	bd08      	pop	{r3, pc}
   80236:	bf00      	nop
   80238:	20070ad0 	.word	0x20070ad0
   8023c:	20070b74 	.word	0x20070b74
   80240:	20070ae0 	.word	0x20070ae0
   80244:	20070a3c 	.word	0x20070a3c
   80248:	00082c45 	.word	0x00082c45

0008024c <udi_cdc_tx_send>:

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   8024c:	4b42      	ldr	r3, [pc, #264]	; (80358 <udi_cdc_tx_send+0x10c>)
   8024e:	781b      	ldrb	r3, [r3, #0]
   80250:	f013 0fff 	tst.w	r3, #255	; 0xff
   80254:	d17f      	bne.n	80356 <udi_cdc_tx_send+0x10a>
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   80256:	b530      	push	{r4, r5, lr}
   80258:	b083      	sub	sp, #12
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
   8025a:	4b40      	ldr	r3, [pc, #256]	; (8035c <udi_cdc_tx_send+0x110>)
   8025c:	4798      	blx	r3
   8025e:	b130      	cbz	r0, 8026e <udi_cdc_tx_send+0x22>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   80260:	4b3f      	ldr	r3, [pc, #252]	; (80360 <udi_cdc_tx_send+0x114>)
   80262:	881c      	ldrh	r4, [r3, #0]
   80264:	4b3f      	ldr	r3, [pc, #252]	; (80364 <udi_cdc_tx_send+0x118>)
   80266:	4798      	blx	r3
   80268:	4284      	cmp	r4, r0
   8026a:	d106      	bne.n	8027a <udi_cdc_tx_send+0x2e>
   8026c:	e071      	b.n	80352 <udi_cdc_tx_send+0x106>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8026e:	4b3c      	ldr	r3, [pc, #240]	; (80360 <udi_cdc_tx_send+0x114>)
   80270:	881c      	ldrh	r4, [r3, #0]
   80272:	4b3d      	ldr	r3, [pc, #244]	; (80368 <udi_cdc_tx_send+0x11c>)
   80274:	4798      	blx	r3
   80276:	4284      	cmp	r4, r0
   80278:	d06b      	beq.n	80352 <udi_cdc_tx_send+0x106>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8027a:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8027e:	fab5 f585 	clz	r5, r5
   80282:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80284:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80286:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8028a:	2200      	movs	r2, #0
   8028c:	4b37      	ldr	r3, [pc, #220]	; (8036c <udi_cdc_tx_send+0x120>)
   8028e:	701a      	strb	r2, [r3, #0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   80290:	4b37      	ldr	r3, [pc, #220]	; (80370 <udi_cdc_tx_send+0x124>)
   80292:	781c      	ldrb	r4, [r3, #0]
   80294:	b2e4      	uxtb	r4, r4
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   80296:	4b37      	ldr	r3, [pc, #220]	; (80374 <udi_cdc_tx_send+0x128>)
   80298:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
   8029c:	b9db      	cbnz	r3, 802d6 <udi_cdc_tx_send+0x8a>
		sof_zlp_counter++;
   8029e:	4a36      	ldr	r2, [pc, #216]	; (80378 <udi_cdc_tx_send+0x12c>)
   802a0:	8813      	ldrh	r3, [r2, #0]
   802a2:	3301      	adds	r3, #1
   802a4:	8013      	strh	r3, [r2, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   802a6:	4b2d      	ldr	r3, [pc, #180]	; (8035c <udi_cdc_tx_send+0x110>)
   802a8:	4798      	blx	r3
   802aa:	b918      	cbnz	r0, 802b4 <udi_cdc_tx_send+0x68>
   802ac:	4b32      	ldr	r3, [pc, #200]	; (80378 <udi_cdc_tx_send+0x12c>)
   802ae:	881b      	ldrh	r3, [r3, #0]
   802b0:	2b63      	cmp	r3, #99	; 0x63
   802b2:	d907      	bls.n	802c4 <udi_cdc_tx_send+0x78>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   802b4:	4b29      	ldr	r3, [pc, #164]	; (8035c <udi_cdc_tx_send+0x110>)
   802b6:	4798      	blx	r3
   802b8:	b168      	cbz	r0, 802d6 <udi_cdc_tx_send+0x8a>
   802ba:	4b2f      	ldr	r3, [pc, #188]	; (80378 <udi_cdc_tx_send+0x12c>)
   802bc:	881b      	ldrh	r3, [r3, #0]
   802be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   802c2:	d208      	bcs.n	802d6 <udi_cdc_tx_send+0x8a>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   802c4:	2d00      	cmp	r5, #0
   802c6:	d044      	beq.n	80352 <udi_cdc_tx_send+0x106>
		cpu_irq_enable();
   802c8:	2201      	movs	r2, #1
   802ca:	4b28      	ldr	r3, [pc, #160]	; (8036c <udi_cdc_tx_send+0x120>)
   802cc:	701a      	strb	r2, [r3, #0]
   802ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   802d2:	b662      	cpsie	i
   802d4:	e03d      	b.n	80352 <udi_cdc_tx_send+0x106>
			cpu_irq_restore(flags);
			return;
		}
	}
	sof_zlp_counter = 0;
   802d6:	2200      	movs	r2, #0
   802d8:	4b27      	ldr	r3, [pc, #156]	; (80378 <udi_cdc_tx_send+0x12c>)
   802da:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
   802dc:	4b27      	ldr	r3, [pc, #156]	; (8037c <udi_cdc_tx_send+0x130>)
   802de:	781b      	ldrb	r3, [r3, #0]
   802e0:	f013 0fff 	tst.w	r3, #255	; 0xff
   802e4:	d105      	bne.n	802f2 <udi_cdc_tx_send+0xa6>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   802e6:	fab4 f384 	clz	r3, r4
   802ea:	095b      	lsrs	r3, r3, #5
   802ec:	4a20      	ldr	r2, [pc, #128]	; (80370 <udi_cdc_tx_send+0x124>)
   802ee:	7013      	strb	r3, [r2, #0]
   802f0:	e002      	b.n	802f8 <udi_cdc_tx_send+0xac>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   802f2:	fab4 f484 	clz	r4, r4
   802f6:	0964      	lsrs	r4, r4, #5
	}
	udi_cdc_tx_trans_ongoing[port] = true;
   802f8:	2201      	movs	r2, #1
   802fa:	4b17      	ldr	r3, [pc, #92]	; (80358 <udi_cdc_tx_send+0x10c>)
   802fc:	701a      	strb	r2, [r3, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   802fe:	b125      	cbz	r5, 8030a <udi_cdc_tx_send+0xbe>
		cpu_irq_enable();
   80300:	4b1a      	ldr	r3, [pc, #104]	; (8036c <udi_cdc_tx_send+0x120>)
   80302:	701a      	strb	r2, [r3, #0]
   80304:	f3bf 8f5f 	dmb	sy
   80308:	b662      	cpsie	i
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8030a:	4625      	mov	r5, r4
   8030c:	4b19      	ldr	r3, [pc, #100]	; (80374 <udi_cdc_tx_send+0x128>)
   8030e:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
   80312:	3c40      	subs	r4, #64	; 0x40
   80314:	bf18      	it	ne
   80316:	2401      	movne	r4, #1
	if (b_short_packet) {
   80318:	b164      	cbz	r4, 80334 <udi_cdc_tx_send+0xe8>
		if (udd_is_high_speed()) {
   8031a:	4b10      	ldr	r3, [pc, #64]	; (8035c <udi_cdc_tx_send+0x110>)
   8031c:	4798      	blx	r3
   8031e:	b120      	cbz	r0, 8032a <udi_cdc_tx_send+0xde>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   80320:	4b10      	ldr	r3, [pc, #64]	; (80364 <udi_cdc_tx_send+0x118>)
   80322:	4798      	blx	r3
   80324:	4b0e      	ldr	r3, [pc, #56]	; (80360 <udi_cdc_tx_send+0x114>)
   80326:	8018      	strh	r0, [r3, #0]
   80328:	e007      	b.n	8033a <udi_cdc_tx_send+0xee>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   8032a:	4b0f      	ldr	r3, [pc, #60]	; (80368 <udi_cdc_tx_send+0x11c>)
   8032c:	4798      	blx	r3
   8032e:	4b0c      	ldr	r3, [pc, #48]	; (80360 <udi_cdc_tx_send+0x114>)
   80330:	8018      	strh	r0, [r3, #0]
   80332:	e002      	b.n	8033a <udi_cdc_tx_send+0xee>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   80334:	2200      	movs	r2, #0
   80336:	4b0a      	ldr	r3, [pc, #40]	; (80360 <udi_cdc_tx_send+0x114>)
   80338:	801a      	strh	r2, [r3, #0]
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8033a:	4b0e      	ldr	r3, [pc, #56]	; (80374 <udi_cdc_tx_send+0x128>)
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
   8033c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
   80340:	4a0f      	ldr	r2, [pc, #60]	; (80380 <udi_cdc_tx_send+0x134>)
   80342:	9200      	str	r2, [sp, #0]
   80344:	2081      	movs	r0, #129	; 0x81
   80346:	4621      	mov	r1, r4
   80348:	4a0e      	ldr	r2, [pc, #56]	; (80384 <udi_cdc_tx_send+0x138>)
   8034a:	eb02 1285 	add.w	r2, r2, r5, lsl #6
   8034e:	4c0e      	ldr	r4, [pc, #56]	; (80388 <udi_cdc_tx_send+0x13c>)
   80350:	47a0      	blx	r4
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   80352:	b003      	add	sp, #12
   80354:	bd30      	pop	{r4, r5, pc}
   80356:	4770      	bx	lr
   80358:	20070adc 	.word	0x20070adc
   8035c:	00082211 	.word	0x00082211
   80360:	20070ad4 	.word	0x20070ad4
   80364:	0008225d 	.word	0x0008225d
   80368:	0008224d 	.word	0x0008224d
   8036c:	200701d8 	.word	0x200701d8
   80370:	20070a44 	.word	0x20070a44
   80374:	20070a48 	.word	0x20070a48
   80378:	20070ad2 	.word	0x20070ad2
   8037c:	20070b70 	.word	0x20070b70
   80380:	0008038d 	.word	0x0008038d
   80384:	20070a4c 	.word	0x20070a4c
   80388:	000824b9 	.word	0x000824b9

0008038c <udi_cdc_data_sent>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   8038c:	b988      	cbnz	r0, 803b2 <udi_cdc_data_sent+0x26>
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   8038e:	b508      	push	{r3, lr}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   80390:	4b08      	ldr	r3, [pc, #32]	; (803b4 <udi_cdc_data_sent+0x28>)
   80392:	781b      	ldrb	r3, [r3, #0]
   80394:	f013 0fff 	tst.w	r3, #255	; 0xff
   80398:	bf0c      	ite	eq
   8039a:	2201      	moveq	r2, #1
   8039c:	2200      	movne	r2, #0
   8039e:	4b06      	ldr	r3, [pc, #24]	; (803b8 <udi_cdc_data_sent+0x2c>)
   803a0:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
	udi_cdc_tx_both_buf_to_send[port] = false;
   803a4:	4b05      	ldr	r3, [pc, #20]	; (803bc <udi_cdc_data_sent+0x30>)
   803a6:	7018      	strb	r0, [r3, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   803a8:	4b05      	ldr	r3, [pc, #20]	; (803c0 <udi_cdc_data_sent+0x34>)
   803aa:	7018      	strb	r0, [r3, #0]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
   803ac:	4b05      	ldr	r3, [pc, #20]	; (803c4 <udi_cdc_data_sent+0x38>)
   803ae:	4798      	blx	r3
   803b0:	bd08      	pop	{r3, pc}
   803b2:	4770      	bx	lr
   803b4:	20070a44 	.word	0x20070a44
   803b8:	20070a48 	.word	0x20070a48
   803bc:	20070b70 	.word	0x20070b70
   803c0:	20070adc 	.word	0x20070adc
   803c4:	0008024d 	.word	0x0008024d

000803c8 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
   803c8:	b508      	push	{r3, lr}
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
   803ca:	2000      	movs	r0, #0
   803cc:	4b01      	ldr	r3, [pc, #4]	; (803d4 <udi_cdc_data_sof_notify+0xc>)
   803ce:	4798      	blx	r3
   803d0:	bd08      	pop	{r3, pc}
   803d2:	bf00      	nop
   803d4:	0008024d 	.word	0x0008024d

000803d8 <udi_cdc_data_disable>:
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
}

void udi_cdc_data_disable(void)
{
   803d8:	b508      	push	{r3, lr}
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
   803da:	4a06      	ldr	r2, [pc, #24]	; (803f4 <udi_cdc_data_disable+0x1c>)
   803dc:	7813      	ldrb	r3, [r2, #0]
   803de:	3b01      	subs	r3, #1
   803e0:	b2db      	uxtb	r3, r3
   803e2:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   803e4:	7813      	ldrb	r3, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   803e6:	4b04      	ldr	r3, [pc, #16]	; (803f8 <udi_cdc_data_disable+0x20>)
   803e8:	4798      	blx	r3
	udi_cdc_data_running = false;
   803ea:	2200      	movs	r2, #0
   803ec:	4b03      	ldr	r3, [pc, #12]	; (803fc <udi_cdc_data_disable+0x24>)
   803ee:	701a      	strb	r2, [r3, #0]
   803f0:	bd08      	pop	{r3, pc}
   803f2:	bf00      	nop
   803f4:	20070a43 	.word	0x20070a43
   803f8:	00082c51 	.word	0x00082c51
   803fc:	20070ad6 	.word	0x20070ad6

00080400 <udi_cdc_multi_get_nb_received_data>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80400:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80404:	b672      	cpsid	i
   80406:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   8040a:	2100      	movs	r1, #0
   8040c:	4b0a      	ldr	r3, [pc, #40]	; (80438 <udi_cdc_multi_get_nb_received_data+0x38>)
   8040e:	7019      	strb	r1, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   80410:	4b0a      	ldr	r3, [pc, #40]	; (8043c <udi_cdc_multi_get_nb_received_data+0x3c>)
   80412:	8818      	ldrh	r0, [r3, #0]
   80414:	b280      	uxth	r0, r0
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   80416:	4b0a      	ldr	r3, [pc, #40]	; (80440 <udi_cdc_multi_get_nb_received_data+0x40>)
   80418:	781b      	ldrb	r3, [r3, #0]
   8041a:	b2db      	uxtb	r3, r3
   8041c:	4909      	ldr	r1, [pc, #36]	; (80444 <udi_cdc_multi_get_nb_received_data+0x44>)
   8041e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   80422:	b29b      	uxth	r3, r3
   80424:	1a18      	subs	r0, r3, r0
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80426:	b92a      	cbnz	r2, 80434 <udi_cdc_multi_get_nb_received_data+0x34>
		cpu_irq_enable();
   80428:	2201      	movs	r2, #1
   8042a:	4b03      	ldr	r3, [pc, #12]	; (80438 <udi_cdc_multi_get_nb_received_data+0x38>)
   8042c:	701a      	strb	r2, [r3, #0]
   8042e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   80432:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   80434:	4770      	bx	lr
   80436:	bf00      	nop
   80438:	200701d8 	.word	0x200701d8
   8043c:	20070a38 	.word	0x20070a38
   80440:	20070ad8 	.word	0x20070ad8
   80444:	20070acc 	.word	0x20070acc

00080448 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
   80448:	b508      	push	{r3, lr}
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
   8044a:	4b03      	ldr	r3, [pc, #12]	; (80458 <udi_cdc_multi_is_rx_ready+0x10>)
   8044c:	4798      	blx	r3
}
   8044e:	3000      	adds	r0, #0
   80450:	bf18      	it	ne
   80452:	2001      	movne	r0, #1
   80454:	bd08      	pop	{r3, pc}
   80456:	bf00      	nop
   80458:	00080401 	.word	0x00080401

0008045c <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
   8045c:	b510      	push	{r4, lr}
   8045e:	b082      	sub	sp, #8
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   80460:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   80464:	fab3 f383 	clz	r3, r3
   80468:	095b      	lsrs	r3, r3, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8046a:	b672      	cpsid	i
   8046c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80470:	2100      	movs	r1, #0
   80472:	4a1f      	ldr	r2, [pc, #124]	; (804f0 <udi_cdc_rx_start+0x94>)
   80474:	7011      	strb	r1, [r2, #0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   80476:	4a1f      	ldr	r2, [pc, #124]	; (804f4 <udi_cdc_rx_start+0x98>)
   80478:	7812      	ldrb	r2, [r2, #0]
   8047a:	b2d4      	uxtb	r4, r2
	if (udi_cdc_rx_trans_ongoing[port] ||
   8047c:	4a1e      	ldr	r2, [pc, #120]	; (804f8 <udi_cdc_rx_start+0x9c>)
   8047e:	7812      	ldrb	r2, [r2, #0]
   80480:	f012 0fff 	tst.w	r2, #255	; 0xff
   80484:	d108      	bne.n	80498 <udi_cdc_rx_start+0x3c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   80486:	4a1d      	ldr	r2, [pc, #116]	; (804fc <udi_cdc_rx_start+0xa0>)
   80488:	8811      	ldrh	r1, [r2, #0]
   8048a:	b289      	uxth	r1, r1
   8048c:	4a1c      	ldr	r2, [pc, #112]	; (80500 <udi_cdc_rx_start+0xa4>)
   8048e:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
   80492:	b292      	uxth	r2, r2
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
   80494:	4291      	cmp	r1, r2
   80496:	d208      	bcs.n	804aa <udi_cdc_rx_start+0x4e>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80498:	b333      	cbz	r3, 804e8 <udi_cdc_rx_start+0x8c>
		cpu_irq_enable();
   8049a:	2201      	movs	r2, #1
   8049c:	4b14      	ldr	r3, [pc, #80]	; (804f0 <udi_cdc_rx_start+0x94>)
   8049e:	701a      	strb	r2, [r3, #0]
   804a0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   804a4:	b662      	cpsie	i
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   804a6:	2000      	movs	r0, #0
   804a8:	e01f      	b.n	804ea <udi_cdc_rx_start+0x8e>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
   804aa:	2100      	movs	r1, #0
   804ac:	4a13      	ldr	r2, [pc, #76]	; (804fc <udi_cdc_rx_start+0xa0>)
   804ae:	8011      	strh	r1, [r2, #0]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   804b0:	fab4 f284 	clz	r2, r4
   804b4:	0952      	lsrs	r2, r2, #5
   804b6:	490f      	ldr	r1, [pc, #60]	; (804f4 <udi_cdc_rx_start+0x98>)
   804b8:	700a      	strb	r2, [r1, #0]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
   804ba:	2101      	movs	r1, #1
   804bc:	4a0e      	ldr	r2, [pc, #56]	; (804f8 <udi_cdc_rx_start+0x9c>)
   804be:	7011      	strb	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   804c0:	b123      	cbz	r3, 804cc <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   804c2:	4b0b      	ldr	r3, [pc, #44]	; (804f0 <udi_cdc_rx_start+0x94>)
   804c4:	7019      	strb	r1, [r3, #0]
   804c6:	f3bf 8f5f 	dmb	sy
   804ca:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
   804cc:	2000      	movs	r0, #0
   804ce:	4b0d      	ldr	r3, [pc, #52]	; (80504 <udi_cdc_rx_start+0xa8>)
   804d0:	4798      	blx	r3
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
   804d2:	4b0d      	ldr	r3, [pc, #52]	; (80508 <udi_cdc_rx_start+0xac>)
   804d4:	9300      	str	r3, [sp, #0]
   804d6:	2002      	movs	r0, #2
   804d8:	2101      	movs	r1, #1
   804da:	4a0c      	ldr	r2, [pc, #48]	; (8050c <udi_cdc_rx_start+0xb0>)
   804dc:	eb02 1284 	add.w	r2, r2, r4, lsl #6
   804e0:	2340      	movs	r3, #64	; 0x40
   804e2:	4c0b      	ldr	r4, [pc, #44]	; (80510 <udi_cdc_rx_start+0xb4>)
   804e4:	47a0      	blx	r4
   804e6:	e000      	b.n	804ea <udi_cdc_rx_start+0x8e>
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
   804e8:	2000      	movs	r0, #0
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
   804ea:	b002      	add	sp, #8
   804ec:	bd10      	pop	{r4, pc}
   804ee:	bf00      	nop
   804f0:	200701d8 	.word	0x200701d8
   804f4:	20070ad8 	.word	0x20070ad8
   804f8:	20070b6c 	.word	0x20070b6c
   804fc:	20070a38 	.word	0x20070a38
   80500:	20070acc 	.word	0x20070acc
   80504:	00080449 	.word	0x00080449
   80508:	000805a5 	.word	0x000805a5
   8050c:	20070aec 	.word	0x20070aec
   80510:	000824b9 	.word	0x000824b9

00080514 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
   80514:	b510      	push	{r4, lr}
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
   80516:	2400      	movs	r4, #0
   80518:	4b15      	ldr	r3, [pc, #84]	; (80570 <udi_cdc_data_enable+0x5c>)
   8051a:	701c      	strb	r4, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
   8051c:	4b15      	ldr	r3, [pc, #84]	; (80574 <udi_cdc_data_enable+0x60>)
   8051e:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   80520:	4b15      	ldr	r3, [pc, #84]	; (80578 <udi_cdc_data_enable+0x64>)
   80522:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_sel[port] = 0;
   80524:	4b15      	ldr	r3, [pc, #84]	; (8057c <udi_cdc_data_enable+0x68>)
   80526:	701c      	strb	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][0] = 0;
   80528:	4b15      	ldr	r3, [pc, #84]	; (80580 <udi_cdc_data_enable+0x6c>)
   8052a:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_buf_nb[port][1] = 0;
   8052c:	805c      	strh	r4, [r3, #2]
	udi_cdc_tx_sof_num[port] = 0;
   8052e:	4b15      	ldr	r3, [pc, #84]	; (80584 <udi_cdc_data_enable+0x70>)
   80530:	801c      	strh	r4, [r3, #0]
	udi_cdc_tx_send(port);
   80532:	4620      	mov	r0, r4
   80534:	4b14      	ldr	r3, [pc, #80]	; (80588 <udi_cdc_data_enable+0x74>)
   80536:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
   80538:	4b14      	ldr	r3, [pc, #80]	; (8058c <udi_cdc_data_enable+0x78>)
   8053a:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_sel[port] = 0;
   8053c:	4b14      	ldr	r3, [pc, #80]	; (80590 <udi_cdc_data_enable+0x7c>)
   8053e:	701c      	strb	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][0] = 0;
   80540:	4b14      	ldr	r3, [pc, #80]	; (80594 <udi_cdc_data_enable+0x80>)
   80542:	801c      	strh	r4, [r3, #0]
	udi_cdc_rx_buf_nb[port][1] = 0;
   80544:	805c      	strh	r4, [r3, #2]
	udi_cdc_rx_pos[port] = 0;
   80546:	4b14      	ldr	r3, [pc, #80]	; (80598 <udi_cdc_data_enable+0x84>)
   80548:	801c      	strh	r4, [r3, #0]
	if (!udi_cdc_rx_start(port)) {
   8054a:	4620      	mov	r0, r4
   8054c:	4b13      	ldr	r3, [pc, #76]	; (8059c <udi_cdc_data_enable+0x88>)
   8054e:	4798      	blx	r3
   80550:	4601      	mov	r1, r0
   80552:	b158      	cbz	r0, 8056c <udi_cdc_data_enable+0x58>
		return false;
	}
	udi_cdc_nb_data_enabled++;
   80554:	4a06      	ldr	r2, [pc, #24]	; (80570 <udi_cdc_data_enable+0x5c>)
   80556:	7813      	ldrb	r3, [r2, #0]
   80558:	3301      	adds	r3, #1
   8055a:	b2db      	uxtb	r3, r3
   8055c:	7013      	strb	r3, [r2, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8055e:	7813      	ldrb	r3, [r2, #0]
   80560:	b2db      	uxtb	r3, r3
   80562:	2b01      	cmp	r3, #1
   80564:	d102      	bne.n	8056c <udi_cdc_data_enable+0x58>
		udi_cdc_data_running = true;
   80566:	2201      	movs	r2, #1
   80568:	4b0d      	ldr	r3, [pc, #52]	; (805a0 <udi_cdc_data_enable+0x8c>)
   8056a:	701a      	strb	r2, [r3, #0]
	}
	return true;
}
   8056c:	4608      	mov	r0, r1
   8056e:	bd10      	pop	{r4, pc}
   80570:	20070a43 	.word	0x20070a43
   80574:	20070adc 	.word	0x20070adc
   80578:	20070b70 	.word	0x20070b70
   8057c:	20070a44 	.word	0x20070a44
   80580:	20070a48 	.word	0x20070a48
   80584:	20070ad4 	.word	0x20070ad4
   80588:	0008024d 	.word	0x0008024d
   8058c:	20070b6c 	.word	0x20070b6c
   80590:	20070ad8 	.word	0x20070ad8
   80594:	20070acc 	.word	0x20070acc
   80598:	20070a38 	.word	0x20070a38
   8059c:	0008045d 	.word	0x0008045d
   805a0:	20070ad6 	.word	0x20070ad6

000805a4 <udi_cdc_data_received>:
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
   805a4:	b9f8      	cbnz	r0, 805e6 <udi_cdc_data_received+0x42>
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
   805a6:	b510      	push	{r4, lr}
   805a8:	b082      	sub	sp, #8

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   805aa:	4b0f      	ldr	r3, [pc, #60]	; (805e8 <udi_cdc_data_received+0x44>)
   805ac:	781b      	ldrb	r3, [r3, #0]
   805ae:	f013 0fff 	tst.w	r3, #255	; 0xff
   805b2:	bf0c      	ite	eq
   805b4:	2301      	moveq	r3, #1
   805b6:	2300      	movne	r3, #0
	if (!n) {
   805b8:	b951      	cbnz	r1, 805d0 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
   805ba:	490c      	ldr	r1, [pc, #48]	; (805ec <udi_cdc_data_received+0x48>)
   805bc:	9100      	str	r1, [sp, #0]
   805be:	4610      	mov	r0, r2
   805c0:	2101      	movs	r1, #1
   805c2:	4a0b      	ldr	r2, [pc, #44]	; (805f0 <udi_cdc_data_received+0x4c>)
   805c4:	eb02 1283 	add.w	r2, r2, r3, lsl #6
   805c8:	2340      	movs	r3, #64	; 0x40
   805ca:	4c0a      	ldr	r4, [pc, #40]	; (805f4 <udi_cdc_data_received+0x50>)
   805cc:	47a0      	blx	r4
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
   805ce:	e008      	b.n	805e2 <udi_cdc_data_received+0x3e>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   805d0:	b289      	uxth	r1, r1
   805d2:	4a09      	ldr	r2, [pc, #36]	; (805f8 <udi_cdc_data_received+0x54>)
   805d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   805d8:	2000      	movs	r0, #0
   805da:	4b08      	ldr	r3, [pc, #32]	; (805fc <udi_cdc_data_received+0x58>)
   805dc:	7018      	strb	r0, [r3, #0]
	udi_cdc_rx_start(port);
   805de:	4b08      	ldr	r3, [pc, #32]	; (80600 <udi_cdc_data_received+0x5c>)
   805e0:	4798      	blx	r3
}
   805e2:	b002      	add	sp, #8
   805e4:	bd10      	pop	{r4, pc}
   805e6:	4770      	bx	lr
   805e8:	20070ad8 	.word	0x20070ad8
   805ec:	000805a5 	.word	0x000805a5
   805f0:	20070aec 	.word	0x20070aec
   805f4:	000824b9 	.word	0x000824b9
   805f8:	20070acc 	.word	0x20070acc
   805fc:	20070b6c 	.word	0x20070b6c
   80600:	0008045d 	.word	0x0008045d

00080604 <udc_next_desc_in_iface>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80604:	4b0f      	ldr	r3, [pc, #60]	; (80644 <udc_next_desc_in_iface+0x40>)
   80606:	681b      	ldr	r3, [r3, #0]
   80608:	681a      	ldr	r2, [r3, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8060a:	8853      	ldrh	r3, [r2, #2]
   8060c:	441a      	add	r2, r3
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8060e:	7803      	ldrb	r3, [r0, #0]
   80610:	4418      	add	r0, r3
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80612:	4290      	cmp	r0, r2
   80614:	d210      	bcs.n	80638 <udc_next_desc_in_iface+0x34>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80616:	7843      	ldrb	r3, [r0, #1]
   80618:	2b04      	cmp	r3, #4
   8061a:	d00f      	beq.n	8063c <udc_next_desc_in_iface+0x38>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   8061c:	428b      	cmp	r3, r1
   8061e:	d105      	bne.n	8062c <udc_next_desc_in_iface+0x28>
   80620:	4770      	bx	lr
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   80622:	7843      	ldrb	r3, [r0, #1]
   80624:	2b04      	cmp	r3, #4
   80626:	d00b      	beq.n	80640 <udc_next_desc_in_iface+0x3c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   80628:	428b      	cmp	r3, r1
   8062a:	d00a      	beq.n	80642 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8062c:	7803      	ldrb	r3, [r0, #0]
   8062e:	4418      	add	r0, r3
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   80630:	4290      	cmp	r0, r2
   80632:	d3f6      	bcc.n	80622 <udc_next_desc_in_iface+0x1e>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
   80634:	2000      	movs	r0, #0
   80636:	4770      	bx	lr
   80638:	2000      	movs	r0, #0
   8063a:	4770      	bx	lr
   8063c:	2000      	movs	r0, #0
   8063e:	4770      	bx	lr
   80640:	2000      	movs	r0, #0
}
   80642:	4770      	bx	lr
   80644:	20070b78 	.word	0x20070b78

00080648 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   80648:	b508      	push	{r3, lr}
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   8064a:	4b03      	ldr	r3, [pc, #12]	; (80658 <udc_valid_address+0x10>)
   8064c:	7898      	ldrb	r0, [r3, #2]
   8064e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80652:	4b02      	ldr	r3, [pc, #8]	; (8065c <udc_valid_address+0x14>)
   80654:	4798      	blx	r3
   80656:	bd08      	pop	{r3, pc}
   80658:	20070c9c 	.word	0x20070c9c
   8065c:	00082215 	.word	0x00082215

00080660 <udc_update_iface_desc>:
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   80660:	4b16      	ldr	r3, [pc, #88]	; (806bc <udc_update_iface_desc+0x5c>)
   80662:	781b      	ldrb	r3, [r3, #0]
   80664:	b30b      	cbz	r3, 806aa <udc_update_iface_desc+0x4a>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80666:	4b16      	ldr	r3, [pc, #88]	; (806c0 <udc_update_iface_desc+0x60>)
   80668:	681b      	ldr	r3, [r3, #0]
   8066a:	681b      	ldr	r3, [r3, #0]
   8066c:	791a      	ldrb	r2, [r3, #4]
   8066e:	4282      	cmp	r2, r0
   80670:	d91d      	bls.n	806ae <udc_update_iface_desc+0x4e>
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   80672:	b410      	push	{r4}
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80674:	4a13      	ldr	r2, [pc, #76]	; (806c4 <udc_update_iface_desc+0x64>)
   80676:	6013      	str	r3, [r2, #0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80678:	885c      	ldrh	r4, [r3, #2]
   8067a:	441c      	add	r4, r3
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   8067c:	42a3      	cmp	r3, r4
   8067e:	d218      	bcs.n	806b2 <udc_update_iface_desc+0x52>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80680:	785a      	ldrb	r2, [r3, #1]
   80682:	2a04      	cmp	r2, #4
   80684:	d109      	bne.n	8069a <udc_update_iface_desc+0x3a>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80686:	789a      	ldrb	r2, [r3, #2]
   80688:	4282      	cmp	r2, r0
   8068a:	d106      	bne.n	8069a <udc_update_iface_desc+0x3a>
   8068c:	78da      	ldrb	r2, [r3, #3]
   8068e:	428a      	cmp	r2, r1
   80690:	d103      	bne.n	8069a <udc_update_iface_desc+0x3a>
   80692:	4a0c      	ldr	r2, [pc, #48]	; (806c4 <udc_update_iface_desc+0x64>)
   80694:	6013      	str	r3, [r2, #0]
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
   80696:	2001      	movs	r0, #1
   80698:	e00c      	b.n	806b4 <udc_update_iface_desc+0x54>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   8069a:	781a      	ldrb	r2, [r3, #0]
   8069c:	4413      	add	r3, r2
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
   8069e:	42a3      	cmp	r3, r4
   806a0:	d3ee      	bcc.n	80680 <udc_update_iface_desc+0x20>
   806a2:	4a08      	ldr	r2, [pc, #32]	; (806c4 <udc_update_iface_desc+0x64>)
   806a4:	6013      	str	r3, [r2, #0]
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   806a6:	2000      	movs	r0, #0
   806a8:	e004      	b.n	806b4 <udc_update_iface_desc+0x54>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
		return false;
   806aa:	2000      	movs	r0, #0
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
}
   806ac:	4770      	bx	lr
	if (0 == udc_num_configuration) {
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
   806ae:	2000      	movs	r0, #0
   806b0:	4770      	bx	lr
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
   806b2:	2000      	movs	r0, #0
}
   806b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   806b8:	4770      	bx	lr
   806ba:	bf00      	nop
   806bc:	20070b84 	.word	0x20070b84
   806c0:	20070b78 	.word	0x20070b78
   806c4:	20070b88 	.word	0x20070b88

000806c8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   806c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   806cc:	4604      	mov	r4, r0
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   806ce:	2100      	movs	r1, #0
   806d0:	4b12      	ldr	r3, [pc, #72]	; (8071c <udc_iface_disable+0x54>)
   806d2:	4798      	blx	r3
   806d4:	4680      	mov	r8, r0
   806d6:	b1e8      	cbz	r0, 80714 <udc_iface_disable+0x4c>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   806d8:	4b11      	ldr	r3, [pc, #68]	; (80720 <udc_iface_disable+0x58>)
   806da:	681b      	ldr	r3, [r3, #0]
   806dc:	685b      	ldr	r3, [r3, #4]
   806de:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   806e2:	f8d9 300c 	ldr.w	r3, [r9, #12]
   806e6:	4798      	blx	r3
   806e8:	4601      	mov	r1, r0
   806ea:	4620      	mov	r0, r4
   806ec:	4b0b      	ldr	r3, [pc, #44]	; (8071c <udc_iface_disable+0x54>)
   806ee:	4798      	blx	r3
   806f0:	4680      	mov	r8, r0
   806f2:	b178      	cbz	r0, 80714 <udc_iface_disable+0x4c>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   806f4:	4b0b      	ldr	r3, [pc, #44]	; (80724 <udc_iface_disable+0x5c>)
   806f6:	681c      	ldr	r4, [r3, #0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   806f8:	2605      	movs	r6, #5
   806fa:	4d0b      	ldr	r5, [pc, #44]	; (80728 <udc_iface_disable+0x60>)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   806fc:	4f0b      	ldr	r7, [pc, #44]	; (8072c <udc_iface_disable+0x64>)
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   806fe:	4620      	mov	r0, r4
   80700:	4631      	mov	r1, r6
   80702:	47a8      	blx	r5
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   80704:	4604      	mov	r4, r0
   80706:	b110      	cbz	r0, 8070e <udc_iface_disable+0x46>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   80708:	7880      	ldrb	r0, [r0, #2]
   8070a:	47b8      	blx	r7
		}
   8070c:	e7f7      	b.n	806fe <udc_iface_disable+0x36>
	}
#endif

	// Disable interface
	udi_api->disable();
   8070e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   80712:	4798      	blx	r3
	return true;
}
   80714:	4640      	mov	r0, r8
   80716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8071a:	bf00      	nop
   8071c:	00080661 	.word	0x00080661
   80720:	20070b78 	.word	0x20070b78
   80724:	20070b88 	.word	0x20070b88
   80728:	00080605 	.word	0x00080605
   8072c:	00082279 	.word	0x00082279

00080730 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   80730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80734:	4680      	mov	r8, r0
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   80736:	4b10      	ldr	r3, [pc, #64]	; (80778 <udc_iface_enable+0x48>)
   80738:	4798      	blx	r3
   8073a:	4603      	mov	r3, r0
   8073c:	b1c8      	cbz	r0, 80772 <udc_iface_enable+0x42>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8073e:	4b0f      	ldr	r3, [pc, #60]	; (8077c <udc_iface_enable+0x4c>)
   80740:	681c      	ldr	r4, [r3, #0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80742:	2605      	movs	r6, #5
   80744:	4d0e      	ldr	r5, [pc, #56]	; (80780 <udc_iface_enable+0x50>)
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80746:	4f0f      	ldr	r7, [pc, #60]	; (80784 <udc_iface_enable+0x54>)

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   80748:	4620      	mov	r0, r4
   8074a:	4631      	mov	r1, r6
   8074c:	47a8      	blx	r5
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   8074e:	4604      	mov	r4, r0
   80750:	b138      	cbz	r0, 80762 <udc_iface_enable+0x32>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   80752:	7880      	ldrb	r0, [r0, #2]
   80754:	78e1      	ldrb	r1, [r4, #3]
   80756:	88a2      	ldrh	r2, [r4, #4]
   80758:	47b8      	blx	r7
   8075a:	4603      	mov	r3, r0
   8075c:	2800      	cmp	r0, #0
   8075e:	d1f3      	bne.n	80748 <udc_iface_enable+0x18>
   80760:	e007      	b.n	80772 <udc_iface_enable+0x42>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   80762:	4b09      	ldr	r3, [pc, #36]	; (80788 <udc_iface_enable+0x58>)
   80764:	681b      	ldr	r3, [r3, #0]
   80766:	685b      	ldr	r3, [r3, #4]
   80768:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
   8076c:	681b      	ldr	r3, [r3, #0]
   8076e:	4798      	blx	r3
   80770:	4603      	mov	r3, r0
}
   80772:	4618      	mov	r0, r3
   80774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80778:	00080661 	.word	0x00080661
   8077c:	20070b88 	.word	0x20070b88
   80780:	00080605 	.word	0x00080605
   80784:	000825b1 	.word	0x000825b1
   80788:	20070b78 	.word	0x20070b78

0008078c <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   8078c:	b508      	push	{r3, lr}
	udd_enable();
   8078e:	4b01      	ldr	r3, [pc, #4]	; (80794 <udc_start+0x8>)
   80790:	4798      	blx	r3
   80792:	bd08      	pop	{r3, pc}
   80794:	000819b5 	.word	0x000819b5

00080798 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   80798:	b570      	push	{r4, r5, r6, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   8079a:	4b0d      	ldr	r3, [pc, #52]	; (807d0 <udc_reset+0x38>)
   8079c:	781b      	ldrb	r3, [r3, #0]
   8079e:	b183      	cbz	r3, 807c2 <udc_reset+0x2a>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807a0:	4b0c      	ldr	r3, [pc, #48]	; (807d4 <udc_reset+0x3c>)
   807a2:	681b      	ldr	r3, [r3, #0]
   807a4:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   807a6:	791b      	ldrb	r3, [r3, #4]
   807a8:	b15b      	cbz	r3, 807c2 <udc_reset+0x2a>
   807aa:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   807ac:	4e0a      	ldr	r6, [pc, #40]	; (807d8 <udc_reset+0x40>)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807ae:	4d09      	ldr	r5, [pc, #36]	; (807d4 <udc_reset+0x3c>)
				iface_num++) {
			udc_iface_disable(iface_num);
   807b0:	4620      	mov	r0, r4
   807b2:	47b0      	blx	r6
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   807b4:	3401      	adds	r4, #1
   807b6:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807b8:	682b      	ldr	r3, [r5, #0]
   807ba:	681b      	ldr	r3, [r3, #0]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   807bc:	791b      	ldrb	r3, [r3, #4]
   807be:	42a3      	cmp	r3, r4
   807c0:	d8f6      	bhi.n	807b0 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
   807c2:	2200      	movs	r2, #0
   807c4:	4b02      	ldr	r3, [pc, #8]	; (807d0 <udc_reset+0x38>)
   807c6:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   807c8:	2201      	movs	r2, #1
   807ca:	4b04      	ldr	r3, [pc, #16]	; (807dc <udc_reset+0x44>)
   807cc:	801a      	strh	r2, [r3, #0]
   807ce:	bd70      	pop	{r4, r5, r6, pc}
   807d0:	20070b84 	.word	0x20070b84
   807d4:	20070b78 	.word	0x20070b78
   807d8:	000806c9 	.word	0x000806c9
   807dc:	20070b82 	.word	0x20070b82

000807e0 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
   807e0:	b538      	push	{r3, r4, r5, lr}
	uint8_t iface_num;

	if (udc_num_configuration) {
   807e2:	4b0c      	ldr	r3, [pc, #48]	; (80814 <udc_sof_notify+0x34>)
   807e4:	781b      	ldrb	r3, [r3, #0]
   807e6:	b19b      	cbz	r3, 80810 <udc_sof_notify+0x30>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807e8:	4b0b      	ldr	r3, [pc, #44]	; (80818 <udc_sof_notify+0x38>)
   807ea:	681b      	ldr	r3, [r3, #0]
   807ec:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   807ee:	7912      	ldrb	r2, [r2, #4]
   807f0:	b172      	cbz	r2, 80810 <udc_sof_notify+0x30>
   807f2:	2400      	movs	r4, #0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   807f4:	4d08      	ldr	r5, [pc, #32]	; (80818 <udc_sof_notify+0x38>)
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   807f6:	685b      	ldr	r3, [r3, #4]
   807f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   807fc:	691b      	ldr	r3, [r3, #16]
   807fe:	b103      	cbz	r3, 80802 <udc_sof_notify+0x22>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   80800:	4798      	blx	r3
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
   80802:	3401      	adds	r4, #1
   80804:	b2e4      	uxtb	r4, r4
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80806:	682b      	ldr	r3, [r5, #0]
   80808:	681a      	ldr	r2, [r3, #0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
   8080a:	7912      	ldrb	r2, [r2, #4]
   8080c:	42a2      	cmp	r2, r4
   8080e:	d8f2      	bhi.n	807f6 <udc_sof_notify+0x16>
   80810:	bd38      	pop	{r3, r4, r5, pc}
   80812:	bf00      	nop
   80814:	20070b84 	.word	0x20070b84
   80818:	20070b78 	.word	0x20070b78

0008081c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   8081c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   8081e:	4b90      	ldr	r3, [pc, #576]	; (80a60 <udc_process_setup+0x244>)
   80820:	2200      	movs	r2, #0
   80822:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   80824:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   80826:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
   80828:	781b      	ldrb	r3, [r3, #0]
   8082a:	f013 0f80 	tst.w	r3, #128	; 0x80
   8082e:	f000 81d2 	beq.w	80bd6 <udc_process_setup+0x3ba>
		if (udd_g_ctrlreq.req.wLength == 0) {
   80832:	4a8b      	ldr	r2, [pc, #556]	; (80a60 <udc_process_setup+0x244>)
   80834:	88d2      	ldrh	r2, [r2, #6]
   80836:	2a00      	cmp	r2, #0
   80838:	f040 81d1 	bne.w	80bde <udc_process_setup+0x3c2>
   8083c:	e1c7      	b.n	80bce <udc_process_setup+0x3b2>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   8083e:	f013 031f 	ands.w	r3, r3, #31
   80842:	d165      	bne.n	80910 <udc_process_setup+0xf4>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80844:	4986      	ldr	r1, [pc, #536]	; (80a60 <udc_process_setup+0x244>)
   80846:	7849      	ldrb	r1, [r1, #1]
   80848:	2906      	cmp	r1, #6
   8084a:	d00b      	beq.n	80864 <udc_process_setup+0x48>
   8084c:	2908      	cmp	r1, #8
   8084e:	d057      	beq.n	80900 <udc_process_setup+0xe4>
   80850:	2900      	cmp	r1, #0
   80852:	d15d      	bne.n	80910 <udc_process_setup+0xf4>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   80854:	2a02      	cmp	r2, #2
   80856:	f040 816a 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8085a:	4882      	ldr	r0, [pc, #520]	; (80a64 <udc_process_setup+0x248>)
   8085c:	2102      	movs	r1, #2
   8085e:	4b82      	ldr	r3, [pc, #520]	; (80a68 <udc_process_setup+0x24c>)
   80860:	4798      	blx	r3
   80862:	e1c0      	b.n	80be6 <udc_process_setup+0x3ca>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   80864:	4b7e      	ldr	r3, [pc, #504]	; (80a60 <udc_process_setup+0x244>)
   80866:	885a      	ldrh	r2, [r3, #2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   80868:	0a13      	lsrs	r3, r2, #8
   8086a:	3b01      	subs	r3, #1
   8086c:	2b0e      	cmp	r3, #14
   8086e:	f200 8155 	bhi.w	80b1c <udc_process_setup+0x300>
   80872:	e8df f013 	tbh	[pc, r3, lsl #1]
   80876:	000f      	.short	0x000f
   80878:	00340016 	.word	0x00340016
   8087c:	01530153 	.word	0x01530153
   80880:	01530153 	.word	0x01530153
   80884:	01530153 	.word	0x01530153
   80888:	01530153 	.word	0x01530153
   8088c:	01530153 	.word	0x01530153
   80890:	002a0153 	.word	0x002a0153
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
   80894:	4b75      	ldr	r3, [pc, #468]	; (80a6c <udc_process_setup+0x250>)
   80896:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
   80898:	4618      	mov	r0, r3
   8089a:	7819      	ldrb	r1, [r3, #0]
   8089c:	4b72      	ldr	r3, [pc, #456]	; (80a68 <udc_process_setup+0x24c>)
   8089e:	4798      	blx	r3
   808a0:	e025      	b.n	808ee <udc_process_setup+0xd2>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   808a2:	b2d2      	uxtb	r2, r2
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   808a4:	4b71      	ldr	r3, [pc, #452]	; (80a6c <udc_process_setup+0x250>)
   808a6:	681b      	ldr	r3, [r3, #0]
   808a8:	7c5b      	ldrb	r3, [r3, #17]
   808aa:	4293      	cmp	r3, r2
   808ac:	f240 813f 	bls.w	80b2e <udc_process_setup+0x312>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   808b0:	4b6e      	ldr	r3, [pc, #440]	; (80a6c <udc_process_setup+0x250>)
   808b2:	685b      	ldr	r3, [r3, #4]
   808b4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
   808b8:	4618      	mov	r0, r3
   808ba:	8859      	ldrh	r1, [r3, #2]
   808bc:	4b6a      	ldr	r3, [pc, #424]	; (80a68 <udc_process_setup+0x24c>)
   808be:	4798      	blx	r3
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   808c0:	4b67      	ldr	r3, [pc, #412]	; (80a60 <udc_process_setup+0x244>)
   808c2:	689b      	ldr	r3, [r3, #8]
   808c4:	2202      	movs	r2, #2
   808c6:	705a      	strb	r2, [r3, #1]
   808c8:	e011      	b.n	808ee <udc_process_setup+0xd2>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
   808ca:	4b68      	ldr	r3, [pc, #416]	; (80a6c <udc_process_setup+0x250>)
   808cc:	689b      	ldr	r3, [r3, #8]
   808ce:	2b00      	cmp	r3, #0
   808d0:	f000 812d 	beq.w	80b2e <udc_process_setup+0x312>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
   808d4:	4618      	mov	r0, r3
   808d6:	8859      	ldrh	r1, [r3, #2]
   808d8:	4b63      	ldr	r3, [pc, #396]	; (80a68 <udc_process_setup+0x24c>)
   808da:	4798      	blx	r3
   808dc:	e007      	b.n	808ee <udc_process_setup+0xd2>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   808de:	f012 0fff 	tst.w	r2, #255	; 0xff
   808e2:	f040 8124 	bne.w	80b2e <udc_process_setup+0x312>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   808e6:	4862      	ldr	r0, [pc, #392]	; (80a70 <udc_process_setup+0x254>)
   808e8:	2104      	movs	r1, #4
   808ea:	4b5f      	ldr	r3, [pc, #380]	; (80a68 <udc_process_setup+0x24c>)
   808ec:	4798      	blx	r3
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   808ee:	4b5c      	ldr	r3, [pc, #368]	; (80a60 <udc_process_setup+0x244>)
   808f0:	88da      	ldrh	r2, [r3, #6]
   808f2:	899b      	ldrh	r3, [r3, #12]
   808f4:	4293      	cmp	r3, r2
   808f6:	f240 8176 	bls.w	80be6 <udc_process_setup+0x3ca>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   808fa:	4b59      	ldr	r3, [pc, #356]	; (80a60 <udc_process_setup+0x244>)
   808fc:	819a      	strh	r2, [r3, #12]
   808fe:	e172      	b.n	80be6 <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
   80900:	2a01      	cmp	r2, #1
   80902:	f040 8114 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   80906:	485b      	ldr	r0, [pc, #364]	; (80a74 <udc_process_setup+0x258>)
   80908:	2101      	movs	r1, #1
   8090a:	4b57      	ldr	r3, [pc, #348]	; (80a68 <udc_process_setup+0x24c>)
   8090c:	4798      	blx	r3
   8090e:	e16a      	b.n	80be6 <udc_process_setup+0x3ca>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80910:	2b01      	cmp	r3, #1
   80912:	d127      	bne.n	80964 <udc_process_setup+0x148>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80914:	4952      	ldr	r1, [pc, #328]	; (80a60 <udc_process_setup+0x244>)
   80916:	7849      	ldrb	r1, [r1, #1]
   80918:	290a      	cmp	r1, #10
   8091a:	d123      	bne.n	80964 <udc_process_setup+0x148>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   8091c:	2a01      	cmp	r2, #1
   8091e:	f040 8106 	bne.w	80b2e <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80922:	4b54      	ldr	r3, [pc, #336]	; (80a74 <udc_process_setup+0x258>)
   80924:	781b      	ldrb	r3, [r3, #0]
   80926:	2b00      	cmp	r3, #0
   80928:	f000 8101 	beq.w	80b2e <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8092c:	4b4c      	ldr	r3, [pc, #304]	; (80a60 <udc_process_setup+0x244>)
   8092e:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80930:	4b51      	ldr	r3, [pc, #324]	; (80a78 <udc_process_setup+0x25c>)
   80932:	681d      	ldr	r5, [r3, #0]
   80934:	682b      	ldr	r3, [r5, #0]
   80936:	791b      	ldrb	r3, [r3, #4]
   80938:	42a3      	cmp	r3, r4
   8093a:	f240 80f8 	bls.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8093e:	4620      	mov	r0, r4
   80940:	2100      	movs	r1, #0
   80942:	4b4e      	ldr	r3, [pc, #312]	; (80a7c <udc_process_setup+0x260>)
   80944:	4798      	blx	r3
   80946:	2800      	cmp	r0, #0
   80948:	f000 80f1 	beq.w	80b2e <udc_process_setup+0x312>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8094c:	686b      	ldr	r3, [r5, #4]
	udc_iface_setting = udi_api->getsetting();
   8094e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
   80952:	68db      	ldr	r3, [r3, #12]
   80954:	4798      	blx	r3
   80956:	4b4a      	ldr	r3, [pc, #296]	; (80a80 <udc_process_setup+0x264>)
   80958:	7018      	strb	r0, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   8095a:	4618      	mov	r0, r3
   8095c:	2101      	movs	r1, #1
   8095e:	4b42      	ldr	r3, [pc, #264]	; (80a68 <udc_process_setup+0x24c>)
   80960:	4798      	blx	r3
   80962:	e140      	b.n	80be6 <udc_process_setup+0x3ca>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80964:	2b02      	cmp	r3, #2
   80966:	f040 80e2 	bne.w	80b2e <udc_process_setup+0x312>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   8096a:	4b3d      	ldr	r3, [pc, #244]	; (80a60 <udc_process_setup+0x244>)
   8096c:	785b      	ldrb	r3, [r3, #1]
   8096e:	2b00      	cmp	r3, #0
   80970:	f040 80d6 	bne.w	80b20 <udc_process_setup+0x304>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   80974:	2a02      	cmp	r2, #2
   80976:	f040 80da 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   8097a:	4b39      	ldr	r3, [pc, #228]	; (80a60 <udc_process_setup+0x244>)
   8097c:	7918      	ldrb	r0, [r3, #4]
   8097e:	4b41      	ldr	r3, [pc, #260]	; (80a84 <udc_process_setup+0x268>)
   80980:	4798      	blx	r3
   80982:	4b41      	ldr	r3, [pc, #260]	; (80a88 <udc_process_setup+0x26c>)
   80984:	8018      	strh	r0, [r3, #0]
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   80986:	4618      	mov	r0, r3
   80988:	2102      	movs	r1, #2
   8098a:	4b37      	ldr	r3, [pc, #220]	; (80a68 <udc_process_setup+0x24c>)
   8098c:	4798      	blx	r3
   8098e:	e12a      	b.n	80be6 <udc_process_setup+0x3ca>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   80990:	f013 031f 	ands.w	r3, r3, #31
   80994:	f040 8082 	bne.w	80a9c <udc_process_setup+0x280>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   80998:	4a31      	ldr	r2, [pc, #196]	; (80a60 <udc_process_setup+0x244>)
   8099a:	7852      	ldrb	r2, [r2, #1]
   8099c:	3a01      	subs	r2, #1
   8099e:	2a08      	cmp	r2, #8
   809a0:	d87c      	bhi.n	80a9c <udc_process_setup+0x280>
   809a2:	e8df f012 	tbh	[pc, r2, lsl #1]
   809a6:	0012      	.short	0x0012
   809a8:	00bf007b 	.word	0x00bf007b
   809ac:	0009007b 	.word	0x0009007b
   809b0:	007b007b 	.word	0x007b007b
   809b4:	0022007b 	.word	0x0022007b
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   809b8:	4b29      	ldr	r3, [pc, #164]	; (80a60 <udc_process_setup+0x244>)
   809ba:	88db      	ldrh	r3, [r3, #6]
   809bc:	2b00      	cmp	r3, #0
   809be:	f040 80b6 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   809c2:	4a32      	ldr	r2, [pc, #200]	; (80a8c <udc_process_setup+0x270>)
   809c4:	4b26      	ldr	r3, [pc, #152]	; (80a60 <udc_process_setup+0x244>)
   809c6:	611a      	str	r2, [r3, #16]
   809c8:	e10d      	b.n	80be6 <udc_process_setup+0x3ca>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   809ca:	4b25      	ldr	r3, [pc, #148]	; (80a60 <udc_process_setup+0x244>)
   809cc:	88db      	ldrh	r3, [r3, #6]
   809ce:	2b00      	cmp	r3, #0
   809d0:	f040 80ad 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   809d4:	4b22      	ldr	r3, [pc, #136]	; (80a60 <udc_process_setup+0x244>)
   809d6:	885b      	ldrh	r3, [r3, #2]
   809d8:	2b01      	cmp	r3, #1
   809da:	f040 80a8 	bne.w	80b2e <udc_process_setup+0x312>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   809de:	4a21      	ldr	r2, [pc, #132]	; (80a64 <udc_process_setup+0x248>)
   809e0:	8813      	ldrh	r3, [r2, #0]
   809e2:	f023 0302 	bic.w	r3, r3, #2
   809e6:	8013      	strh	r3, [r2, #0]
   809e8:	e0fd      	b.n	80be6 <udc_process_setup+0x3ca>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   809ea:	4b1d      	ldr	r3, [pc, #116]	; (80a60 <udc_process_setup+0x244>)
   809ec:	88db      	ldrh	r3, [r3, #6]
   809ee:	2b00      	cmp	r3, #0
   809f0:	f040 809d 	bne.w	80b2e <udc_process_setup+0x312>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   809f4:	4b26      	ldr	r3, [pc, #152]	; (80a90 <udc_process_setup+0x274>)
   809f6:	4798      	blx	r3
   809f8:	2800      	cmp	r0, #0
   809fa:	f000 8098 	beq.w	80b2e <udc_process_setup+0x312>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   809fe:	4b18      	ldr	r3, [pc, #96]	; (80a60 <udc_process_setup+0x244>)
   80a00:	789a      	ldrb	r2, [r3, #2]
				udc_config.confdev_lsfs->bNumConfigurations) {
   80a02:	4b1a      	ldr	r3, [pc, #104]	; (80a6c <udc_process_setup+0x250>)
   80a04:	681b      	ldr	r3, [r3, #0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   80a06:	7c5b      	ldrb	r3, [r3, #17]
   80a08:	429a      	cmp	r2, r3
   80a0a:	f300 8090 	bgt.w	80b2e <udc_process_setup+0x312>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
   80a0e:	4b21      	ldr	r3, [pc, #132]	; (80a94 <udc_process_setup+0x278>)
   80a10:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   80a12:	4b13      	ldr	r3, [pc, #76]	; (80a60 <udc_process_setup+0x244>)
   80a14:	789b      	ldrb	r3, [r3, #2]
   80a16:	4a17      	ldr	r2, [pc, #92]	; (80a74 <udc_process_setup+0x258>)
   80a18:	7013      	strb	r3, [r2, #0]
	if (udc_num_configuration == 0) {
   80a1a:	2b00      	cmp	r3, #0
   80a1c:	f000 80e3 	beq.w	80be6 <udc_process_setup+0x3ca>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   80a20:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   80a24:	3b01      	subs	r3, #1
   80a26:	4a11      	ldr	r2, [pc, #68]	; (80a6c <udc_process_setup+0x250>)
   80a28:	6852      	ldr	r2, [r2, #4]
   80a2a:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   80a2e:	4912      	ldr	r1, [pc, #72]	; (80a78 <udc_process_setup+0x25c>)
   80a30:	6008      	str	r0, [r1, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80a32:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   80a36:	791b      	ldrb	r3, [r3, #4]
   80a38:	2b00      	cmp	r3, #0
   80a3a:	f000 80d4 	beq.w	80be6 <udc_process_setup+0x3ca>
   80a3e:	2400      	movs	r4, #0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80a40:	4626      	mov	r6, r4
   80a42:	4d15      	ldr	r5, [pc, #84]	; (80a98 <udc_process_setup+0x27c>)
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80a44:	460f      	mov	r7, r1
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   80a46:	4620      	mov	r0, r4
   80a48:	4631      	mov	r1, r6
   80a4a:	47a8      	blx	r5
   80a4c:	2800      	cmp	r0, #0
   80a4e:	d06e      	beq.n	80b2e <udc_process_setup+0x312>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80a50:	3401      	adds	r4, #1
   80a52:	b2e4      	uxtb	r4, r4
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80a54:	683b      	ldr	r3, [r7, #0]
   80a56:	681b      	ldr	r3, [r3, #0]
   80a58:	791b      	ldrb	r3, [r3, #4]
   80a5a:	42a3      	cmp	r3, r4
   80a5c:	d8f3      	bhi.n	80a46 <udc_process_setup+0x22a>
   80a5e:	e0c2      	b.n	80be6 <udc_process_setup+0x3ca>
   80a60:	20070c9c 	.word	0x20070c9c
   80a64:	20070b82 	.word	0x20070b82
   80a68:	0008226d 	.word	0x0008226d
   80a6c:	20070160 	.word	0x20070160
   80a70:	200701d4 	.word	0x200701d4
   80a74:	20070b84 	.word	0x20070b84
   80a78:	20070b78 	.word	0x20070b78
   80a7c:	00080661 	.word	0x00080661
   80a80:	20070b80 	.word	0x20070b80
   80a84:	000822d5 	.word	0x000822d5
   80a88:	20070b7c 	.word	0x20070b7c
   80a8c:	00080649 	.word	0x00080649
   80a90:	0008223d 	.word	0x0008223d
   80a94:	00080799 	.word	0x00080799
   80a98:	00080731 	.word	0x00080731
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   80a9c:	2b01      	cmp	r3, #1
   80a9e:	d119      	bne.n	80ad4 <udc_process_setup+0x2b8>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   80aa0:	4a52      	ldr	r2, [pc, #328]	; (80bec <udc_process_setup+0x3d0>)
   80aa2:	7852      	ldrb	r2, [r2, #1]
   80aa4:	2a0b      	cmp	r2, #11
   80aa6:	d115      	bne.n	80ad4 <udc_process_setup+0x2b8>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   80aa8:	4b50      	ldr	r3, [pc, #320]	; (80bec <udc_process_setup+0x3d0>)
   80aaa:	88db      	ldrh	r3, [r3, #6]
   80aac:	2b00      	cmp	r3, #0
   80aae:	d13e      	bne.n	80b2e <udc_process_setup+0x312>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
   80ab0:	4b4f      	ldr	r3, [pc, #316]	; (80bf0 <udc_process_setup+0x3d4>)
   80ab2:	781b      	ldrb	r3, [r3, #0]
   80ab4:	2b00      	cmp	r3, #0
   80ab6:	d03a      	beq.n	80b2e <udc_process_setup+0x312>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80ab8:	4b4c      	ldr	r3, [pc, #304]	; (80bec <udc_process_setup+0x3d0>)
   80aba:	791c      	ldrb	r4, [r3, #4]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   80abc:	885d      	ldrh	r5, [r3, #2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   80abe:	4620      	mov	r0, r4
   80ac0:	4b4c      	ldr	r3, [pc, #304]	; (80bf4 <udc_process_setup+0x3d8>)
   80ac2:	4798      	blx	r3
   80ac4:	2800      	cmp	r0, #0
   80ac6:	d032      	beq.n	80b2e <udc_process_setup+0x312>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   80ac8:	4620      	mov	r0, r4
   80aca:	b2e9      	uxtb	r1, r5
   80acc:	4b4a      	ldr	r3, [pc, #296]	; (80bf8 <udc_process_setup+0x3dc>)
   80ace:	4798      	blx	r3
   80ad0:	4603      	mov	r3, r0
   80ad2:	e02a      	b.n	80b2a <udc_process_setup+0x30e>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   80ad4:	2b02      	cmp	r3, #2
   80ad6:	d12a      	bne.n	80b2e <udc_process_setup+0x312>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   80ad8:	4b44      	ldr	r3, [pc, #272]	; (80bec <udc_process_setup+0x3d0>)
   80ada:	785b      	ldrb	r3, [r3, #1]
   80adc:	2b01      	cmp	r3, #1
   80ade:	d002      	beq.n	80ae6 <udc_process_setup+0x2ca>
   80ae0:	2b03      	cmp	r3, #3
   80ae2:	d00c      	beq.n	80afe <udc_process_setup+0x2e2>
   80ae4:	e020      	b.n	80b28 <udc_process_setup+0x30c>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80ae6:	4b41      	ldr	r3, [pc, #260]	; (80bec <udc_process_setup+0x3d0>)
   80ae8:	88db      	ldrh	r3, [r3, #6]
   80aea:	bb03      	cbnz	r3, 80b2e <udc_process_setup+0x312>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80aec:	4b3f      	ldr	r3, [pc, #252]	; (80bec <udc_process_setup+0x3d0>)
   80aee:	885b      	ldrh	r3, [r3, #2]
   80af0:	b9eb      	cbnz	r3, 80b2e <udc_process_setup+0x312>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80af2:	4b3e      	ldr	r3, [pc, #248]	; (80bec <udc_process_setup+0x3d0>)
   80af4:	7918      	ldrb	r0, [r3, #4]
   80af6:	4b41      	ldr	r3, [pc, #260]	; (80bfc <udc_process_setup+0x3e0>)
   80af8:	4798      	blx	r3
   80afa:	4603      	mov	r3, r0
   80afc:	e015      	b.n	80b2a <udc_process_setup+0x30e>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
   80afe:	4b3b      	ldr	r3, [pc, #236]	; (80bec <udc_process_setup+0x3d0>)
   80b00:	88db      	ldrh	r3, [r3, #6]
   80b02:	b9a3      	cbnz	r3, 80b2e <udc_process_setup+0x312>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   80b04:	4b39      	ldr	r3, [pc, #228]	; (80bec <udc_process_setup+0x3d0>)
   80b06:	885b      	ldrh	r3, [r3, #2]
   80b08:	b98b      	cbnz	r3, 80b2e <udc_process_setup+0x312>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   80b0a:	4c38      	ldr	r4, [pc, #224]	; (80bec <udc_process_setup+0x3d0>)
   80b0c:	7920      	ldrb	r0, [r4, #4]
   80b0e:	4b3c      	ldr	r3, [pc, #240]	; (80c00 <udc_process_setup+0x3e4>)
   80b10:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   80b12:	7920      	ldrb	r0, [r4, #4]
   80b14:	4b3b      	ldr	r3, [pc, #236]	; (80c04 <udc_process_setup+0x3e8>)
   80b16:	4798      	blx	r3
   80b18:	4603      	mov	r3, r0
   80b1a:	e006      	b.n	80b2a <udc_process_setup+0x30e>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   80b1c:	2300      	movs	r3, #0
   80b1e:	e004      	b.n	80b2a <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
   80b20:	2300      	movs	r3, #0
   80b22:	e002      	b.n	80b2a <udc_process_setup+0x30e>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   80b24:	2300      	movs	r3, #0
   80b26:	e000      	b.n	80b2a <udc_process_setup+0x30e>
				break;
			}
		}
#endif
	}
	return false;
   80b28:	2300      	movs	r3, #0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
   80b2a:	2b00      	cmp	r3, #0
   80b2c:	d15c      	bne.n	80be8 <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
   80b2e:	4b2f      	ldr	r3, [pc, #188]	; (80bec <udc_process_setup+0x3d0>)
   80b30:	781b      	ldrb	r3, [r3, #0]
   80b32:	f003 031f 	and.w	r3, r3, #31
   80b36:	2b01      	cmp	r3, #1
   80b38:	d11e      	bne.n	80b78 <udc_process_setup+0x35c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80b3a:	4b2d      	ldr	r3, [pc, #180]	; (80bf0 <udc_process_setup+0x3d4>)
   80b3c:	781b      	ldrb	r3, [r3, #0]
   80b3e:	b1db      	cbz	r3, 80b78 <udc_process_setup+0x35c>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   80b40:	4b2a      	ldr	r3, [pc, #168]	; (80bec <udc_process_setup+0x3d0>)
   80b42:	791c      	ldrb	r4, [r3, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80b44:	4b30      	ldr	r3, [pc, #192]	; (80c08 <udc_process_setup+0x3ec>)
   80b46:	681d      	ldr	r5, [r3, #0]
   80b48:	682b      	ldr	r3, [r5, #0]
   80b4a:	791b      	ldrb	r3, [r3, #4]
   80b4c:	42a3      	cmp	r3, r4
   80b4e:	d913      	bls.n	80b78 <udc_process_setup+0x35c>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   80b50:	4620      	mov	r0, r4
   80b52:	2100      	movs	r1, #0
   80b54:	4b2d      	ldr	r3, [pc, #180]	; (80c0c <udc_process_setup+0x3f0>)
   80b56:	4798      	blx	r3
   80b58:	b170      	cbz	r0, 80b78 <udc_process_setup+0x35c>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   80b5a:	686b      	ldr	r3, [r5, #4]
   80b5c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80b60:	68eb      	ldr	r3, [r5, #12]
   80b62:	4798      	blx	r3
   80b64:	4601      	mov	r1, r0
   80b66:	4620      	mov	r0, r4
   80b68:	4b28      	ldr	r3, [pc, #160]	; (80c0c <udc_process_setup+0x3f0>)
   80b6a:	4798      	blx	r3
   80b6c:	b120      	cbz	r0, 80b78 <udc_process_setup+0x35c>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   80b6e:	68ab      	ldr	r3, [r5, #8]
   80b70:	4798      	blx	r3
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
   80b72:	4603      	mov	r3, r0
   80b74:	2800      	cmp	r0, #0
   80b76:	d137      	bne.n	80be8 <udc_process_setup+0x3cc>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   80b78:	4b1c      	ldr	r3, [pc, #112]	; (80bec <udc_process_setup+0x3d0>)
   80b7a:	781b      	ldrb	r3, [r3, #0]
   80b7c:	f003 031f 	and.w	r3, r3, #31
   80b80:	2b02      	cmp	r3, #2
   80b82:	d126      	bne.n	80bd2 <udc_process_setup+0x3b6>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   80b84:	4b1a      	ldr	r3, [pc, #104]	; (80bf0 <udc_process_setup+0x3d4>)
   80b86:	781b      	ldrb	r3, [r3, #0]
   80b88:	b1eb      	cbz	r3, 80bc6 <udc_process_setup+0x3aa>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b8a:	4b1f      	ldr	r3, [pc, #124]	; (80c08 <udc_process_setup+0x3ec>)
   80b8c:	681a      	ldr	r2, [r3, #0]
   80b8e:	6813      	ldr	r3, [r2, #0]
   80b90:	791b      	ldrb	r3, [r3, #4]
   80b92:	b1d3      	cbz	r3, 80bca <udc_process_setup+0x3ae>
   80b94:	2400      	movs	r4, #0
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80b96:	4e1d      	ldr	r6, [pc, #116]	; (80c0c <udc_process_setup+0x3f0>)
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80b98:	4f1b      	ldr	r7, [pc, #108]	; (80c08 <udc_process_setup+0x3ec>)
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   80b9a:	6853      	ldr	r3, [r2, #4]
   80b9c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   80ba0:	68eb      	ldr	r3, [r5, #12]
   80ba2:	4798      	blx	r3
   80ba4:	4601      	mov	r1, r0
   80ba6:	4620      	mov	r0, r4
   80ba8:	47b0      	blx	r6
   80baa:	4603      	mov	r3, r0
   80bac:	b1e0      	cbz	r0, 80be8 <udc_process_setup+0x3cc>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   80bae:	68ab      	ldr	r3, [r5, #8]
   80bb0:	4798      	blx	r3
   80bb2:	4603      	mov	r3, r0
   80bb4:	b9c0      	cbnz	r0, 80be8 <udc_process_setup+0x3cc>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
   80bb6:	3401      	adds	r4, #1
   80bb8:	b2e4      	uxtb	r4, r4
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   80bba:	683a      	ldr	r2, [r7, #0]
   80bbc:	6811      	ldr	r1, [r2, #0]
   80bbe:	7909      	ldrb	r1, [r1, #4]
   80bc0:	42a1      	cmp	r1, r4
   80bc2:	d8ea      	bhi.n	80b9a <udc_process_setup+0x37e>
   80bc4:	e010      	b.n	80be8 <udc_process_setup+0x3cc>
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
   80bc6:	2300      	movs	r3, #0
   80bc8:	e00e      	b.n	80be8 <udc_process_setup+0x3cc>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
   80bca:	2300      	movs	r3, #0
   80bcc:	e00c      	b.n	80be8 <udc_process_setup+0x3cc>
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	if (Udd_setup_is_in()) {
		if (udd_g_ctrlreq.req.wLength == 0) {
			return false; // Error from USB host
   80bce:	2300      	movs	r3, #0
   80bd0:	e00a      	b.n	80be8 <udc_process_setup+0x3cc>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   80bd2:	2300      	movs	r3, #0
   80bd4:	e008      	b.n	80be8 <udc_process_setup+0x3cc>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   80bd6:	f013 0f60 	tst.w	r3, #96	; 0x60
   80bda:	d1a8      	bne.n	80b2e <udc_process_setup+0x312>
   80bdc:	e6d8      	b.n	80990 <udc_process_setup+0x174>
   80bde:	f013 0f60 	tst.w	r3, #96	; 0x60
   80be2:	d1a4      	bne.n	80b2e <udc_process_setup+0x312>
   80be4:	e62b      	b.n	8083e <udc_process_setup+0x22>
		if (udc_reqstd()) {
			return true;
   80be6:	2301      	movs	r3, #1
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
#endif
}
   80be8:	4618      	mov	r0, r3
   80bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80bec:	20070c9c 	.word	0x20070c9c
   80bf0:	20070b84 	.word	0x20070b84
   80bf4:	000806c9 	.word	0x000806c9
   80bf8:	00080731 	.word	0x00080731
   80bfc:	000823dd 	.word	0x000823dd
   80c00:	000827c5 	.word	0x000827c5
   80c04:	000822e9 	.word	0x000822e9
   80c08:	20070b78 	.word	0x20070b78
   80c0c:	00080661 	.word	0x00080661

00080c10 <can_disable_tx_repeat>:
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable_tx_repeat(Can *p_can)
{
	p_can->CAN_MR |= CAN_MR_DRPT;
   80c10:	6803      	ldr	r3, [r0, #0]
   80c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80c16:	6003      	str	r3, [r0, #0]
   80c18:	4770      	bx	lr
   80c1a:	bf00      	nop

00080c1c <can_mailbox_init>:
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80c1c:	680b      	ldr	r3, [r1, #0]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80c1e:	790a      	ldrb	r2, [r1, #4]
   80c20:	b982      	cbnz	r2, 80c44 <can_mailbox_init+0x28>
   80c22:	b2db      	uxtb	r3, r3
   80c24:	eb00 1043 	add.w	r0, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MMR = 0;
   80c28:	2300      	movs	r3, #0
   80c2a:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
		p_can->CAN_MB[uc_index].CAN_MAM = 0;
   80c2e:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = 0;
   80c32:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
		p_can->CAN_MB[uc_index].CAN_MDL = 0;
   80c36:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
		p_can->CAN_MB[uc_index].CAN_MDH = 0;
   80c3a:	f8c0 3218 	str.w	r3, [r0, #536]	; 0x218
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
   80c3e:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
   80c42:	4770      	bx	lr
 *
 * \param p_can    Pointer to a CAN peripheral instance.
 * \param p_mailbox Pointer to a CAN mailbox instance.
 */
void can_mailbox_init(Can *p_can, can_mb_conf_t *p_mailbox)
{
   80c44:	b430      	push	{r4, r5}
   80c46:	b2db      	uxtb	r3, r3
   80c48:	eb00 1243 	add.w	r2, r0, r3, lsl #5
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c4c:	f8d2 4200 	ldr.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);
   80c50:	79cd      	ldrb	r5, [r1, #7]
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c52:	f424 2470 	bic.w	r4, r4, #983040	; 0xf0000
			~CAN_MMR_PRIOR_Msk) |
   80c56:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
		p_can->CAN_MB[uc_index].CAN_MCR = 0;
		return;
	}

	/* Set the priority in Transmit mode. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c5a:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
			~CAN_MMR_PRIOR_Msk) |
			(p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);

	/* Set the message ID and message acceptance mask for the mailbox in
	 * other modes. */
	if (p_mailbox->uc_id_ver) {
   80c5e:	794c      	ldrb	r4, [r1, #5]
   80c60:	b154      	cbz	r4, 80c78 <can_mailbox_init+0x5c>
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk |
   80c62:	68cc      	ldr	r4, [r1, #12]
   80c64:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   80c68:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
				CAN_MAM_MIDE;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id |
   80c6c:	690c      	ldr	r4, [r1, #16]
   80c6e:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
   80c72:	f8c2 4208 	str.w	r4, [r2, #520]	; 0x208
   80c76:	e007      	b.n	80c88 <can_mailbox_init+0x6c>
				CAN_MAM_MIDE;
	} else {
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80c78:	68cc      	ldr	r4, [r1, #12]
   80c7a:	f8c2 4204 	str.w	r4, [r2, #516]	; 0x204
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   80c7e:	690c      	ldr	r4, [r1, #16]
   80c80:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   80c84:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c88:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
   80c8c:	7909      	ldrb	r1, [r1, #4]
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
			~CAN_MMR_MOT_Msk) |
   80c92:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
		p_can->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
		p_can->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
	}

	/* Set up mailbox in one of the five different modes. */
	p_can->CAN_MB[uc_index].CAN_MMR = (p_can->CAN_MB[uc_index].CAN_MMR &
   80c96:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
			~CAN_MMR_MOT_Msk) |
			(p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);
}
   80c9a:	bc30      	pop	{r4, r5}
   80c9c:	4770      	bx	lr
   80c9e:	bf00      	nop

00080ca0 <can_reset_all_mailbox>:
 * \brief Reset the eight mailboxes.
 *
 * \param p_can Pointer to a CAN peripheral instance.
 */
void can_reset_all_mailbox(Can *p_can)
{
   80ca0:	b570      	push	{r4, r5, r6, lr}
   80ca2:	b088      	sub	sp, #32
   80ca4:	4606      	mov	r6, r0
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80ca6:	2400      	movs	r4, #0
   80ca8:	f88d 4004 	strb.w	r4, [sp, #4]

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
   80cac:	4d04      	ldr	r5, [pc, #16]	; (80cc0 <can_reset_all_mailbox+0x20>)

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
		mb_config_t.ul_mb_idx = i;
   80cae:	9400      	str	r4, [sp, #0]
		can_mailbox_init(p_can, &mb_config_t);
   80cb0:	4630      	mov	r0, r6
   80cb2:	4669      	mov	r1, sp
   80cb4:	47a8      	blx	r5
   80cb6:	3401      	adds	r4, #1
	can_mb_conf_t mb_config_t;

	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;

	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80cb8:	2c08      	cmp	r4, #8
   80cba:	d1f8      	bne.n	80cae <can_reset_all_mailbox+0xe>
		mb_config_t.ul_mb_idx = i;
		can_mailbox_init(p_can, &mb_config_t);
	}
}
   80cbc:	b008      	add	sp, #32
   80cbe:	bd70      	pop	{r4, r5, r6, pc}
   80cc0:	00080c1d 	.word	0x00080c1d

00080cc4 <can_init>:
 *
 * \note PMC clock for CAN peripheral should be enabled before calling this
 *function.
 */
uint32_t can_init(Can *p_can, uint32_t ul_mck, uint32_t ul_baudrate)
{
   80cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t ul_cur_mod;
	can_bit_timing_t *p_bit_time;

	/* Check whether the baudrate prescale will be greater than the max
	 * divide value. */
	if (((ul_mck + (ul_baudrate * CAN_MAX_TQ_NUM * 1000 - 1)) /
   80cc6:	f246 13a8 	movw	r3, #25000	; 0x61a8
   80cca:	fb03 f402 	mul.w	r4, r3, r2
   80cce:	190b      	adds	r3, r1, r4
   80cd0:	3b01      	subs	r3, #1
   80cd2:	fbb3 f3f4 	udiv	r3, r3, r4
   80cd6:	2b80      	cmp	r3, #128	; 0x80
   80cd8:	d864      	bhi.n	80da4 <can_init+0xe0>
			CAN_BAUDRATE_MAX_DIV) {
		return 0;
	}

	/* Check whether the input MCK is too small. */
	if ((ul_mck / 2)  < ul_baudrate * CAN_MIN_TQ_NUM * 1000) {
   80cda:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
   80cde:	fb04 f402 	mul.w	r4, r4, r2
   80ce2:	ebb4 0f51 	cmp.w	r4, r1, lsr #1
   80ce6:	d85f      	bhi.n	80da8 <can_init+0xe4>
   80ce8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80cec:	fb03 f202 	mul.w	r2, r3, r2
   80cf0:	2708      	movs	r7, #8
   80cf2:	f04f 36ff 	mov.w	r6, #4294967295
   80cf6:	463b      	mov	r3, r7
	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
   80cf8:	fbb1 f5f4 	udiv	r5, r1, r4
   80cfc:	2d80      	cmp	r5, #128	; 0x80
   80cfe:	d806      	bhi.n	80d0e <can_init+0x4a>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
   80d00:	fb04 1515 	mls	r5, r4, r5, r1
			if (ul_cur_mod < ul_mod) {
   80d04:	42b5      	cmp	r5, r6
   80d06:	d202      	bcs.n	80d0e <can_init+0x4a>
				ul_mod = ul_cur_mod;
				uc_tq = i;
				if (!ul_mod) {
   80d08:	b13d      	cbz	r5, 80d1a <can_init+0x56>
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
		if ((ul_mck / (ul_baudrate * i * 1000)) <=
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
			if (ul_cur_mod < ul_mod) {
				ul_mod = ul_cur_mod;
   80d0a:	462e      	mov	r6, r5
				uc_tq = i;
				if (!ul_mod) {
   80d0c:	461f      	mov	r7, r3

	/* Initialize the remainder as the max value. When the remainder is 0,
	 *get the right TQ number. */
	ul_mod = 0xffffffff;
	/* Find out the approximate Time Quantum according to the baudrate. */
	for (uint8_t i = CAN_MIN_TQ_NUM; i <= CAN_MAX_TQ_NUM; i++) {
   80d0e:	3301      	adds	r3, #1
   80d10:	b2db      	uxtb	r3, r3
   80d12:	4414      	add	r4, r2
   80d14:	2b1a      	cmp	r3, #26
   80d16:	d1ef      	bne.n	80cf8 <can_init+0x34>
   80d18:	e000      	b.n	80d1c <can_init+0x58>
				CAN_BAUDRATE_MAX_DIV) {
			ul_cur_mod = ul_mck % (ul_baudrate * i * 1000);
			if (ul_cur_mod < ul_mod) {
				ul_mod = ul_cur_mod;
				uc_tq = i;
				if (!ul_mod) {
   80d1a:	461f      	mov	r7, r3
			}
		}
	}

	/* Calculate the baudrate prescale value. */
	uc_prescale = ul_mck / (ul_baudrate * uc_tq * 1000);
   80d1c:	fb02 f207 	mul.w	r2, r2, r7
   80d20:	fbb1 f1f2 	udiv	r1, r1, r2
	if (uc_prescale < 2) {
   80d24:	b2cb      	uxtb	r3, r1
   80d26:	2b01      	cmp	r3, #1
   80d28:	d940      	bls.n	80dac <can_init+0xe8>
   80d2a:	4604      	mov	r4, r0
		return 0;
	}

	/* Get the right CAN BIT Timing group. */
	p_bit_time = (can_bit_timing_t *)&can_bit_time[uc_tq - CAN_MIN_TQ_NUM];
   80d2c:	3f08      	subs	r7, #8
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_disable(Can *p_can)
{
	p_can->CAN_MR &= ~CAN_MR_CANEN;
   80d2e:	6803      	ldr	r3, [r0, #0]
   80d30:	f023 0301 	bic.w	r3, r3, #1
   80d34:	6003      	str	r3, [r0, #0]
	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80d36:	481e      	ldr	r0, [pc, #120]	; (80db0 <can_init+0xec>)
   80d38:	007d      	lsls	r5, r7, #1
   80d3a:	19ee      	adds	r6, r5, r7
   80d3c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
   80d40:	78b3      	ldrb	r3, [r6, #2]
   80d42:	3b01      	subs	r3, #1
   80d44:	011b      	lsls	r3, r3, #4
   80d46:	f003 0270 	and.w	r2, r3, #112	; 0x70
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80d4a:	7873      	ldrb	r3, [r6, #1]
   80d4c:	3b01      	subs	r3, #1
   80d4e:	021b      	lsls	r3, r3, #8
   80d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80d54:	4313      	orrs	r3, r2

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80d56:	78f2      	ldrb	r2, [r6, #3]
   80d58:	3a01      	subs	r2, #1
   80d5a:	f002 0207 	and.w	r2, r2, #7
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
   80d5e:	431a      	orrs	r2, r3
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80d60:	7933      	ldrb	r3, [r6, #4]
   80d62:	3b01      	subs	r3, #1
   80d64:	031b      	lsls	r3, r3, #12
   80d66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
   80d6a:	431a      	orrs	r2, r3
   80d6c:	b2c9      	uxtb	r1, r1
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
			CAN_BR_BRP(uc_prescale - 1);
   80d6e:	1e4b      	subs	r3, r1, #1
   80d70:	041b      	lsls	r3, r3, #16
   80d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
			CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) |
			CAN_BR_PROPAG(p_bit_time->uc_prog - 1) |
			CAN_BR_SJW(p_bit_time->uc_sjw - 1) |
   80d76:	4313      	orrs	r3, r2

	/* Before modifying the CANBR register, disable the CAN controller. */
	can_disable(p_can);

	/* Write into the CAN baudrate register. */
	p_can->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |
   80d78:	6163      	str	r3, [r4, #20]
	if (ul_flag == 0) {
		return 0;
	}

	/* Reset the CAN eight message mailbox. */
	can_reset_all_mailbox(p_can);
   80d7a:	4620      	mov	r0, r4
   80d7c:	4b0d      	ldr	r3, [pc, #52]	; (80db4 <can_init+0xf0>)
   80d7e:	4798      	blx	r3
 *
 * \param p_can  Pointer to a CAN peripheral instance.
 */
void can_enable(Can *p_can)
{
	p_can->CAN_MR |= CAN_MR_CANEN;
   80d80:	6823      	ldr	r3, [r4, #0]
   80d82:	f043 0301 	orr.w	r3, r3, #1
   80d86:	6023      	str	r3, [r4, #0]
   80d88:	2300      	movs	r3, #0
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80d8a:	490b      	ldr	r1, [pc, #44]	; (80db8 <can_init+0xf4>)
 *
 * \retval CAN status.
 */
uint32_t can_get_status(Can *p_can)
{
	return (p_can->CAN_SR);
   80d8c:	6922      	ldr	r2, [r4, #16]
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
		ul_flag = can_get_status(p_can);
		ul_tick++;
   80d8e:	3301      	adds	r3, #1
	can_enable(p_can);

	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT)) {
   80d90:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
   80d94:	d101      	bne.n	80d9a <can_init+0xd6>
   80d96:	428b      	cmp	r3, r1
   80d98:	d1f8      	bne.n	80d8c <can_init+0xc8>
		ul_flag = can_get_status(p_can);
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) {
   80d9a:	4807      	ldr	r0, [pc, #28]	; (80db8 <can_init+0xf4>)
   80d9c:	1a18      	subs	r0, r3, r0
   80d9e:	bf18      	it	ne
   80da0:	2001      	movne	r0, #1
   80da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t ul_tick;

	/* Initialize the baudrate for CAN module. */
	ul_flag = can_set_baudrate(p_can, ul_mck, ul_baudrate);
	if (ul_flag == 0) {
		return 0;
   80da4:	2000      	movs	r0, #0
   80da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80da8:	2000      	movs	r0, #0
   80daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80dac:	2000      	movs	r0, #0
	if (CAN_TIMEOUT == ul_tick) {
		return 0;
	} else {
		return 1;
	}
}
   80dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80db0:	0008355c 	.word	0x0008355c
   80db4:	00080ca1 	.word	0x00080ca1
   80db8:	000186a0 	.word	0x000186a0

00080dbc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80dc0:	4604      	mov	r4, r0
   80dc2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80dc4:	4b0e      	ldr	r3, [pc, #56]	; (80e00 <pio_handler_process+0x44>)
   80dc6:	4798      	blx	r3
   80dc8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80dca:	4620      	mov	r0, r4
   80dcc:	4b0d      	ldr	r3, [pc, #52]	; (80e04 <pio_handler_process+0x48>)
   80dce:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80dd0:	4005      	ands	r5, r0
   80dd2:	d013      	beq.n	80dfc <pio_handler_process+0x40>
   80dd4:	4c0c      	ldr	r4, [pc, #48]	; (80e08 <pio_handler_process+0x4c>)
   80dd6:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80dda:	6823      	ldr	r3, [r4, #0]
   80ddc:	4543      	cmp	r3, r8
   80dde:	d108      	bne.n	80df2 <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80de0:	6861      	ldr	r1, [r4, #4]
   80de2:	4229      	tst	r1, r5
   80de4:	d005      	beq.n	80df2 <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80de6:	68e3      	ldr	r3, [r4, #12]
   80de8:	4640      	mov	r0, r8
   80dea:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80dec:	6863      	ldr	r3, [r4, #4]
   80dee:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80df2:	42b4      	cmp	r4, r6
   80df4:	d002      	beq.n	80dfc <pio_handler_process+0x40>
   80df6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80df8:	2d00      	cmp	r5, #0
   80dfa:	d1ee      	bne.n	80dda <pio_handler_process+0x1e>
   80dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e00:	00080fdd 	.word	0x00080fdd
   80e04:	00080fe1 	.word	0x00080fe1
   80e08:	20070b8c 	.word	0x20070b8c

00080e0c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80e0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80e0e:	4802      	ldr	r0, [pc, #8]	; (80e18 <PIOA_Handler+0xc>)
   80e10:	210b      	movs	r1, #11
   80e12:	4b02      	ldr	r3, [pc, #8]	; (80e1c <PIOA_Handler+0x10>)
   80e14:	4798      	blx	r3
   80e16:	bd08      	pop	{r3, pc}
   80e18:	400e0e00 	.word	0x400e0e00
   80e1c:	00080dbd 	.word	0x00080dbd

00080e20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80e20:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80e22:	4802      	ldr	r0, [pc, #8]	; (80e2c <PIOB_Handler+0xc>)
   80e24:	210c      	movs	r1, #12
   80e26:	4b02      	ldr	r3, [pc, #8]	; (80e30 <PIOB_Handler+0x10>)
   80e28:	4798      	blx	r3
   80e2a:	bd08      	pop	{r3, pc}
   80e2c:	400e1000 	.word	0x400e1000
   80e30:	00080dbd 	.word	0x00080dbd

00080e34 <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   80e34:	b508      	push	{r3, lr}
	}
#endif

	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_UPLL) {

		pmc_enable_upll_clock();
   80e36:	4b04      	ldr	r3, [pc, #16]	; (80e48 <sysclk_enable_usb+0x14>)
   80e38:	4798      	blx	r3
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
   80e3a:	2000      	movs	r0, #0
   80e3c:	4b03      	ldr	r3, [pc, #12]	; (80e4c <sysclk_enable_usb+0x18>)
   80e3e:	4798      	blx	r3
		pmc_enable_udpck();
   80e40:	4b03      	ldr	r3, [pc, #12]	; (80e50 <sysclk_enable_usb+0x1c>)
   80e42:	4798      	blx	r3
   80e44:	bd08      	pop	{r3, pc}
   80e46:	bf00      	nop
   80e48:	00081101 	.word	0x00081101
   80e4c:	0008116d 	.word	0x0008116d
   80e50:	00081181 	.word	0x00081181

00080e54 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80e54:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80e56:	480e      	ldr	r0, [pc, #56]	; (80e90 <sysclk_init+0x3c>)
   80e58:	4b0e      	ldr	r3, [pc, #56]	; (80e94 <sysclk_init+0x40>)
   80e5a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80e5c:	2000      	movs	r0, #0
   80e5e:	213e      	movs	r1, #62	; 0x3e
   80e60:	4b0d      	ldr	r3, [pc, #52]	; (80e98 <sysclk_init+0x44>)
   80e62:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80e64:	4c0d      	ldr	r4, [pc, #52]	; (80e9c <sysclk_init+0x48>)
   80e66:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80e68:	2800      	cmp	r0, #0
   80e6a:	d0fc      	beq.n	80e66 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80e6c:	4b0c      	ldr	r3, [pc, #48]	; (80ea0 <sysclk_init+0x4c>)
   80e6e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80e70:	4a0c      	ldr	r2, [pc, #48]	; (80ea4 <sysclk_init+0x50>)
   80e72:	4b0d      	ldr	r3, [pc, #52]	; (80ea8 <sysclk_init+0x54>)
   80e74:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80e76:	4c0d      	ldr	r4, [pc, #52]	; (80eac <sysclk_init+0x58>)
   80e78:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80e7a:	2800      	cmp	r0, #0
   80e7c:	d0fc      	beq.n	80e78 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80e7e:	2010      	movs	r0, #16
   80e80:	4b0b      	ldr	r3, [pc, #44]	; (80eb0 <sysclk_init+0x5c>)
   80e82:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80e84:	4b0b      	ldr	r3, [pc, #44]	; (80eb4 <sysclk_init+0x60>)
   80e86:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80e88:	4801      	ldr	r0, [pc, #4]	; (80e90 <sysclk_init+0x3c>)
   80e8a:	4b02      	ldr	r3, [pc, #8]	; (80e94 <sysclk_init+0x40>)
   80e8c:	4798      	blx	r3
   80e8e:	bd10      	pop	{r4, pc}
   80e90:	0501bd00 	.word	0x0501bd00
   80e94:	200700b1 	.word	0x200700b1
   80e98:	0008107d 	.word	0x0008107d
   80e9c:	000810d1 	.word	0x000810d1
   80ea0:	000810e1 	.word	0x000810e1
   80ea4:	200d3f01 	.word	0x200d3f01
   80ea8:	400e0600 	.word	0x400e0600
   80eac:	000810f1 	.word	0x000810f1
   80eb0:	00081015 	.word	0x00081015
   80eb4:	000829e5 	.word	0x000829e5

00080eb8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80eb8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80eba:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80ebe:	d016      	beq.n	80eee <pio_set_peripheral+0x36>
   80ec0:	d804      	bhi.n	80ecc <pio_set_peripheral+0x14>
   80ec2:	b1c1      	cbz	r1, 80ef6 <pio_set_peripheral+0x3e>
   80ec4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80ec8:	d00a      	beq.n	80ee0 <pio_set_peripheral+0x28>
   80eca:	e013      	b.n	80ef4 <pio_set_peripheral+0x3c>
   80ecc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80ed0:	d011      	beq.n	80ef6 <pio_set_peripheral+0x3e>
   80ed2:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80ed6:	d00e      	beq.n	80ef6 <pio_set_peripheral+0x3e>
   80ed8:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80edc:	d10a      	bne.n	80ef4 <pio_set_peripheral+0x3c>
   80ede:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80ee0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80ee2:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80ee4:	400b      	ands	r3, r1
   80ee6:	ea23 0302 	bic.w	r3, r3, r2
   80eea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80eec:	e002      	b.n	80ef4 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80eee:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80ef0:	4313      	orrs	r3, r2
   80ef2:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80ef4:	6042      	str	r2, [r0, #4]
   80ef6:	4770      	bx	lr

00080ef8 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80ef8:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80efa:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80efe:	bf14      	ite	ne
   80f00:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f02:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80f04:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80f08:	bf14      	ite	ne
   80f0a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80f0c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80f0e:	f012 0f02 	tst.w	r2, #2
   80f12:	d002      	beq.n	80f1a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80f14:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80f18:	e004      	b.n	80f24 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   80f1a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80f1e:	bf18      	it	ne
   80f20:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80f24:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80f26:	6001      	str	r1, [r0, #0]
   80f28:	4770      	bx	lr
   80f2a:	bf00      	nop

00080f2c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   80f2c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80f2e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f30:	9c01      	ldr	r4, [sp, #4]
   80f32:	b10c      	cbz	r4, 80f38 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80f34:	6641      	str	r1, [r0, #100]	; 0x64
   80f36:	e000      	b.n	80f3a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f38:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   80f3a:	b10b      	cbz	r3, 80f40 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   80f3c:	6501      	str	r1, [r0, #80]	; 0x50
   80f3e:	e000      	b.n	80f42 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80f40:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80f42:	b10a      	cbz	r2, 80f48 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80f44:	6301      	str	r1, [r0, #48]	; 0x30
   80f46:	e000      	b.n	80f4a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80f48:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   80f4a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80f4c:	6001      	str	r1, [r0, #0]
}
   80f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80f52:	4770      	bx	lr

00080f54 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
   80f54:	b5f0      	push	{r4, r5, r6, r7, lr}
   80f56:	b083      	sub	sp, #12
   80f58:	4607      	mov	r7, r0
   80f5a:	460c      	mov	r4, r1
   80f5c:	4616      	mov	r6, r2
   80f5e:	461d      	mov	r5, r3
	/* Configure pins */
	switch (ul_type) {
   80f60:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80f64:	d01a      	beq.n	80f9c <pio_configure+0x48>
   80f66:	d806      	bhi.n	80f76 <pio_configure+0x22>
   80f68:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80f6c:	d00a      	beq.n	80f84 <pio_configure+0x30>
   80f6e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80f72:	d007      	beq.n	80f84 <pio_configure+0x30>
   80f74:	e028      	b.n	80fc8 <pio_configure+0x74>
   80f76:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80f7a:	d015      	beq.n	80fa8 <pio_configure+0x54>
   80f7c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80f80:	d012      	beq.n	80fa8 <pio_configure+0x54>
   80f82:	e021      	b.n	80fc8 <pio_configure+0x74>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
   80f84:	4638      	mov	r0, r7
   80f86:	4621      	mov	r1, r4
   80f88:	4632      	mov	r2, r6
   80f8a:	4b11      	ldr	r3, [pc, #68]	; (80fd0 <pio_configure+0x7c>)
   80f8c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80f8e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80f92:	bf14      	ite	ne
   80f94:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80f96:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80f98:	2001      	movs	r0, #1
   80f9a:	e016      	b.n	80fca <pio_configure+0x76>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
   80f9c:	4611      	mov	r1, r2
   80f9e:	461a      	mov	r2, r3
   80fa0:	4b0c      	ldr	r3, [pc, #48]	; (80fd4 <pio_configure+0x80>)
   80fa2:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80fa4:	2001      	movs	r0, #1
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
		break;

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
		break;
   80fa6:	e010      	b.n	80fca <pio_configure+0x76>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
   80fa8:	f005 0301 	and.w	r3, r5, #1
   80fac:	9300      	str	r3, [sp, #0]
   80fae:	4638      	mov	r0, r7
   80fb0:	4631      	mov	r1, r6
   80fb2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80fb6:	bf14      	ite	ne
   80fb8:	2200      	movne	r2, #0
   80fba:	2201      	moveq	r2, #1
   80fbc:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80fc0:	4c05      	ldr	r4, [pc, #20]	; (80fd8 <pio_configure+0x84>)
   80fc2:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   80fc4:	2001      	movs	r0, #1
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
		break;
   80fc6:	e000      	b.n	80fca <pio_configure+0x76>

	default:
		return 0;
   80fc8:	2000      	movs	r0, #0
	}

	return 1;
}
   80fca:	b003      	add	sp, #12
   80fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80fce:	bf00      	nop
   80fd0:	00080eb9 	.word	0x00080eb9
   80fd4:	00080ef9 	.word	0x00080ef9
   80fd8:	00080f2d 	.word	0x00080f2d

00080fdc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80fdc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80fde:	4770      	bx	lr

00080fe0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80fe0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80fe2:	4770      	bx	lr

00080fe4 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80fe4:	0943      	lsrs	r3, r0, #5
   80fe6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80fea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80fee:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   80ff0:	f000 001f 	and.w	r0, r0, #31
   80ff4:	2201      	movs	r2, #1
   80ff6:	4082      	lsls	r2, r0
   80ff8:	631a      	str	r2, [r3, #48]	; 0x30
   80ffa:	4770      	bx	lr

00080ffc <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80ffc:	0943      	lsrs	r3, r0, #5
   80ffe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81002:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81006:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   81008:	f000 001f 	and.w	r0, r0, #31
   8100c:	2201      	movs	r2, #1
   8100e:	4082      	lsls	r2, r0
   81010:	635a      	str	r2, [r3, #52]	; 0x34
   81012:	4770      	bx	lr

00081014 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81014:	4a18      	ldr	r2, [pc, #96]	; (81078 <pmc_switch_mck_to_pllack+0x64>)
   81016:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8101c:	4318      	orrs	r0, r3
   8101e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81020:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81022:	f013 0f08 	tst.w	r3, #8
   81026:	d003      	beq.n	81030 <pmc_switch_mck_to_pllack+0x1c>
   81028:	e009      	b.n	8103e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8102a:	3b01      	subs	r3, #1
   8102c:	d103      	bne.n	81036 <pmc_switch_mck_to_pllack+0x22>
   8102e:	e01e      	b.n	8106e <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81030:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81034:	4910      	ldr	r1, [pc, #64]	; (81078 <pmc_switch_mck_to_pllack+0x64>)
   81036:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81038:	f012 0f08 	tst.w	r2, #8
   8103c:	d0f5      	beq.n	8102a <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8103e:	4a0e      	ldr	r2, [pc, #56]	; (81078 <pmc_switch_mck_to_pllack+0x64>)
   81040:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81042:	f023 0303 	bic.w	r3, r3, #3
   81046:	f043 0302 	orr.w	r3, r3, #2
   8104a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8104c:	6e90      	ldr	r0, [r2, #104]	; 0x68
   8104e:	f010 0008 	ands.w	r0, r0, #8
   81052:	d004      	beq.n	8105e <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   81054:	2000      	movs	r0, #0
   81056:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   81058:	3b01      	subs	r3, #1
   8105a:	d103      	bne.n	81064 <pmc_switch_mck_to_pllack+0x50>
   8105c:	e009      	b.n	81072 <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8105e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81062:	4905      	ldr	r1, [pc, #20]	; (81078 <pmc_switch_mck_to_pllack+0x64>)
   81064:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81066:	f012 0f08 	tst.w	r2, #8
   8106a:	d0f5      	beq.n	81058 <pmc_switch_mck_to_pllack+0x44>
   8106c:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8106e:	2001      	movs	r0, #1
   81070:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   81072:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81074:	4770      	bx	lr
   81076:	bf00      	nop
   81078:	400e0600 	.word	0x400e0600

0008107c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8107c:	b138      	cbz	r0, 8108e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8107e:	4911      	ldr	r1, [pc, #68]	; (810c4 <pmc_switch_mainck_to_xtal+0x48>)
   81080:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   81082:	4a11      	ldr	r2, [pc, #68]	; (810c8 <pmc_switch_mainck_to_xtal+0x4c>)
   81084:	401a      	ands	r2, r3
   81086:	4b11      	ldr	r3, [pc, #68]	; (810cc <pmc_switch_mainck_to_xtal+0x50>)
   81088:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8108a:	620b      	str	r3, [r1, #32]
   8108c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8108e:	4a0d      	ldr	r2, [pc, #52]	; (810c4 <pmc_switch_mainck_to_xtal+0x48>)
   81090:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81092:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   81096:	f023 0303 	bic.w	r3, r3, #3
   8109a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8109e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   810a2:	0209      	lsls	r1, r1, #8
   810a4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   810a6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   810a8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   810aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   810ac:	f013 0f01 	tst.w	r3, #1
   810b0:	d0fb      	beq.n	810aa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   810b2:	4a04      	ldr	r2, [pc, #16]	; (810c4 <pmc_switch_mainck_to_xtal+0x48>)
   810b4:	6a13      	ldr	r3, [r2, #32]
   810b6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   810ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   810be:	6213      	str	r3, [r2, #32]
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop
   810c4:	400e0600 	.word	0x400e0600
   810c8:	fec8fffc 	.word	0xfec8fffc
   810cc:	01370002 	.word	0x01370002

000810d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   810d0:	4b02      	ldr	r3, [pc, #8]	; (810dc <pmc_osc_is_ready_mainck+0xc>)
   810d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   810d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   810d8:	4770      	bx	lr
   810da:	bf00      	nop
   810dc:	400e0600 	.word	0x400e0600

000810e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   810e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   810e4:	4b01      	ldr	r3, [pc, #4]	; (810ec <pmc_disable_pllack+0xc>)
   810e6:	629a      	str	r2, [r3, #40]	; 0x28
   810e8:	4770      	bx	lr
   810ea:	bf00      	nop
   810ec:	400e0600 	.word	0x400e0600

000810f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   810f0:	4b02      	ldr	r3, [pc, #8]	; (810fc <pmc_is_locked_pllack+0xc>)
   810f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   810f4:	f000 0002 	and.w	r0, r0, #2
   810f8:	4770      	bx	lr
   810fa:	bf00      	nop
   810fc:	400e0600 	.word	0x400e0600

00081100 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   81100:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   81104:	4b03      	ldr	r3, [pc, #12]	; (81114 <pmc_enable_upll_clock+0x14>)
   81106:	61da      	str	r2, [r3, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   81108:	461a      	mov	r2, r3
   8110a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8110c:	f013 0f40 	tst.w	r3, #64	; 0x40
   81110:	d0fb      	beq.n	8110a <pmc_enable_upll_clock+0xa>
}
   81112:	4770      	bx	lr
   81114:	400e0600 	.word	0x400e0600

00081118 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81118:	282c      	cmp	r0, #44	; 0x2c
   8111a:	d81e      	bhi.n	8115a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8111c:	281f      	cmp	r0, #31
   8111e:	d80c      	bhi.n	8113a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81120:	4b11      	ldr	r3, [pc, #68]	; (81168 <pmc_enable_periph_clk+0x50>)
   81122:	699a      	ldr	r2, [r3, #24]
   81124:	2301      	movs	r3, #1
   81126:	4083      	lsls	r3, r0
   81128:	401a      	ands	r2, r3
   8112a:	4293      	cmp	r3, r2
   8112c:	d017      	beq.n	8115e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8112e:	2301      	movs	r3, #1
   81130:	4083      	lsls	r3, r0
   81132:	4a0d      	ldr	r2, [pc, #52]	; (81168 <pmc_enable_periph_clk+0x50>)
   81134:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81136:	2000      	movs	r0, #0
   81138:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8113a:	4b0b      	ldr	r3, [pc, #44]	; (81168 <pmc_enable_periph_clk+0x50>)
   8113c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   81140:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81142:	2301      	movs	r3, #1
   81144:	4083      	lsls	r3, r0
   81146:	401a      	ands	r2, r3
   81148:	4293      	cmp	r3, r2
   8114a:	d00a      	beq.n	81162 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8114c:	2301      	movs	r3, #1
   8114e:	4083      	lsls	r3, r0
   81150:	4a05      	ldr	r2, [pc, #20]	; (81168 <pmc_enable_periph_clk+0x50>)
   81152:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   81156:	2000      	movs	r0, #0
   81158:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8115a:	2001      	movs	r0, #1
   8115c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8115e:	2000      	movs	r0, #0
   81160:	4770      	bx	lr
   81162:	2000      	movs	r0, #0
}
   81164:	4770      	bx	lr
   81166:	bf00      	nop
   81168:	400e0600 	.word	0x400e0600

0008116c <pmc_switch_udpck_to_upllck>:
 *
 * \param ul_usbdiv Clock divisor.
 */
void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
{
	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
   8116c:	0200      	lsls	r0, r0, #8
   8116e:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
   81172:	f040 0001 	orr.w	r0, r0, #1
   81176:	4b01      	ldr	r3, [pc, #4]	; (8117c <pmc_switch_udpck_to_upllck+0x10>)
   81178:	6398      	str	r0, [r3, #56]	; 0x38
   8117a:	4770      	bx	lr
   8117c:	400e0600 	.word	0x400e0600

00081180 <pmc_enable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCER = PMC_SCER_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCER = PMC_SCER_USBCLK;
#else
	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
   81180:	2220      	movs	r2, #32
   81182:	4b01      	ldr	r3, [pc, #4]	; (81188 <pmc_enable_udpck+0x8>)
   81184:	601a      	str	r2, [r3, #0]
   81186:	4770      	bx	lr
   81188:	400e0600 	.word	0x400e0600

0008118c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8118c:	4a03      	ldr	r2, [pc, #12]	; (8119c <pmc_set_fast_startup_input+0x10>)
   8118e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   81190:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   81194:	4303      	orrs	r3, r0
   81196:	6713      	str	r3, [r2, #112]	; 0x70
   81198:	4770      	bx	lr
   8119a:	bf00      	nop
   8119c:	400e0600 	.word	0x400e0600

000811a0 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   811a0:	4b02      	ldr	r3, [pc, #8]	; (811ac <pmc_is_wakeup_clocks_restored+0xc>)
   811a2:	7818      	ldrb	r0, [r3, #0]
}
   811a4:	f080 0001 	eor.w	r0, r0, #1
   811a8:	4770      	bx	lr
   811aa:	bf00      	nop
   811ac:	20070bfc 	.word	0x20070bfc

000811b0 <board_init>:
 */

#include <asf.h>
#include "user_board.h"

void board_init(void) {
   811b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811b4:	b089      	sub	sp, #36	; 0x24
	
	/***************************************************************************************/
	/* Generic Board Initializations                                                       */
	/***************************************************************************************/  
	irq_initialize_vectors();
	cpu_irq_enable();
   811b6:	2501      	movs	r5, #1
   811b8:	4b68      	ldr	r3, [pc, #416]	; (8135c <board_init+0x1ac>)
   811ba:	701d      	strb	r5, [r3, #0]
   811bc:	f3bf 8f5f 	dmb	sy
   811c0:	b662      	cpsie	i
	
	/***************************************************************************************/
	/* GPIO Initialization                                                                 */
	/***************************************************************************************/	
	pmc_enable_periph_clk(ID_PIOA);		// enables clk on PIOA
   811c2:	200b      	movs	r0, #11
   811c4:	4e66      	ldr	r6, [pc, #408]	; (81360 <board_init+0x1b0>)
   811c6:	47b0      	blx	r6
	pmc_enable_periph_clk(ID_PIOB);		// enables clk on PIOB
   811c8:	200c      	movs	r0, #12
   811ca:	47b0      	blx	r6
	
	/* Initialize contactors, user LEDs, and buzzer to output. Default drive low */
	pio_set_output(CONTACTORS_PIO, CONTACTORS_PINS, LOW, DISABLE, ENABLE);
   811cc:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 813c0 <board_init+0x210>
   811d0:	9500      	str	r5, [sp, #0]
   811d2:	4640      	mov	r0, r8
   811d4:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
   811d8:	2200      	movs	r2, #0
   811da:	4613      	mov	r3, r2
   811dc:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 813c4 <board_init+0x214>
   811e0:	47d0      	blx	sl
	pio_set_output(BUZ_LED_PIO, BUZ_LED_PINS, LOW, DISABLE, ENABLE);
   811e2:	9500      	str	r5, [sp, #0]
   811e4:	4640      	mov	r0, r8
   811e6:	210f      	movs	r1, #15
   811e8:	2200      	movs	r2, #0
   811ea:	4613      	mov	r3, r2
   811ec:	47d0      	blx	sl
	
	
	/***************************************************************************************/
	/* Watchdog Timer Initialization                                                       */
	/***************************************************************************************/
	wdt_disable(WDT);
   811ee:	485d      	ldr	r0, [pc, #372]	; (81364 <board_init+0x1b4>)
   811f0:	4b5d      	ldr	r3, [pc, #372]	; (81368 <board_init+0x1b8>)
   811f2:	4798      	blx	r3
  
	/***************************************************************************************/
	/* USART Initialization                                                                */
	/***************************************************************************************/
	pio_set_output(CONSOLE_USART_PIO, CONSOLE_USART_PINS, HIGH, DISABLE, ENABLE);
   811f4:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 813c8 <board_init+0x218>
   811f8:	9500      	str	r5, [sp, #0]
   811fa:	4648      	mov	r0, r9
   811fc:	f44f 6140 	mov.w	r1, #3072	; 0xc00
   81200:	462a      	mov	r2, r5
   81202:	2300      	movs	r3, #0
   81204:	47d0      	blx	sl
	pio_configure(CONSOLE_USART_PIO, PIO_PERIPH_A, CONSOLE_USART_PINS, PIO_DEFAULT);
   81206:	4648      	mov	r0, r9
   81208:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8120c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   81210:	2300      	movs	r3, #0
   81212:	4f56      	ldr	r7, [pc, #344]	; (8136c <board_init+0x1bc>)
   81214:	47b8      	blx	r7
	const sam_usart_opt_t console_usart_options = {
   81216:	2400      	movs	r4, #0
   81218:	9405      	str	r4, [sp, #20]
   8121a:	9406      	str	r4, [sp, #24]
   8121c:	9407      	str	r4, [sp, #28]
   8121e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81222:	9302      	str	r3, [sp, #8]
   81224:	23c0      	movs	r3, #192	; 0xc0
   81226:	9303      	str	r3, [sp, #12]
   81228:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8122c:	9304      	str	r3, [sp, #16]
		.channel_mode = CONSOLE_USART_CHMODE,
		.char_length = CONSOLE_USART_CHARLEN,
		.parity_type = CONSOLE_USART_PARITY,
		.stop_bits = CONSOLE_USART_STOPBITS		
	};	
	pmc_enable_periph_clk(CONSOLE_USART_ID);
   8122e:	2011      	movs	r0, #17
   81230:	47b0      	blx	r6
	usart_init_rs232(CONSOLE_USART, &console_usart_options, sysclk_get_main_hz());
   81232:	f8df b198 	ldr.w	fp, [pc, #408]	; 813cc <board_init+0x21c>
   81236:	484e      	ldr	r0, [pc, #312]	; (81370 <board_init+0x1c0>)
   81238:	a902      	add	r1, sp, #8
   8123a:	465a      	mov	r2, fp
   8123c:	4b4d      	ldr	r3, [pc, #308]	; (81374 <board_init+0x1c4>)
   8123e:	4798      	blx	r3
	usart_enable_tx(CONSOLE_USART);
   81240:	484b      	ldr	r0, [pc, #300]	; (81370 <board_init+0x1c0>)
   81242:	4b4d      	ldr	r3, [pc, #308]	; (81378 <board_init+0x1c8>)
   81244:	4798      	blx	r3
	
	/***************************************************************************************/
	/* SPI Initialization                                                                  */
	/***************************************************************************************/
	pio_configure(OLED_SPI_PIO, PIO_PERIPH_A, OLED_SPI_PINS, PIO_DEFAULT);
   81246:	4648      	mov	r0, r9
   81248:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8124c:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   81250:	4623      	mov	r3, r4
   81252:	47b8      	blx	r7
	pio_set_output(OLED_RST_PIO, OLED_RST_PIN, HIGH, DISABLE, ENABLE);
   81254:	9500      	str	r5, [sp, #0]
   81256:	4640      	mov	r0, r8
   81258:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   8125c:	462a      	mov	r2, r5
   8125e:	4623      	mov	r3, r4
   81260:	47d0      	blx	sl
	spi_enable_clock(OLED_SPI);
   81262:	f8df a16c 	ldr.w	sl, [pc, #364]	; 813d0 <board_init+0x220>
   81266:	4650      	mov	r0, sl
   81268:	4b44      	ldr	r3, [pc, #272]	; (8137c <board_init+0x1cc>)
   8126a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
   8126c:	2380      	movs	r3, #128	; 0x80
   8126e:	f8ca 3000 	str.w	r3, [sl]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
   81272:	f8da 3004 	ldr.w	r3, [sl, #4]
   81276:	432b      	orrs	r3, r5
   81278:	f8ca 3004 	str.w	r3, [sl, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   8127c:	f8da 3004 	ldr.w	r3, [sl, #4]
   81280:	f043 0310 	orr.w	r3, r3, #16
   81284:	f8ca 3004 	str.w	r3, [sl, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   81288:	f8da 3004 	ldr.w	r3, [sl, #4]
   8128c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   81290:	f8ca 3004 	str.w	r3, [sl, #4]
	spi_reset(OLED_SPI);
	spi_set_master_mode(OLED_SPI);
	spi_disable_mode_fault_detect(OLED_SPI);
	spi_disable_loopback(OLED_SPI);
	spi_set_peripheral_chip_select_value(OLED_SPI, spi_get_pcs(OLED_CS_ID));
   81294:	4650      	mov	r0, sl
   81296:	210e      	movs	r1, #14
   81298:	4b39      	ldr	r3, [pc, #228]	; (81380 <board_init+0x1d0>)
   8129a:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_fixed_peripheral_select(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PS);
   8129c:	f8da 3004 	ldr.w	r3, [sl, #4]
   812a0:	f023 0302 	bic.w	r3, r3, #2
   812a4:	f8ca 3004 	str.w	r3, [sl, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_peripheral_select_decode(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
   812a8:	f8da 3004 	ldr.w	r3, [sl, #4]
   812ac:	f023 0304 	bic.w	r3, r3, #4
   812b0:	f8ca 3004 	str.w	r3, [sl, #4]
	spi_set_fixed_peripheral_select(OLED_SPI);
	spi_disable_peripheral_select_decode(OLED_SPI);
	spi_set_delay_between_chip_select(OLED_SPI, CONFIG_SPI_MASTER_DELAY_BCS);
   812b4:	4650      	mov	r0, sl
   812b6:	2102      	movs	r1, #2
   812b8:	4b32      	ldr	r3, [pc, #200]	; (81384 <board_init+0x1d4>)
   812ba:	4798      	blx	r3
	spi_set_transfer_delay(OLED_SPI, OLED_CS_ID, CONFIG_SPI_MASTER_DELAY_BS, 
   812bc:	4650      	mov	r0, sl
   812be:	4621      	mov	r1, r4
   812c0:	2206      	movs	r2, #6
   812c2:	4623      	mov	r3, r4
   812c4:	f8df c10c 	ldr.w	ip, [pc, #268]	; 813d4 <board_init+0x224>
   812c8:	47e0      	blx	ip
		CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(OLED_SPI, OLED_CS_ID, CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
   812ca:	4650      	mov	r0, sl
   812cc:	4621      	mov	r1, r4
   812ce:	2208      	movs	r2, #8
   812d0:	4b2d      	ldr	r3, [pc, #180]	; (81388 <board_init+0x1d8>)
   812d2:	4798      	blx	r3
	spi_set_baudrate_div(OLED_SPI, OLED_CS_ID, spi_calc_baudrate_div((CONFIG_SPI_MASTER_BAUD),
   812d4:	482d      	ldr	r0, [pc, #180]	; (8138c <board_init+0x1dc>)
   812d6:	492e      	ldr	r1, [pc, #184]	; (81390 <board_init+0x1e0>)
   812d8:	4b2e      	ldr	r3, [pc, #184]	; (81394 <board_init+0x1e4>)
   812da:	4798      	blx	r3
   812dc:	b2c2      	uxtb	r2, r0
   812de:	4650      	mov	r0, sl
   812e0:	4621      	mov	r1, r4
   812e2:	4b2d      	ldr	r3, [pc, #180]	; (81398 <board_init+0x1e8>)
   812e4:	4798      	blx	r3
		 sysclk_get_peripheral_hz()));
	spi_configure_cs_behavior(OLED_SPI, OLED_CS_ID, SPI_CS_KEEP_LOW);
   812e6:	4650      	mov	r0, sl
   812e8:	4621      	mov	r1, r4
   812ea:	2208      	movs	r2, #8
   812ec:	4b2b      	ldr	r3, [pc, #172]	; (8139c <board_init+0x1ec>)
   812ee:	4798      	blx	r3
	spi_set_clock_polarity(OLED_SPI, OLED_CS_ID, CONFIG_SPI_MASTER_POLARITY);
   812f0:	4650      	mov	r0, sl
   812f2:	4621      	mov	r1, r4
   812f4:	462a      	mov	r2, r5
   812f6:	4b2a      	ldr	r3, [pc, #168]	; (813a0 <board_init+0x1f0>)
   812f8:	4798      	blx	r3
	spi_set_clock_phase(OLED_SPI, OLED_CS_ID, CONFIG_SPI_MASTER_PHASE);
   812fa:	4650      	mov	r0, sl
   812fc:	4621      	mov	r1, r4
   812fe:	462a      	mov	r2, r5
   81300:	4b28      	ldr	r3, [pc, #160]	; (813a4 <board_init+0x1f4>)
   81302:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SPIEN;
   81304:	f8ca 5000 	str.w	r5, [sl]
	spi_enable(OLED_SPI);
	
	/***************************************************************************************/
	/* CAN Initialization                                                                  */
	/***************************************************************************************/
	pio_configure(RLEC_CAN_PIO, PIO_PERIPH_A, RLEC_CAN_PINS, PIO_DEFAULT);
   81308:	4648      	mov	r0, r9
   8130a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8130e:	2203      	movs	r2, #3
   81310:	4623      	mov	r3, r4
   81312:	47b8      	blx	r7
	pio_configure(V_CAN_PIO, PIO_PERIPH_A, V_CAN_PINS, PIO_DEFAULT);
   81314:	4640      	mov	r0, r8
   81316:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8131a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   8131e:	4623      	mov	r3, r4
   81320:	47b8      	blx	r7
		
	pmc_enable_periph_clk(RLEC_CAN_ID);
   81322:	202b      	movs	r0, #43	; 0x2b
   81324:	47b0      	blx	r6
	pmc_enable_periph_clk(V_CAN_ID);
   81326:	202c      	movs	r0, #44	; 0x2c
   81328:	47b0      	blx	r6
	
	can_init(RLEC_CAN, sysclk_get_main_hz(), CAN_BPS_250K);	// init CAN @ 500 kbps
   8132a:	4d1f      	ldr	r5, [pc, #124]	; (813a8 <board_init+0x1f8>)
   8132c:	4628      	mov	r0, r5
   8132e:	4659      	mov	r1, fp
   81330:	22fa      	movs	r2, #250	; 0xfa
   81332:	4e1e      	ldr	r6, [pc, #120]	; (813ac <board_init+0x1fc>)
   81334:	47b0      	blx	r6
	can_init(V_CAN, sysclk_get_main_hz(), CAN_BPS_250K);
   81336:	4c1e      	ldr	r4, [pc, #120]	; (813b0 <board_init+0x200>)
   81338:	4620      	mov	r0, r4
   8133a:	4659      	mov	r1, fp
   8133c:	22fa      	movs	r2, #250	; 0xfa
   8133e:	47b0      	blx	r6
	
	can_reset_all_mailbox(RLEC_CAN);
   81340:	4628      	mov	r0, r5
   81342:	4d1c      	ldr	r5, [pc, #112]	; (813b4 <board_init+0x204>)
   81344:	47a8      	blx	r5
	can_reset_all_mailbox(V_CAN);
   81346:	4620      	mov	r0, r4
   81348:	47a8      	blx	r5
  
	can_disable_tx_repeat(V_CAN);		// Disables Tx repeat
   8134a:	4620      	mov	r0, r4
   8134c:	4b1a      	ldr	r3, [pc, #104]	; (813b8 <board_init+0x208>)
   8134e:	4798      	blx	r3
	/* USB Initialization                                                                  */
	/***************************************************************************************/  
	//udc_start();
	//stdio_usb_init();
	//stdio_usb_enable();
	udc_start();
   81350:	4b1a      	ldr	r3, [pc, #104]	; (813bc <board_init+0x20c>)
   81352:	4798      	blx	r3
	//udc_attach();
  
}
   81354:	b009      	add	sp, #36	; 0x24
   81356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8135a:	bf00      	nop
   8135c:	200701d8 	.word	0x200701d8
   81360:	00081119 	.word	0x00081119
   81364:	400e1a50 	.word	0x400e1a50
   81368:	00082929 	.word	0x00082929
   8136c:	00080f55 	.word	0x00080f55
   81370:	40098000 	.word	0x40098000
   81374:	000828cd 	.word	0x000828cd
   81378:	00082921 	.word	0x00082921
   8137c:	000813d9 	.word	0x000813d9
   81380:	000813f1 	.word	0x000813f1
   81384:	00081409 	.word	0x00081409
   81388:	000814d9 	.word	0x000814d9
   8138c:	0007a120 	.word	0x0007a120
   81390:	0501bd00 	.word	0x0501bd00
   81394:	000814ed 	.word	0x000814ed
   81398:	00081505 	.word	0x00081505
   8139c:	00081495 	.word	0x00081495
   813a0:	00081455 	.word	0x00081455
   813a4:	00081475 	.word	0x00081475
   813a8:	400b4000 	.word	0x400b4000
   813ac:	00080cc5 	.word	0x00080cc5
   813b0:	400b8000 	.word	0x400b8000
   813b4:	00080ca1 	.word	0x00080ca1
   813b8:	00080c11 	.word	0x00080c11
   813bc:	0008078d 	.word	0x0008078d
   813c0:	400e1000 	.word	0x400e1000
   813c4:	00080f2d 	.word	0x00080f2d
   813c8:	400e0e00 	.word	0x400e0e00
   813cc:	0a037a00 	.word	0x0a037a00
   813d0:	40008000 	.word	0x40008000
   813d4:	0008151d 	.word	0x0008151d

000813d8 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   813d8:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
   813da:	4b03      	ldr	r3, [pc, #12]	; (813e8 <spi_enable_clock+0x10>)
   813dc:	4298      	cmp	r0, r3
   813de:	d102      	bne.n	813e6 <spi_enable_clock+0xe>
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   813e0:	2018      	movs	r0, #24
   813e2:	4b02      	ldr	r3, [pc, #8]	; (813ec <spi_enable_clock+0x14>)
   813e4:	4798      	blx	r3
   813e6:	bd08      	pop	{r3, pc}
   813e8:	40008000 	.word	0x40008000
   813ec:	00081119 	.word	0x00081119

000813f0 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
   813f0:	6843      	ldr	r3, [r0, #4]
   813f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   813f6:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
   813f8:	6843      	ldr	r3, [r0, #4]
   813fa:	0409      	lsls	r1, r1, #16
   813fc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
   81400:	430b      	orrs	r3, r1
   81402:	6043      	str	r3, [r0, #4]
   81404:	4770      	bx	lr
   81406:	bf00      	nop

00081408 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
   81408:	6843      	ldr	r3, [r0, #4]
   8140a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8140e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
   81410:	6843      	ldr	r3, [r0, #4]
   81412:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
   81416:	6041      	str	r1, [r0, #4]
   81418:	4770      	bx	lr
   8141a:	bf00      	nop

0008141c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   8141c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   8141e:	f643 2499 	movw	r4, #15001	; 0x3a99
   81422:	e001      	b.n	81428 <spi_write+0xc>
		if (!timeout--) {
   81424:	3c01      	subs	r4, #1
   81426:	d011      	beq.n	8144c <spi_write+0x30>
		uint8_t uc_pcs, uint8_t uc_last)
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   81428:	6905      	ldr	r5, [r0, #16]
   8142a:	f015 0f02 	tst.w	r5, #2
   8142e:	d0f9      	beq.n	81424 <spi_write+0x8>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
   81430:	6844      	ldr	r4, [r0, #4]
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   81432:	f014 0f02 	tst.w	r4, #2
   81436:	d006      	beq.n	81446 <spi_write+0x2a>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   81438:	0412      	lsls	r2, r2, #16
   8143a:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   8143e:	4311      	orrs	r1, r2
		if (uc_last) {
   81440:	b10b      	cbz	r3, 81446 <spi_write+0x2a>
			value |= SPI_TDR_LASTXFER;
   81442:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
   81446:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
   81448:	2000      	movs	r0, #0
   8144a:	e000      	b.n	8144e <spi_write+0x32>
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
   8144c:	2001      	movs	r0, #1
	}

	p_spi->SPI_TDR = value;

	return SPI_OK;
}
   8144e:	bc30      	pop	{r4, r5}
   81450:	4770      	bx	lr
   81452:	bf00      	nop

00081454 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
   81454:	b132      	cbz	r2, 81464 <spi_set_clock_polarity+0x10>
   81456:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   8145a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8145c:	f043 0301 	orr.w	r3, r3, #1
   81460:	6303      	str	r3, [r0, #48]	; 0x30
   81462:	4770      	bx	lr
   81464:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   81468:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8146a:	f023 0301 	bic.w	r3, r3, #1
   8146e:	6303      	str	r3, [r0, #48]	; 0x30
   81470:	4770      	bx	lr
   81472:	bf00      	nop

00081474 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
   81474:	b132      	cbz	r2, 81484 <spi_set_clock_phase+0x10>
   81476:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   8147a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8147c:	f043 0302 	orr.w	r3, r3, #2
   81480:	6303      	str	r3, [r0, #48]	; 0x30
   81482:	4770      	bx	lr
   81484:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   81488:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8148a:	f023 0302 	bic.w	r3, r3, #2
   8148e:	6303      	str	r3, [r0, #48]	; 0x30
   81490:	4770      	bx	lr
   81492:	bf00      	nop

00081494 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
   81494:	2a04      	cmp	r2, #4
   81496:	d10a      	bne.n	814ae <spi_configure_cs_behavior+0x1a>
   81498:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   8149c:	6b03      	ldr	r3, [r0, #48]	; 0x30
   8149e:	f023 0308 	bic.w	r3, r3, #8
   814a2:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
   814a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814a6:	f043 0304 	orr.w	r3, r3, #4
   814aa:	6303      	str	r3, [r0, #48]	; 0x30
   814ac:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
   814ae:	b952      	cbnz	r2, 814c6 <spi_configure_cs_behavior+0x32>
   814b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
   814b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814b6:	f023 0308 	bic.w	r3, r3, #8
   814ba:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
   814bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814be:	f023 0304 	bic.w	r3, r3, #4
   814c2:	6303      	str	r3, [r0, #48]	; 0x30
   814c4:	4770      	bx	lr
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
   814c6:	2a08      	cmp	r2, #8
   814c8:	d105      	bne.n	814d6 <spi_configure_cs_behavior+0x42>
   814ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
   814ce:	6b03      	ldr	r3, [r0, #48]	; 0x30
   814d0:	f043 0308 	orr.w	r3, r3, #8
   814d4:	6303      	str	r3, [r0, #48]	; 0x30
   814d6:	4770      	bx	lr

000814d8 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
   814d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
   814dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   814de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
   814e2:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
   814e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   814e6:	431a      	orrs	r2, r3
   814e8:	630a      	str	r2, [r1, #48]	; 0x30
   814ea:	4770      	bx	lr

000814ec <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   814ec:	1e43      	subs	r3, r0, #1
	int baud_div = div_ceil(mck, baudrate);
   814ee:	4419      	add	r1, r3
   814f0:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   814f4:	1e43      	subs	r3, r0, #1
   814f6:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
   814f8:	bf94      	ite	ls
   814fa:	b280      	uxthls	r0, r0
{
	int baud_div = div_ceil(mck, baudrate);

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
		return -1;
   814fc:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
	}

	return baud_div;
}
   81500:	b200      	sxth	r0, r0
   81502:	4770      	bx	lr

00081504 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   81504:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   81508:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8150a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   8150e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   81510:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81512:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   81516:	630a      	str	r2, [r1, #48]	; 0x30
   81518:	4770      	bx	lr
   8151a:	bf00      	nop

0008151c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
   8151c:	b410      	push	{r4}
   8151e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   81522:	6b08      	ldr	r0, [r1, #48]	; 0x30
   81524:	b280      	uxth	r0, r0
   81526:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
   81528:	6b0c      	ldr	r4, [r1, #48]	; 0x30
   8152a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
   8152e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   81532:	630a      	str	r2, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
   81534:	f85d 4b04 	ldr.w	r4, [sp], #4
   81538:	4770      	bx	lr
   8153a:	bf00      	nop

0008153c <udd_ctrl_init>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8153c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81540:	b672      	cpsid	i
   81542:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81546:	2100      	movs	r1, #0
   81548:	4a0a      	ldr	r2, [pc, #40]	; (81574 <udd_ctrl_init+0x38>)
   8154a:	7011      	strb	r1, [r2, #0]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   8154c:	2101      	movs	r1, #1
   8154e:	4a0a      	ldr	r2, [pc, #40]	; (81578 <udd_ctrl_init+0x3c>)
   81550:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81552:	b923      	cbnz	r3, 8155e <udd_ctrl_init+0x22>
		cpu_irq_enable();
   81554:	4b07      	ldr	r3, [pc, #28]	; (81574 <udd_ctrl_init+0x38>)
   81556:	7019      	strb	r1, [r3, #0]
   81558:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8155c:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   8155e:	2202      	movs	r2, #2
   81560:	4b06      	ldr	r3, [pc, #24]	; (8157c <udd_ctrl_init+0x40>)
   81562:	601a      	str	r2, [r3, #0]

	udd_g_ctrlreq.callback = NULL;
   81564:	4a06      	ldr	r2, [pc, #24]	; (81580 <udd_ctrl_init+0x44>)
   81566:	2300      	movs	r3, #0
   81568:	6113      	str	r3, [r2, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   8156a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   8156c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   8156e:	4a05      	ldr	r2, [pc, #20]	; (81584 <udd_ctrl_init+0x48>)
   81570:	7013      	strb	r3, [r2, #0]
   81572:	4770      	bx	lr
   81574:	200701d8 	.word	0x200701d8
   81578:	400ac220 	.word	0x400ac220
   8157c:	400ac160 	.word	0x400ac160
   81580:	20070c9c 	.word	0x20070c9c
   81584:	20070c4d 	.word	0x20070c4d

00081588 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   81588:	2205      	movs	r2, #5
   8158a:	4b03      	ldr	r3, [pc, #12]	; (81598 <udd_ctrl_stall_data+0x10>)
   8158c:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   8158e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81592:	4b02      	ldr	r3, [pc, #8]	; (8159c <udd_ctrl_stall_data+0x14>)
   81594:	601a      	str	r2, [r3, #0]
   81596:	4770      	bx	lr
   81598:	20070c4d 	.word	0x20070c4d
   8159c:	400ac1f0 	.word	0x400ac1f0

000815a0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   815a0:	2203      	movs	r2, #3
   815a2:	4b0d      	ldr	r3, [pc, #52]	; (815d8 <udd_ctrl_send_zlp_in+0x38>)
   815a4:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   815a6:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   815aa:	b672      	cpsid	i
   815ac:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   815b0:	2100      	movs	r1, #0
   815b2:	4a0a      	ldr	r2, [pc, #40]	; (815dc <udd_ctrl_send_zlp_in+0x3c>)
   815b4:	7011      	strb	r1, [r2, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   815b6:	480a      	ldr	r0, [pc, #40]	; (815e0 <udd_ctrl_send_zlp_in+0x40>)
   815b8:	2101      	movs	r1, #1
   815ba:	6001      	str	r1, [r0, #0]
	udd_enable_in_send_interrupt(0);
   815bc:	4a09      	ldr	r2, [pc, #36]	; (815e4 <udd_ctrl_send_zlp_in+0x44>)
   815be:	6011      	str	r1, [r2, #0]
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   815c0:	2108      	movs	r1, #8
   815c2:	6001      	str	r1, [r0, #0]
	udd_enable_nak_out_interrupt(0);
   815c4:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   815c6:	b92b      	cbnz	r3, 815d4 <udd_ctrl_send_zlp_in+0x34>
		cpu_irq_enable();
   815c8:	2201      	movs	r2, #1
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <udd_ctrl_send_zlp_in+0x3c>)
   815cc:	701a      	strb	r2, [r3, #0]
   815ce:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   815d2:	b662      	cpsie	i
   815d4:	4770      	bx	lr
   815d6:	bf00      	nop
   815d8:	20070c4d 	.word	0x20070c4d
   815dc:	200701d8 	.word	0x200701d8
   815e0:	400ac160 	.word	0x400ac160
   815e4:	400ac1f0 	.word	0x400ac1f0

000815e8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
   815e8:	b508      	push	{r3, lr}
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   815ea:	4b02      	ldr	r3, [pc, #8]	; (815f4 <udd_ctrl_endofrequest+0xc>)
   815ec:	691b      	ldr	r3, [r3, #16]
   815ee:	b103      	cbz	r3, 815f2 <udd_ctrl_endofrequest+0xa>
		udd_g_ctrlreq.callback();
   815f0:	4798      	blx	r3
   815f2:	bd08      	pop	{r3, pc}
   815f4:	20070c9c 	.word	0x20070c9c

000815f8 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
   815f8:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   815fa:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   815fe:	b672      	cpsid	i
   81600:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81604:	2100      	movs	r1, #0
   81606:	4a48      	ldr	r2, [pc, #288]	; (81728 <udd_ctrl_in_sent+0x130>)
   81608:	7011      	strb	r1, [r2, #0]
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
   8160a:	2101      	movs	r1, #1
   8160c:	4a47      	ldr	r2, [pc, #284]	; (8172c <udd_ctrl_in_sent+0x134>)
   8160e:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81610:	b923      	cbnz	r3, 8161c <udd_ctrl_in_sent+0x24>
		cpu_irq_enable();
   81612:	4b45      	ldr	r3, [pc, #276]	; (81728 <udd_ctrl_in_sent+0x130>)
   81614:	7019      	strb	r1, [r3, #0]
   81616:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8161a:	b662      	cpsie	i
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   8161c:	4b44      	ldr	r3, [pc, #272]	; (81730 <udd_ctrl_in_sent+0x138>)
   8161e:	781b      	ldrb	r3, [r3, #0]
   81620:	2b03      	cmp	r3, #3
   81622:	d104      	bne.n	8162e <udd_ctrl_in_sent+0x36>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   81624:	4b43      	ldr	r3, [pc, #268]	; (81734 <udd_ctrl_in_sent+0x13c>)
   81626:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   81628:	4b43      	ldr	r3, [pc, #268]	; (81738 <udd_ctrl_in_sent+0x140>)
   8162a:	4798      	blx	r3
		return;
   8162c:	bd38      	pop	{r3, r4, r5, pc}
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8162e:	4b43      	ldr	r3, [pc, #268]	; (8173c <udd_ctrl_in_sent+0x144>)
   81630:	881a      	ldrh	r2, [r3, #0]
   81632:	4b43      	ldr	r3, [pc, #268]	; (81740 <udd_ctrl_in_sent+0x148>)
   81634:	899c      	ldrh	r4, [r3, #12]
   81636:	1aa4      	subs	r4, r4, r2
   81638:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   8163a:	2c00      	cmp	r4, #0
   8163c:	d12e      	bne.n	8169c <udd_ctrl_in_sent+0xa4>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8163e:	4941      	ldr	r1, [pc, #260]	; (81744 <udd_ctrl_in_sent+0x14c>)
   81640:	880b      	ldrh	r3, [r1, #0]
   81642:	4413      	add	r3, r2
   81644:	b29b      	uxth	r3, r3
   81646:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   81648:	4a3d      	ldr	r2, [pc, #244]	; (81740 <udd_ctrl_in_sent+0x148>)
   8164a:	88d2      	ldrh	r2, [r2, #6]
   8164c:	429a      	cmp	r2, r3
   8164e:	d002      	beq.n	81656 <udd_ctrl_in_sent+0x5e>
					|| b_shortpacket) {
   81650:	4b3d      	ldr	r3, [pc, #244]	; (81748 <udd_ctrl_in_sent+0x150>)
   81652:	781b      	ldrb	r3, [r3, #0]
   81654:	b1c3      	cbz	r3, 81688 <udd_ctrl_in_sent+0x90>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   81656:	2204      	movs	r2, #4
   81658:	4b35      	ldr	r3, [pc, #212]	; (81730 <udd_ctrl_in_sent+0x138>)
   8165a:	701a      	strb	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8165c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81660:	b672      	cpsid	i
   81662:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81666:	2100      	movs	r1, #0
   81668:	4a2f      	ldr	r2, [pc, #188]	; (81728 <udd_ctrl_in_sent+0x130>)
   8166a:	7011      	strb	r1, [r2, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
   8166c:	2210      	movs	r2, #16
   8166e:	4937      	ldr	r1, [pc, #220]	; (8174c <udd_ctrl_in_sent+0x154>)
   81670:	600a      	str	r2, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   81672:	3190      	adds	r1, #144	; 0x90
   81674:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81676:	2b00      	cmp	r3, #0
   81678:	d154      	bne.n	81724 <udd_ctrl_in_sent+0x12c>
		cpu_irq_enable();
   8167a:	2201      	movs	r2, #1
   8167c:	4b2a      	ldr	r3, [pc, #168]	; (81728 <udd_ctrl_in_sent+0x130>)
   8167e:	701a      	strb	r2, [r3, #0]
   81680:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81684:	b662      	cpsie	i
   81686:	bd38      	pop	{r3, r4, r5, pc}
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   81688:	4b2d      	ldr	r3, [pc, #180]	; (81740 <udd_ctrl_in_sent+0x148>)
   8168a:	695b      	ldr	r3, [r3, #20]
   8168c:	b16b      	cbz	r3, 816aa <udd_ctrl_in_sent+0xb2>
				|| (!udd_g_ctrlreq.over_under_run())) {
   8168e:	4798      	blx	r3
   81690:	b158      	cbz	r0, 816aa <udd_ctrl_in_sent+0xb2>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   81692:	2200      	movs	r2, #0
   81694:	4b29      	ldr	r3, [pc, #164]	; (8173c <udd_ctrl_in_sent+0x144>)
   81696:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   81698:	4b29      	ldr	r3, [pc, #164]	; (81740 <udd_ctrl_in_sent+0x148>)
   8169a:	899c      	ldrh	r4, [r3, #12]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   8169c:	2c3f      	cmp	r4, #63	; 0x3f
   8169e:	d904      	bls.n	816aa <udd_ctrl_in_sent+0xb2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
   816a0:	2200      	movs	r2, #0
   816a2:	4b29      	ldr	r3, [pc, #164]	; (81748 <udd_ctrl_in_sent+0x150>)
   816a4:	701a      	strb	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   816a6:	2440      	movs	r4, #64	; 0x40
   816a8:	e002      	b.n	816b0 <udd_ctrl_in_sent+0xb8>
		b_shortpacket = false;
	} else {
		b_shortpacket = true;
   816aa:	2201      	movs	r2, #1
   816ac:	4b26      	ldr	r3, [pc, #152]	; (81748 <udd_ctrl_in_sent+0x150>)
   816ae:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   816b0:	4b23      	ldr	r3, [pc, #140]	; (81740 <udd_ctrl_in_sent+0x148>)
   816b2:	689a      	ldr	r2, [r3, #8]
   816b4:	4b21      	ldr	r3, [pc, #132]	; (8173c <udd_ctrl_in_sent+0x144>)
   816b6:	881b      	ldrh	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   816b8:	f3ef 8010 	mrs	r0, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   816bc:	fab0 f080 	clz	r0, r0
   816c0:	0940      	lsrs	r0, r0, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   816c2:	b672      	cpsid	i
   816c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   816c8:	2500      	movs	r5, #0
   816ca:	4917      	ldr	r1, [pc, #92]	; (81728 <udd_ctrl_in_sent+0x130>)
   816cc:	700d      	strb	r5, [r1, #0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
   816ce:	4920      	ldr	r1, [pc, #128]	; (81750 <udd_ctrl_in_sent+0x158>)
   816d0:	6809      	ldr	r1, [r1, #0]
   816d2:	f011 0f02 	tst.w	r1, #2
   816d6:	d101      	bne.n	816dc <udd_ctrl_in_sent+0xe4>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   816d8:	b95c      	cbnz	r4, 816f2 <udd_ctrl_in_sent+0xfa>
   816da:	e013      	b.n	81704 <udd_ctrl_in_sent+0x10c>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   816dc:	b128      	cbz	r0, 816ea <udd_ctrl_in_sent+0xf2>
		cpu_irq_enable();
   816de:	2201      	movs	r2, #1
   816e0:	4b11      	ldr	r3, [pc, #68]	; (81728 <udd_ctrl_in_sent+0x130>)
   816e2:	701a      	strb	r2, [r3, #0]
   816e4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   816e8:	b662      	cpsie	i
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   816ea:	2204      	movs	r2, #4
   816ec:	4b10      	ldr	r3, [pc, #64]	; (81730 <udd_ctrl_in_sent+0x138>)
   816ee:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   816f0:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   816f2:	441a      	add	r2, r3
   816f4:	4b17      	ldr	r3, [pc, #92]	; (81754 <udd_ctrl_in_sent+0x15c>)
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
   816f6:	f812 1b01 	ldrb.w	r1, [r2], #1
   816fa:	f803 1b01 	strb.w	r1, [r3], #1
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   816fe:	b2d9      	uxtb	r1, r3
   81700:	42a1      	cmp	r1, r4
   81702:	d3f8      	bcc.n	816f6 <udd_ctrl_in_sent+0xfe>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   81704:	4a0d      	ldr	r2, [pc, #52]	; (8173c <udd_ctrl_in_sent+0x144>)
   81706:	8813      	ldrh	r3, [r2, #0]
   81708:	441c      	add	r4, r3
   8170a:	8014      	strh	r4, [r2, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   8170c:	2301      	movs	r3, #1
   8170e:	4a0f      	ldr	r2, [pc, #60]	; (8174c <udd_ctrl_in_sent+0x154>)
   81710:	6013      	str	r3, [r2, #0]
	udd_enable_in_send_interrupt(0);
   81712:	3290      	adds	r2, #144	; 0x90
   81714:	6013      	str	r3, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81716:	b128      	cbz	r0, 81724 <udd_ctrl_in_sent+0x12c>
		cpu_irq_enable();
   81718:	461a      	mov	r2, r3
   8171a:	4b03      	ldr	r3, [pc, #12]	; (81728 <udd_ctrl_in_sent+0x130>)
   8171c:	701a      	strb	r2, [r3, #0]
   8171e:	f3bf 8f5f 	dmb	sy
   81722:	b662      	cpsie	i
   81724:	bd38      	pop	{r3, r4, r5, pc}
   81726:	bf00      	nop
   81728:	200701d8 	.word	0x200701d8
   8172c:	400ac220 	.word	0x400ac220
   81730:	20070c4d 	.word	0x20070c4d
   81734:	000815e9 	.word	0x000815e9
   81738:	0008153d 	.word	0x0008153d
   8173c:	20070c4e 	.word	0x20070c4e
   81740:	20070c9c 	.word	0x20070c9c
   81744:	20070c4a 	.word	0x20070c4a
   81748:	20070c50 	.word	0x20070c50
   8174c:	400ac160 	.word	0x400ac160
   81750:	400ac130 	.word	0x400ac130
   81754:	20180000 	.word	0x20180000

00081758 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   81758:	b510      	push	{r4, lr}
   8175a:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   8175c:	7d04      	ldrb	r4, [r0, #20]
   8175e:	f014 0f01 	tst.w	r4, #1
   81762:	d010      	beq.n	81786 <udd_ep_finish_job+0x2e>
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
   81764:	7d04      	ldrb	r4, [r0, #20]
   81766:	f36f 0400 	bfc	r4, #0, #1
   8176a:	7504      	strb	r4, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   8176c:	6804      	ldr	r4, [r0, #0]
   8176e:	b154      	cbz	r4, 81786 <udd_ep_finish_job+0x2e>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   81770:	4805      	ldr	r0, [pc, #20]	; (81788 <udd_ep_finish_job+0x30>)
   81772:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   81776:	f410 7f80 	tst.w	r0, #256	; 0x100
		ep_num |= USB_EP_DIR_IN;
   8177a:	bf18      	it	ne
   8177c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   81780:	4608      	mov	r0, r1
   81782:	6899      	ldr	r1, [r3, #8]
   81784:	47a0      	blx	r4
   81786:	bd10      	pop	{r4, pc}
   81788:	400ac100 	.word	0x400ac100

0008178c <udd_ep_trans_done>:
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   8178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   8178e:	1e43      	subs	r3, r0, #1

	if (!ptr_job->busy) {
   81790:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   81794:	4a5a      	ldr	r2, [pc, #360]	; (81900 <udd_ep_trans_done+0x174>)
   81796:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   8179a:	7d12      	ldrb	r2, [r2, #20]
   8179c:	f012 0f01 	tst.w	r2, #1
   817a0:	f000 80ad 	beq.w	818fe <udd_ep_trans_done+0x172>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   817a4:	460a      	mov	r2, r1
   817a6:	4956      	ldr	r1, [pc, #344]	; (81900 <udd_ep_trans_done+0x174>)
   817a8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   817ac:	68d1      	ldr	r1, [r2, #12]
   817ae:	6892      	ldr	r2, [r2, #8]
   817b0:	4291      	cmp	r1, r2
   817b2:	d075      	beq.n	818a0 <udd_ep_trans_done+0x114>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   817b4:	1a52      	subs	r2, r2, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   817b6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
			next_trans = UDD_ENDPOINT_MAX_TRANS;

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   817ba:	bf92      	itee	ls
   817bc:	0417      	lslls	r7, r2, #16
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   817be:	f44f 3280 	movhi.w	r2, #65536	; 0x10000

			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
   817c2:	2700      	movhi	r7, #0
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   817c4:	4c4f      	ldr	r4, [pc, #316]	; (81904 <udd_ep_trans_done+0x178>)
   817c6:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   817ca:	f415 7f80 	tst.w	r5, #256	; 0x100
   817ce:	d014      	beq.n	817fa <udd_ep_trans_done+0x6e>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   817d0:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   817d4:	f3c5 1502 	ubfx	r5, r5, #4, #3
   817d8:	2408      	movs	r4, #8
   817da:	40ac      	lsls	r4, r5
   817dc:	3c01      	subs	r4, #1
   817de:	4222      	tst	r2, r4
   817e0:	d01b      	beq.n	8181a <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
   817e2:	f047 0708 	orr.w	r7, r7, #8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   817e6:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   817ea:	4d45      	ldr	r5, [pc, #276]	; (81900 <udd_ep_trans_done+0x174>)
   817ec:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   817f0:	7d25      	ldrb	r5, [r4, #20]
   817f2:	f36f 0541 	bfc	r5, #1, #1
   817f6:	7525      	strb	r5, [r4, #20]
   817f8:	e00f      	b.n	8181a <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   817fa:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   817fe:	f3c5 25c1 	ubfx	r5, r5, #11, #2
   81802:	2d01      	cmp	r5, #1
   81804:	d107      	bne.n	81816 <udd_ep_trans_done+0x8a>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   81806:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   8180a:	f3c5 1502 	ubfx	r5, r5, #4, #3
   8180e:	2408      	movs	r4, #8
   81810:	40ac      	lsls	r4, r5
   81812:	42a2      	cmp	r2, r4
   81814:	d801      	bhi.n	8181a <udd_ep_trans_done+0x8e>

				// Enable short packet reception
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   81816:	f047 0714 	orr.w	r7, r7, #20
						| UOTGHS_DEVDMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   8181a:	4c3b      	ldr	r4, [pc, #236]	; (81908 <udd_ep_trans_done+0x17c>)
   8181c:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   81820:	eb03 0543 	add.w	r5, r3, r3, lsl #1
   81824:	4e36      	ldr	r6, [pc, #216]	; (81900 <udd_ep_trans_done+0x174>)
   81826:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
   8182a:	686d      	ldr	r5, [r5, #4]
   8182c:	4429      	add	r1, r5
   8182e:	6061      	str	r1, [r4, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81830:	f3ef 8110 	mrs	r1, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   81834:	fab1 f181 	clz	r1, r1
   81838:	0949      	lsrs	r1, r1, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8183a:	b672      	cpsid	i
   8183c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   81840:	2600      	movs	r6, #0
   81842:	4d32      	ldr	r5, [pc, #200]	; (8190c <udd_ep_trans_done+0x180>)
   81844:	702e      	strb	r6, [r5, #0]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   81846:	68e5      	ldr	r5, [r4, #12]
   81848:	f015 0f10 	tst.w	r5, #16
   8184c:	d11a      	bne.n	81884 <udd_ep_trans_done+0xf8>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   8184e:	f047 0721 	orr.w	r7, r7, #33	; 0x21
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
				& UOTGHS_DEVDMASTATUS_END_TR_ST)) {
			dbg_print("dmaS%x ", ep);
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   81852:	60a7      	str	r7, [r4, #8]
			ptr_job->buf_cnt += next_trans;
   81854:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   81858:	4829      	ldr	r0, [pc, #164]	; (81900 <udd_ep_trans_done+0x174>)
   8185a:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   8185e:	68c4      	ldr	r4, [r0, #12]
   81860:	4414      	add	r4, r2
   81862:	60c4      	str	r4, [r0, #12]
			ptr_job->buf_load = next_trans;
   81864:	6102      	str	r2, [r0, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   81866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8186a:	fa02 f303 	lsl.w	r3, r2, r3
   8186e:	4a28      	ldr	r2, [pc, #160]	; (81910 <udd_ep_trans_done+0x184>)
   81870:	6193      	str	r3, [r2, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81872:	2900      	cmp	r1, #0
   81874:	d043      	beq.n	818fe <udd_ep_trans_done+0x172>
		cpu_irq_enable();
   81876:	2201      	movs	r2, #1
   81878:	4b24      	ldr	r3, [pc, #144]	; (8190c <udd_ep_trans_done+0x180>)
   8187a:	701a      	strb	r2, [r3, #0]
   8187c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81880:	b662      	cpsie	i
   81882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81884:	b129      	cbz	r1, 81892 <udd_ep_trans_done+0x106>
		cpu_irq_enable();
   81886:	2101      	movs	r1, #1
   81888:	4a20      	ldr	r2, [pc, #128]	; (8190c <udd_ep_trans_done+0x180>)
   8188a:	7011      	strb	r1, [r2, #0]
   8188c:	f3bf 8f5f 	dmb	sy
   81890:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   81892:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   81896:	491a      	ldr	r1, [pc, #104]	; (81900 <udd_ep_trans_done+0x174>)
   81898:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8189c:	68d1      	ldr	r1, [r2, #12]
   8189e:	6091      	str	r1, [r2, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   818a0:	4a18      	ldr	r2, [pc, #96]	; (81904 <udd_ep_trans_done+0x178>)
   818a2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
   818a6:	f412 7f80 	tst.w	r2, #256	; 0x100
   818aa:	d01f      	beq.n	818ec <udd_ep_trans_done+0x160>
		if (ptr_job->b_shortpacket) {
   818ac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   818b0:	4913      	ldr	r1, [pc, #76]	; (81900 <udd_ep_trans_done+0x174>)
   818b2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   818b6:	7d12      	ldrb	r2, [r2, #20]
   818b8:	f012 0f02 	tst.w	r2, #2
   818bc:	d016      	beq.n	818ec <udd_ep_trans_done+0x160>
			dbg_print("zlpS%x ", ep);
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
   818be:	2201      	movs	r2, #1
   818c0:	4b14      	ldr	r3, [pc, #80]	; (81914 <udd_ep_trans_done+0x188>)
   818c2:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			if (Is_udd_write_enabled(ep)) {
   818c6:	3b30      	subs	r3, #48	; 0x30
   818c8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   818cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
   818d0:	bf1c      	itt	ne
   818d2:	4b11      	ldrne	r3, [pc, #68]	; (81918 <udd_ep_trans_done+0x18c>)
   818d4:	f843 2020 	strne.w	r2, [r3, r0, lsl #2]
			}
			udd_enable_in_send_interrupt(ep);
   818d8:	2201      	movs	r2, #1
   818da:	4b10      	ldr	r3, [pc, #64]	; (8191c <udd_ep_trans_done+0x190>)
   818dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
			udd_enable_endpoint_interrupt(ep);
   818e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   818e4:	4083      	lsls	r3, r0
   818e6:	4a0a      	ldr	r2, [pc, #40]	; (81910 <udd_ep_trans_done+0x184>)
   818e8:	6193      	str	r3, [r2, #24]
			return;
   818ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   818ec:	4602      	mov	r2, r0
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   818ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   818f2:	4803      	ldr	r0, [pc, #12]	; (81900 <udd_ep_trans_done+0x174>)
   818f4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   818f8:	2100      	movs	r1, #0
   818fa:	4b09      	ldr	r3, [pc, #36]	; (81920 <udd_ep_trans_done+0x194>)
   818fc:	4798      	blx	r3
   818fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81900:	20070c00 	.word	0x20070c00
   81904:	400ac100 	.word	0x400ac100
   81908:	400ac300 	.word	0x400ac300
   8190c:	200701d8 	.word	0x200701d8
   81910:	400ac000 	.word	0x400ac000
   81914:	400ac160 	.word	0x400ac160
   81918:	400ac190 	.word	0x400ac190
   8191c:	400ac1f0 	.word	0x400ac1f0
   81920:	00081759 	.word	0x00081759

00081924 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   81924:	b410      	push	{r4}
	if (!b_idle && udd_b_idle) {
   81926:	4604      	mov	r4, r0
   81928:	2800      	cmp	r0, #0
   8192a:	d135      	bne.n	81998 <udd_sleep_mode+0x74>
   8192c:	4b1e      	ldr	r3, [pc, #120]	; (819a8 <udd_sleep_mode+0x84>)
   8192e:	781b      	ldrb	r3, [r3, #0]
   81930:	b37b      	cbz	r3, 81992 <udd_sleep_mode+0x6e>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
   81932:	4b1e      	ldr	r3, [pc, #120]	; (819ac <udd_sleep_mode+0x88>)
   81934:	789b      	ldrb	r3, [r3, #2]
   81936:	b903      	cbnz	r3, 8193a <udd_sleep_mode+0x16>
   81938:	e7fe      	b.n	81938 <udd_sleep_mode+0x14>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8193a:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8193e:	b672      	cpsid	i
   81940:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81944:	2100      	movs	r1, #0
   81946:	4a1a      	ldr	r2, [pc, #104]	; (819b0 <udd_sleep_mode+0x8c>)
   81948:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   8194a:	4918      	ldr	r1, [pc, #96]	; (819ac <udd_sleep_mode+0x88>)
   8194c:	788a      	ldrb	r2, [r1, #2]
   8194e:	3a01      	subs	r2, #1
   81950:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81952:	b9f3      	cbnz	r3, 81992 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
   81954:	2201      	movs	r2, #1
   81956:	4b16      	ldr	r3, [pc, #88]	; (819b0 <udd_sleep_mode+0x8c>)
   81958:	701a      	strb	r2, [r3, #0]
   8195a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8195e:	b662      	cpsie	i
   81960:	e017      	b.n	81992 <udd_sleep_mode+0x6e>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   81962:	4b12      	ldr	r3, [pc, #72]	; (819ac <udd_sleep_mode+0x88>)
   81964:	789b      	ldrb	r3, [r3, #2]
   81966:	2bff      	cmp	r3, #255	; 0xff
   81968:	d100      	bne.n	8196c <udd_sleep_mode+0x48>
   8196a:	e7fe      	b.n	8196a <udd_sleep_mode+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8196c:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81970:	b672      	cpsid	i
   81972:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81976:	2100      	movs	r1, #0
   81978:	4a0d      	ldr	r2, [pc, #52]	; (819b0 <udd_sleep_mode+0x8c>)
   8197a:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8197c:	490b      	ldr	r1, [pc, #44]	; (819ac <udd_sleep_mode+0x88>)
   8197e:	788a      	ldrb	r2, [r1, #2]
   81980:	3201      	adds	r2, #1
   81982:	708a      	strb	r2, [r1, #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81984:	b92b      	cbnz	r3, 81992 <udd_sleep_mode+0x6e>
		cpu_irq_enable();
   81986:	2201      	movs	r2, #1
   81988:	4b09      	ldr	r3, [pc, #36]	; (819b0 <udd_sleep_mode+0x8c>)
   8198a:	701a      	strb	r2, [r3, #0]
   8198c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81990:	b662      	cpsie	i
	}
	if (b_idle && !udd_b_idle) {
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
   81992:	4b05      	ldr	r3, [pc, #20]	; (819a8 <udd_sleep_mode+0x84>)
   81994:	701c      	strb	r4, [r3, #0]
   81996:	e004      	b.n	819a2 <udd_sleep_mode+0x7e>
{
	if (!b_idle && udd_b_idle) {
		dbg_print("_S ");
		sleepmgr_unlock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
   81998:	4b03      	ldr	r3, [pc, #12]	; (819a8 <udd_sleep_mode+0x84>)
   8199a:	781b      	ldrb	r3, [r3, #0]
   8199c:	2b00      	cmp	r3, #0
   8199e:	d1f8      	bne.n	81992 <udd_sleep_mode+0x6e>
   819a0:	e7df      	b.n	81962 <udd_sleep_mode+0x3e>
		dbg_print("_W ");
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
}
   819a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   819a6:	4770      	bx	lr
   819a8:	20070c4c 	.word	0x20070c4c
   819ac:	20070c94 	.word	0x20070c94
   819b0:	200701d8 	.word	0x200701d8

000819b4 <udd_enable>:
	return true;
}


void udd_enable(void)
{
   819b4:	b510      	push	{r4, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   819b6:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   819ba:	b672      	cpsid	i
   819bc:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   819c0:	2200      	movs	r2, #0
   819c2:	4b51      	ldr	r3, [pc, #324]	; (81b08 <udd_enable+0x154>)
   819c4:	701a      	strb	r2, [r3, #0]
		cpu_irq_restore(flags);
		return;
	}
#else
	// SINGLE DEVICE MODE INITIALIZATION
	pmc_enable_periph_clk(ID_UOTGHS);
   819c6:	2028      	movs	r0, #40	; 0x28
   819c8:	4b50      	ldr	r3, [pc, #320]	; (81b0c <udd_enable+0x158>)
   819ca:	4798      	blx	r3
	sysclk_enable_usb();
   819cc:	4b50      	ldr	r3, [pc, #320]	; (81b10 <udd_enable+0x15c>)
   819ce:	4798      	blx	r3
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   819d0:	4b50      	ldr	r3, [pc, #320]	; (81b14 <udd_enable+0x160>)
   819d2:	2250      	movs	r2, #80	; 0x50
   819d4:	f883 2328 	strb.w	r2, [r3, #808]	; 0x328

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   819d8:	f44f 7280 	mov.w	r2, #256	; 0x100
   819dc:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority((IRQn_Type) ID_UOTGHS, UDD_USB_INT_LEVEL);
	NVIC_EnableIRQ((IRQn_Type) ID_UOTGHS);

	// Always authorize asynchrone USB interrupts to exit of sleep mode
	// For SAM USB wake up device except BACKUP mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   819de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   819e2:	4b4d      	ldr	r3, [pc, #308]	; (81b18 <udd_enable+0x164>)
   819e4:	4798      	blx	r3
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
   819e6:	4b4d      	ldr	r3, [pc, #308]	; (81b1c <udd_enable+0x168>)
   819e8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   819ec:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   819f0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   819f4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   819f8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   819fc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81a00:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   81a08:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#endif
	// Enable USB hardware
	otg_enable_pad();
   81a0c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   81a14:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   81a18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   81a20:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
   81a24:	681a      	ldr	r2, [r3, #0]
   81a26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   81a2a:	601a      	str	r2, [r3, #0]
# ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
# else
	udd_high_speed_disable();
   81a2c:	681a      	ldr	r2, [r3, #0]
   81a2e:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
   81a32:	601a      	str	r2, [r3, #0]
# endif
#endif // USB_DEVICE_LOW_SPEED

	// Check USB clock
	otg_unfreeze_clock();
   81a34:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81a3c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   81a40:	461a      	mov	r2, r3
   81a42:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81a46:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81a4a:	d0fa      	beq.n	81a42 <udd_enable+0x8e>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   81a4c:	4b34      	ldr	r3, [pc, #208]	; (81b20 <udd_enable+0x16c>)
   81a4e:	7d1a      	ldrb	r2, [r3, #20]
		udd_ep_job[i].stall_requested = false;
   81a50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81a54:	f36f 0282 	bfc	r2, #2, #1
   81a58:	751a      	strb	r2, [r3, #20]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   81a5a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
		udd_ep_job[i].stall_requested = false;
   81a5e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81a62:	f36f 0282 	bfc	r2, #2, #1
   81a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
   81a6a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
		udd_ep_job[i].stall_requested = false;
   81a6e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   81a72:	f36f 0282 	bfc	r2, #2, #1
   81a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
#endif

	otg_ack_vbus_transition();
   81a7a:	4b28      	ldr	r3, [pc, #160]	; (81b1c <udd_enable+0x168>)
   81a7c:	2202      	movs	r2, #2
   81a7e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
   81a82:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81a86:	f413 6f00 	tst.w	r3, #2048	; 0x800
		otg_raise_vbus_transition();
   81a8a:	bf1c      	itt	ne
   81a8c:	4b23      	ldrne	r3, [pc, #140]	; (81b1c <udd_enable+0x168>)
   81a8e:	f8c3 280c 	strne.w	r2, [r3, #2060]	; 0x80c
	}
	otg_enable_vbus_interrupt();
   81a92:	4b22      	ldr	r3, [pc, #136]	; (81b1c <udd_enable+0x168>)
   81a94:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81a98:	f042 0202 	orr.w	r2, r2, #2
   81a9c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   81aa0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81aa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81aa8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_sleep_initialized) {
   81aac:	4b1d      	ldr	r3, [pc, #116]	; (81b24 <udd_enable+0x170>)
   81aae:	781b      	ldrb	r3, [r3, #0]
   81ab0:	b9f3      	cbnz	r3, 81af0 <udd_enable+0x13c>
		udd_b_sleep_initialized = true;
   81ab2:	2201      	movs	r2, #1
   81ab4:	4b1b      	ldr	r3, [pc, #108]	; (81b24 <udd_enable+0x170>)
   81ab6:	701a      	strb	r2, [r3, #0]
		// Initialize the sleep mode authorized for the USB suspend mode
		udd_b_idle = false;
   81ab8:	2200      	movs	r2, #0
   81aba:	4b1b      	ldr	r3, [pc, #108]	; (81b28 <udd_enable+0x174>)
   81abc:	701a      	strb	r2, [r3, #0]
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
   81abe:	4b1b      	ldr	r3, [pc, #108]	; (81b2c <udd_enable+0x178>)
   81ac0:	78db      	ldrb	r3, [r3, #3]
   81ac2:	2bff      	cmp	r3, #255	; 0xff
   81ac4:	d100      	bne.n	81ac8 <udd_enable+0x114>
   81ac6:	e7fe      	b.n	81ac6 <udd_enable+0x112>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81ac8:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81acc:	b672      	cpsid	i
   81ace:	f3bf 8f5f 	dmb	sy
   81ad2:	2100      	movs	r1, #0
   81ad4:	4a0c      	ldr	r2, [pc, #48]	; (81b08 <udd_enable+0x154>)
   81ad6:	7011      	strb	r1, [r2, #0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   81ad8:	4914      	ldr	r1, [pc, #80]	; (81b2c <udd_enable+0x178>)
   81ada:	78ca      	ldrb	r2, [r1, #3]
   81adc:	3201      	adds	r2, #1
   81ade:	70ca      	strb	r2, [r1, #3]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81ae0:	b94b      	cbnz	r3, 81af6 <udd_enable+0x142>
		cpu_irq_enable();
   81ae2:	2201      	movs	r2, #1
   81ae4:	4b08      	ldr	r3, [pc, #32]	; (81b08 <udd_enable+0x154>)
   81ae6:	701a      	strb	r2, [r3, #0]
   81ae8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81aec:	b662      	cpsie	i
   81aee:	e002      	b.n	81af6 <udd_enable+0x142>
		sleepmgr_lock_mode(UOTGHS_SLEEP_MODE_USB_SUSPEND);
	} else {
		udd_sleep_mode(false); // Enter idle mode
   81af0:	2000      	movs	r0, #0
   81af2:	4b0f      	ldr	r3, [pc, #60]	; (81b30 <udd_enable+0x17c>)
   81af4:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81af6:	b92c      	cbnz	r4, 81b04 <udd_enable+0x150>
		cpu_irq_enable();
   81af8:	2201      	movs	r2, #1
   81afa:	4b03      	ldr	r3, [pc, #12]	; (81b08 <udd_enable+0x154>)
   81afc:	701a      	strb	r2, [r3, #0]
   81afe:	f3bf 8f5f 	dmb	sy
   81b02:	b662      	cpsie	i
   81b04:	bd10      	pop	{r4, pc}
   81b06:	bf00      	nop
   81b08:	200701d8 	.word	0x200701d8
   81b0c:	00081119 	.word	0x00081119
   81b10:	00080e35 	.word	0x00080e35
   81b14:	e000e100 	.word	0xe000e100
   81b18:	0008118d 	.word	0x0008118d
   81b1c:	400ac000 	.word	0x400ac000
   81b20:	20070c00 	.word	0x20070c00
   81b24:	20070c48 	.word	0x20070c48
   81b28:	20070c4c 	.word	0x20070c4c
   81b2c:	20070c94 	.word	0x20070c94
   81b30:	00081925 	.word	0x00081925

00081b34 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   81b34:	b538      	push	{r3, r4, r5, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81b36:	f3ef 8410 	mrs	r4, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81b3a:	b672      	cpsid	i
   81b3c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81b40:	2200      	movs	r2, #0
   81b42:	4b18      	ldr	r3, [pc, #96]	; (81ba4 <udd_attach+0x70>)
   81b44:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   81b46:	2001      	movs	r0, #1
   81b48:	4b17      	ldr	r3, [pc, #92]	; (81ba8 <udd_attach+0x74>)
   81b4a:	4798      	blx	r3
	otg_unfreeze_clock();
   81b4c:	4a17      	ldr	r2, [pc, #92]	; (81bac <udd_attach+0x78>)
   81b4e:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   81b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   81b56:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800

	// This section of clock check can be improved with a check of
	// USB clock source via sysclk()
	// Check USB clock because the source can be a PLL
	while (!Is_otg_clock_usable());
   81b5a:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   81b5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
   81b62:	d0fa      	beq.n	81b5a <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
   81b64:	4b11      	ldr	r3, [pc, #68]	; (81bac <udd_attach+0x78>)
   81b66:	681a      	ldr	r2, [r3, #0]
   81b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   81b6c:	601a      	str	r2, [r3, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   81b6e:	2508      	movs	r5, #8
   81b70:	619d      	str	r5, [r3, #24]
	udd_enable_suspend_interrupt();
   81b72:	2101      	movs	r1, #1
   81b74:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   81b76:	2210      	movs	r2, #16
   81b78:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   81b7a:	2004      	movs	r0, #4
   81b7c:	6198      	str	r0, [r3, #24]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
   81b7e:	609d      	str	r5, [r3, #8]
	udd_ack_sof();
   81b80:	6098      	str	r0, [r3, #8]
	udd_ack_msof();
   81b82:	2002      	movs	r0, #2
   81b84:	6098      	str	r0, [r3, #8]

	// The first suspend interrupt must be forced
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
   81b86:	60d9      	str	r1, [r3, #12]

	udd_ack_wake_up();
   81b88:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   81b8a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81b92:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81b96:	b924      	cbnz	r4, 81ba2 <udd_attach+0x6e>
		cpu_irq_enable();
   81b98:	4b02      	ldr	r3, [pc, #8]	; (81ba4 <udd_attach+0x70>)
   81b9a:	7019      	strb	r1, [r3, #0]
   81b9c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81ba0:	b662      	cpsie	i
   81ba2:	bd38      	pop	{r3, r4, r5, pc}
   81ba4:	200701d8 	.word	0x200701d8
   81ba8:	00081925 	.word	0x00081925
   81bac:	400ac000 	.word	0x400ac000

00081bb0 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
   81bb0:	b508      	push	{r3, lr}
	otg_unfreeze_clock();
   81bb2:	4b0a      	ldr	r3, [pc, #40]	; (81bdc <udd_detach+0x2c>)
   81bb4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81bbc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

	// Detach device from the bus
	udd_detach_device();
   81bc0:	681a      	ldr	r2, [r3, #0]
   81bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   81bc6:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   81bc8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81bd0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_sleep_mode(false);
   81bd4:	2000      	movs	r0, #0
   81bd6:	4b02      	ldr	r3, [pc, #8]	; (81be0 <udd_detach+0x30>)
   81bd8:	4798      	blx	r3
   81bda:	bd08      	pop	{r3, pc}
   81bdc:	400ac000 	.word	0x400ac000
   81be0:	00081925 	.word	0x00081925

00081be4 <UOTGHS_Handler>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(UDD_USB_INT_FUN)
#endif
{
   81be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   81be8:	4b98      	ldr	r3, [pc, #608]	; (81e4c <UOTGHS_Handler+0x268>)
   81bea:	4798      	blx	r3
   81bec:	b960      	cbnz	r0, 81c08 <UOTGHS_Handler+0x24>
   81bee:	4b98      	ldr	r3, [pc, #608]	; (81e50 <UOTGHS_Handler+0x26c>)
   81bf0:	685b      	ldr	r3, [r3, #4]
   81bf2:	f013 0f01 	tst.w	r3, #1
   81bf6:	d107      	bne.n	81c08 <UOTGHS_Handler+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81bf8:	b672      	cpsid	i
   81bfa:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   81bfe:	2200      	movs	r2, #0
   81c00:	4b94      	ldr	r3, [pc, #592]	; (81e54 <UOTGHS_Handler+0x270>)
   81c02:	701a      	strb	r2, [r3, #0]
		return;
   81c04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_sof()) {
   81c08:	4b91      	ldr	r3, [pc, #580]	; (81e50 <UOTGHS_Handler+0x26c>)
   81c0a:	685b      	ldr	r3, [r3, #4]
   81c0c:	f013 0f04 	tst.w	r3, #4
   81c10:	d00c      	beq.n	81c2c <UOTGHS_Handler+0x48>
		udd_ack_sof();
   81c12:	4b8f      	ldr	r3, [pc, #572]	; (81e50 <UOTGHS_Handler+0x26c>)
   81c14:	2204      	movs	r2, #4
   81c16:	609a      	str	r2, [r3, #8]
		if (Is_udd_full_speed_mode()) {
   81c18:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   81c1c:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   81c20:	f040 82e8 	bne.w	821f4 <UOTGHS_Handler+0x610>
			udc_sof_notify();
   81c24:	4b8c      	ldr	r3, [pc, #560]	; (81e58 <UOTGHS_Handler+0x274>)
   81c26:	4798      	blx	r3
   81c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_sof_end;
	}

	if (Is_udd_msof()) {
   81c2c:	4b88      	ldr	r3, [pc, #544]	; (81e50 <UOTGHS_Handler+0x26c>)
   81c2e:	685b      	ldr	r3, [r3, #4]
   81c30:	f013 0f02 	tst.w	r3, #2
   81c34:	d006      	beq.n	81c44 <UOTGHS_Handler+0x60>
		udd_ack_msof();
   81c36:	2202      	movs	r2, #2
   81c38:	4b85      	ldr	r3, [pc, #532]	; (81e50 <UOTGHS_Handler+0x26c>)
   81c3a:	609a      	str	r2, [r3, #8]
		udc_sof_notify();
   81c3c:	4b86      	ldr	r3, [pc, #536]	; (81e58 <UOTGHS_Handler+0x274>)
   81c3e:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   81c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
   81c44:	4b82      	ldr	r3, [pc, #520]	; (81e50 <UOTGHS_Handler+0x26c>)
   81c46:	685b      	ldr	r3, [r3, #4]
   81c48:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   81c4c:	f000 82c3 	beq.w	821d6 <UOTGHS_Handler+0x5f2>
	}

	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   81c50:	4b82      	ldr	r3, [pc, #520]	; (81e5c <UOTGHS_Handler+0x278>)
   81c52:	2210      	movs	r2, #16
   81c54:	601a      	str	r2, [r3, #0]
	udd_disable_nak_out_interrupt(0);
   81c56:	2208      	movs	r2, #8
   81c58:	601a      	str	r2, [r3, #0]

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
   81c5a:	3bf0      	subs	r3, #240	; 0xf0
   81c5c:	681b      	ldr	r3, [r3, #0]
   81c5e:	f013 0f04 	tst.w	r3, #4
   81c62:	d059      	beq.n	81d18 <UOTGHS_Handler+0x134>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   81c64:	4b7e      	ldr	r3, [pc, #504]	; (81e60 <UOTGHS_Handler+0x27c>)
   81c66:	781b      	ldrb	r3, [r3, #0]
   81c68:	2b00      	cmp	r3, #0
   81c6a:	f000 82a9 	beq.w	821c0 <UOTGHS_Handler+0x5dc>
		// May be a hidden DATA or ZLP phase or protocol abort
		udd_ctrl_endofrequest();
   81c6e:	4b7d      	ldr	r3, [pc, #500]	; (81e64 <UOTGHS_Handler+0x280>)
   81c70:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   81c72:	4b7d      	ldr	r3, [pc, #500]	; (81e68 <UOTGHS_Handler+0x284>)
   81c74:	4798      	blx	r3
   81c76:	e2a3      	b.n	821c0 <UOTGHS_Handler+0x5dc>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
		udd_ctrl_stall_data();
   81c78:	4b7c      	ldr	r3, [pc, #496]	; (81e6c <UOTGHS_Handler+0x288>)
   81c7a:	4798      	blx	r3
		udd_ack_setup_received(0);
   81c7c:	2204      	movs	r2, #4
   81c7e:	4b7c      	ldr	r3, [pc, #496]	; (81e70 <UOTGHS_Handler+0x28c>)
   81c80:	601a      	str	r2, [r3, #0]
   81c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   81c86:	f813 1b01 	ldrb.w	r1, [r3], #1
   81c8a:	f802 1f01 	strb.w	r1, [r2, #1]!
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   81c8e:	4283      	cmp	r3, r0
   81c90:	d1f9      	bne.n	81c86 <UOTGHS_Handler+0xa2>
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   81c92:	4b78      	ldr	r3, [pc, #480]	; (81e74 <UOTGHS_Handler+0x290>)
   81c94:	4798      	blx	r3
   81c96:	b930      	cbnz	r0, 81ca6 <UOTGHS_Handler+0xc2>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
   81c98:	4b74      	ldr	r3, [pc, #464]	; (81e6c <UOTGHS_Handler+0x288>)
   81c9a:	4798      	blx	r3
		udd_ack_setup_received(0);
   81c9c:	2204      	movs	r2, #4
   81c9e:	4b74      	ldr	r3, [pc, #464]	; (81e70 <UOTGHS_Handler+0x28c>)
   81ca0:	601a      	str	r2, [r3, #0]
   81ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}
	udd_ack_setup_received(0);
   81ca6:	2204      	movs	r2, #4
   81ca8:	4b71      	ldr	r3, [pc, #452]	; (81e70 <UOTGHS_Handler+0x28c>)
   81caa:	601a      	str	r2, [r3, #0]

	if (Udd_setup_is_in()) {
   81cac:	4b72      	ldr	r3, [pc, #456]	; (81e78 <UOTGHS_Handler+0x294>)
   81cae:	f993 3000 	ldrsb.w	r3, [r3]
   81cb2:	2b00      	cmp	r3, #0
   81cb4:	da0b      	bge.n	81cce <UOTGHS_Handler+0xea>
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81cb6:	2300      	movs	r3, #0
   81cb8:	4a70      	ldr	r2, [pc, #448]	; (81e7c <UOTGHS_Handler+0x298>)
   81cba:	8013      	strh	r3, [r2, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81cbc:	4a70      	ldr	r2, [pc, #448]	; (81e80 <UOTGHS_Handler+0x29c>)
   81cbe:	8013      	strh	r3, [r2, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   81cc0:	2202      	movs	r2, #2
   81cc2:	4b67      	ldr	r3, [pc, #412]	; (81e60 <UOTGHS_Handler+0x27c>)
   81cc4:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   81cc6:	4b6f      	ldr	r3, [pc, #444]	; (81e84 <UOTGHS_Handler+0x2a0>)
   81cc8:	4798      	blx	r3
   81cca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
   81cce:	4b6a      	ldr	r3, [pc, #424]	; (81e78 <UOTGHS_Handler+0x294>)
   81cd0:	88db      	ldrh	r3, [r3, #6]
   81cd2:	b91b      	cbnz	r3, 81cdc <UOTGHS_Handler+0xf8>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   81cd4:	4b6c      	ldr	r3, [pc, #432]	; (81e88 <UOTGHS_Handler+0x2a4>)
   81cd6:	4798      	blx	r3
   81cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   81cdc:	2200      	movs	r2, #0
   81cde:	4b67      	ldr	r3, [pc, #412]	; (81e7c <UOTGHS_Handler+0x298>)
   81ce0:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   81ce2:	4b67      	ldr	r3, [pc, #412]	; (81e80 <UOTGHS_Handler+0x29c>)
   81ce4:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   81ce6:	2101      	movs	r1, #1
   81ce8:	4b5d      	ldr	r3, [pc, #372]	; (81e60 <UOTGHS_Handler+0x27c>)
   81cea:	7019      	strb	r1, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   81cec:	2110      	movs	r1, #16
   81cee:	4b60      	ldr	r3, [pc, #384]	; (81e70 <UOTGHS_Handler+0x28c>)
   81cf0:	6019      	str	r1, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81cf2:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81cf6:	b672      	cpsid	i
   81cf8:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81cfc:	4855      	ldr	r0, [pc, #340]	; (81e54 <UOTGHS_Handler+0x270>)
   81cfe:	7002      	strb	r2, [r0, #0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
   81d00:	4a62      	ldr	r2, [pc, #392]	; (81e8c <UOTGHS_Handler+0x2a8>)
   81d02:	6011      	str	r1, [r2, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81d04:	2b00      	cmp	r3, #0
   81d06:	f040 8275 	bne.w	821f4 <UOTGHS_Handler+0x610>
		cpu_irq_enable();
   81d0a:	2201      	movs	r2, #1
   81d0c:	7002      	strb	r2, [r0, #0]
   81d0e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81d12:	b662      	cpsie	i
   81d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dbg_print("stup ");
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   81d18:	4b5d      	ldr	r3, [pc, #372]	; (81e90 <UOTGHS_Handler+0x2ac>)
   81d1a:	681b      	ldr	r3, [r3, #0]
   81d1c:	f013 0f01 	tst.w	r3, #1
   81d20:	d008      	beq.n	81d34 <UOTGHS_Handler+0x150>
   81d22:	4b5c      	ldr	r3, [pc, #368]	; (81e94 <UOTGHS_Handler+0x2b0>)
   81d24:	681b      	ldr	r3, [r3, #0]
   81d26:	f013 0f01 	tst.w	r3, #1
   81d2a:	d003      	beq.n	81d34 <UOTGHS_Handler+0x150>
		dbg_print("in ");
		// IN packet sent
		udd_ctrl_in_sent();
   81d2c:	4b55      	ldr	r3, [pc, #340]	; (81e84 <UOTGHS_Handler+0x2a0>)
   81d2e:	4798      	blx	r3
   81d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return true;
	}
	if (Is_udd_out_received(0)) {
   81d34:	4b56      	ldr	r3, [pc, #344]	; (81e90 <UOTGHS_Handler+0x2ac>)
   81d36:	681b      	ldr	r3, [r3, #0]
   81d38:	f013 0f02 	tst.w	r3, #2
   81d3c:	f000 80ae 	beq.w	81e9c <UOTGHS_Handler+0x2b8>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   81d40:	4b47      	ldr	r3, [pc, #284]	; (81e60 <UOTGHS_Handler+0x27c>)
   81d42:	781b      	ldrb	r3, [r3, #0]
   81d44:	2b01      	cmp	r3, #1
   81d46:	d00c      	beq.n	81d62 <UOTGHS_Handler+0x17e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   81d48:	2b02      	cmp	r3, #2
   81d4a:	d001      	beq.n	81d50 <UOTGHS_Handler+0x16c>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   81d4c:	2b04      	cmp	r3, #4
   81d4e:	d102      	bne.n	81d56 <UOTGHS_Handler+0x172>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
   81d50:	4b44      	ldr	r3, [pc, #272]	; (81e64 <UOTGHS_Handler+0x280>)
   81d52:	4798      	blx	r3
   81d54:	e001      	b.n	81d5a <UOTGHS_Handler+0x176>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   81d56:	4b45      	ldr	r3, [pc, #276]	; (81e6c <UOTGHS_Handler+0x288>)
   81d58:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   81d5a:	4b43      	ldr	r3, [pc, #268]	; (81e68 <UOTGHS_Handler+0x284>)
   81d5c:	4798      	blx	r3
   81d5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81d62:	4b4b      	ldr	r3, [pc, #300]	; (81e90 <UOTGHS_Handler+0x2ac>)
   81d64:	6818      	ldr	r0, [r3, #0]
   81d66:	f3c0 500a 	ubfx	r0, r0, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   81d6a:	4b43      	ldr	r3, [pc, #268]	; (81e78 <UOTGHS_Handler+0x294>)
   81d6c:	899b      	ldrh	r3, [r3, #12]
   81d6e:	4a44      	ldr	r2, [pc, #272]	; (81e80 <UOTGHS_Handler+0x29c>)
   81d70:	8814      	ldrh	r4, [r2, #0]
   81d72:	1822      	adds	r2, r4, r0
   81d74:	4293      	cmp	r3, r2
		// Reinitializes control endpoint management
		udd_ctrl_init();
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   81d76:	bfae      	itee	ge
   81d78:	b280      	uxthge	r0, r0
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   81d7a:	1b1b      	sublt	r3, r3, r4
   81d7c:	b298      	uxthlt	r0, r3
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   81d7e:	4b3e      	ldr	r3, [pc, #248]	; (81e78 <UOTGHS_Handler+0x294>)
   81d80:	689a      	ldr	r2, [r3, #8]
	for (i = 0; i < nb_data; i++) {
   81d82:	b1b0      	cbz	r0, 81db2 <UOTGHS_Handler+0x1ce>
   81d84:	1e63      	subs	r3, r4, #1
   81d86:	441a      	add	r2, r3
   81d88:	4b43      	ldr	r3, [pc, #268]	; (81e98 <UOTGHS_Handler+0x2b4>)
		*ptr_dest++ = *ptr_src++;
   81d8a:	f813 1b01 	ldrb.w	r1, [r3], #1
   81d8e:	f802 1f01 	strb.w	r1, [r2, #1]!
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   81d92:	b2d9      	uxtb	r1, r3
   81d94:	4281      	cmp	r1, r0
   81d96:	d3f8      	bcc.n	81d8a <UOTGHS_Handler+0x1a6>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   81d98:	4404      	add	r4, r0
   81d9a:	b2a4      	uxth	r4, r4
   81d9c:	4b38      	ldr	r3, [pc, #224]	; (81e80 <UOTGHS_Handler+0x29c>)
   81d9e:	801c      	strh	r4, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   81da0:	2840      	cmp	r0, #64	; 0x40
   81da2:	d106      	bne.n	81db2 <UOTGHS_Handler+0x1ce>
			|| (udd_g_ctrlreq.req.wLength <=
   81da4:	4b34      	ldr	r3, [pc, #208]	; (81e78 <UOTGHS_Handler+0x294>)
   81da6:	88da      	ldrh	r2, [r3, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   81da8:	4b34      	ldr	r3, [pc, #208]	; (81e7c <UOTGHS_Handler+0x298>)
   81daa:	881b      	ldrh	r3, [r3, #0]
   81dac:	4423      	add	r3, r4
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_buf_cnt += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
			|| (udd_g_ctrlreq.req.wLength <=
   81dae:	429a      	cmp	r2, r3
   81db0:	dc13      	bgt.n	81dda <UOTGHS_Handler+0x1f6>
					(udd_ctrl_prev_payload_buf_cnt +
							udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   81db2:	4b31      	ldr	r3, [pc, #196]	; (81e78 <UOTGHS_Handler+0x294>)
   81db4:	819c      	strh	r4, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   81db6:	695b      	ldr	r3, [r3, #20]
   81db8:	b143      	cbz	r3, 81dcc <UOTGHS_Handler+0x1e8>
			if (!udd_g_ctrlreq.over_under_run()) {
   81dba:	4798      	blx	r3
   81dbc:	b930      	cbnz	r0, 81dcc <UOTGHS_Handler+0x1e8>
				// Stall ZLP
				udd_ctrl_stall_data();
   81dbe:	4b2b      	ldr	r3, [pc, #172]	; (81e6c <UOTGHS_Handler+0x288>)
   81dc0:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   81dc2:	2202      	movs	r2, #2
   81dc4:	4b2a      	ldr	r3, [pc, #168]	; (81e70 <UOTGHS_Handler+0x28c>)
   81dc6:	601a      	str	r2, [r3, #0]
   81dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   81dcc:	2202      	movs	r2, #2
   81dce:	4b28      	ldr	r3, [pc, #160]	; (81e70 <UOTGHS_Handler+0x28c>)
   81dd0:	601a      	str	r2, [r3, #0]
		udd_ctrl_send_zlp_in();
   81dd2:	4b2d      	ldr	r3, [pc, #180]	; (81e88 <UOTGHS_Handler+0x2a4>)
   81dd4:	4798      	blx	r3
   81dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   81dda:	4b27      	ldr	r3, [pc, #156]	; (81e78 <UOTGHS_Handler+0x294>)
   81ddc:	899b      	ldrh	r3, [r3, #12]
   81dde:	42a3      	cmp	r3, r4
   81de0:	d11a      	bne.n	81e18 <UOTGHS_Handler+0x234>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   81de2:	4b25      	ldr	r3, [pc, #148]	; (81e78 <UOTGHS_Handler+0x294>)
   81de4:	695b      	ldr	r3, [r3, #20]
   81de6:	b933      	cbnz	r3, 81df6 <UOTGHS_Handler+0x212>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
   81de8:	4b20      	ldr	r3, [pc, #128]	; (81e6c <UOTGHS_Handler+0x288>)
   81dea:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81dec:	2202      	movs	r2, #2
   81dee:	4b20      	ldr	r3, [pc, #128]	; (81e70 <UOTGHS_Handler+0x28c>)
   81df0:	601a      	str	r2, [r3, #0]
   81df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   81df6:	4798      	blx	r3
   81df8:	b930      	cbnz	r0, 81e08 <UOTGHS_Handler+0x224>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   81dfa:	4b1c      	ldr	r3, [pc, #112]	; (81e6c <UOTGHS_Handler+0x288>)
   81dfc:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   81dfe:	2202      	movs	r2, #2
   81e00:	4b1b      	ldr	r3, [pc, #108]	; (81e70 <UOTGHS_Handler+0x28c>)
   81e02:	601a      	str	r2, [r3, #0]
   81e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   81e08:	491c      	ldr	r1, [pc, #112]	; (81e7c <UOTGHS_Handler+0x298>)
   81e0a:	4a1d      	ldr	r2, [pc, #116]	; (81e80 <UOTGHS_Handler+0x29c>)
   81e0c:	8810      	ldrh	r0, [r2, #0]
   81e0e:	880b      	ldrh	r3, [r1, #0]
   81e10:	4403      	add	r3, r0
   81e12:	800b      	strh	r3, [r1, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   81e14:	2300      	movs	r3, #0
   81e16:	8013      	strh	r3, [r2, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   81e18:	4b15      	ldr	r3, [pc, #84]	; (81e70 <UOTGHS_Handler+0x28c>)
   81e1a:	2202      	movs	r2, #2
   81e1c:	601a      	str	r2, [r3, #0]
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   81e1e:	2210      	movs	r2, #16
   81e20:	601a      	str	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   81e22:	f3ef 8310 	mrs	r3, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81e26:	b672      	cpsid	i
   81e28:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   81e2c:	2000      	movs	r0, #0
   81e2e:	4909      	ldr	r1, [pc, #36]	; (81e54 <UOTGHS_Handler+0x270>)
   81e30:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
   81e32:	4916      	ldr	r1, [pc, #88]	; (81e8c <UOTGHS_Handler+0x2a8>)
   81e34:	600a      	str	r2, [r1, #0]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   81e36:	2b00      	cmp	r3, #0
   81e38:	f040 81dc 	bne.w	821f4 <UOTGHS_Handler+0x610>
		cpu_irq_enable();
   81e3c:	2201      	movs	r2, #1
   81e3e:	4b05      	ldr	r3, [pc, #20]	; (81e54 <UOTGHS_Handler+0x270>)
   81e40:	701a      	strb	r2, [r3, #0]
   81e42:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81e46:	b662      	cpsie	i
   81e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e4c:	000811a1 	.word	0x000811a1
   81e50:	400ac000 	.word	0x400ac000
   81e54:	200701d8 	.word	0x200701d8
   81e58:	000807e1 	.word	0x000807e1
   81e5c:	400ac220 	.word	0x400ac220
   81e60:	20070c4d 	.word	0x20070c4d
   81e64:	000815e9 	.word	0x000815e9
   81e68:	0008153d 	.word	0x0008153d
   81e6c:	00081589 	.word	0x00081589
   81e70:	400ac160 	.word	0x400ac160
   81e74:	0008081d 	.word	0x0008081d
   81e78:	20070c9c 	.word	0x20070c9c
   81e7c:	20070c4a 	.word	0x20070c4a
   81e80:	20070c4e 	.word	0x20070c4e
   81e84:	000815f9 	.word	0x000815f9
   81e88:	000815a1 	.word	0x000815a1
   81e8c:	400ac1f0 	.word	0x400ac1f0
   81e90:	400ac130 	.word	0x400ac130
   81e94:	400ac1c0 	.word	0x400ac1c0
   81e98:	20180000 	.word	0x20180000
		dbg_print("out ");
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
   81e9c:	4bb5      	ldr	r3, [pc, #724]	; (82174 <UOTGHS_Handler+0x590>)
   81e9e:	681b      	ldr	r3, [r3, #0]
   81ea0:	f013 0f08 	tst.w	r3, #8
   81ea4:	d013      	beq.n	81ece <UOTGHS_Handler+0x2ea>
		dbg_print("nako ");
		// Overflow on OUT packet
		udd_ack_nak_out(0);
   81ea6:	2208      	movs	r2, #8
   81ea8:	4bb3      	ldr	r3, [pc, #716]	; (82178 <UOTGHS_Handler+0x594>)
   81eaa:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
   81eac:	3b30      	subs	r3, #48	; 0x30
   81eae:	681b      	ldr	r3, [r3, #0]
   81eb0:	f013 0f01 	tst.w	r3, #1
   81eb4:	f040 819e 	bne.w	821f4 <UOTGHS_Handler+0x610>
		return; // Overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   81eb8:	4bb0      	ldr	r3, [pc, #704]	; (8217c <UOTGHS_Handler+0x598>)
   81eba:	781b      	ldrb	r3, [r3, #0]
   81ebc:	2b03      	cmp	r3, #3
   81ebe:	f040 8199 	bne.w	821f4 <UOTGHS_Handler+0x610>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   81ec2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ec6:	4bae      	ldr	r3, [pc, #696]	; (82180 <UOTGHS_Handler+0x59c>)
   81ec8:	601a      	str	r2, [r3, #0]
   81eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
   81ece:	4ba9      	ldr	r3, [pc, #676]	; (82174 <UOTGHS_Handler+0x590>)
   81ed0:	681b      	ldr	r3, [r3, #0]
   81ed2:	f013 0f10 	tst.w	r3, #16
   81ed6:	f000 817e 	beq.w	821d6 <UOTGHS_Handler+0x5f2>
		dbg_print("naki ");
		// Underflow on IN packet
		udd_ack_nak_in(0);
   81eda:	2210      	movs	r2, #16
   81edc:	4ba6      	ldr	r3, [pc, #664]	; (82178 <UOTGHS_Handler+0x594>)
   81ede:	601a      	str	r2, [r3, #0]
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
   81ee0:	3b30      	subs	r3, #48	; 0x30
   81ee2:	681b      	ldr	r3, [r3, #0]
   81ee4:	f013 0f02 	tst.w	r3, #2
   81ee8:	f040 8184 	bne.w	821f4 <UOTGHS_Handler+0x610>
		return; // Underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   81eec:	4ba3      	ldr	r3, [pc, #652]	; (8217c <UOTGHS_Handler+0x598>)
   81eee:	781b      	ldrb	r3, [r3, #0]
   81ef0:	2b01      	cmp	r3, #1
   81ef2:	d103      	bne.n	81efc <UOTGHS_Handler+0x318>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   81ef4:	4ba3      	ldr	r3, [pc, #652]	; (82184 <UOTGHS_Handler+0x5a0>)
   81ef6:	4798      	blx	r3
   81ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   81efc:	2b04      	cmp	r3, #4
   81efe:	f040 8179 	bne.w	821f4 <UOTGHS_Handler+0x610>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   81f02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81f06:	4b9e      	ldr	r3, [pc, #632]	; (82180 <UOTGHS_Handler+0x59c>)
   81f08:	601a      	str	r2, [r3, #0]
   81f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f0e:	b2da      	uxtb	r2, r3
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81f10:	461f      	mov	r7, r3
   81f12:	1e58      	subs	r0, r3, #1

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   81f14:	6926      	ldr	r6, [r4, #16]
   81f16:	fa0e f500 	lsl.w	r5, lr, r0
   81f1a:	4235      	tst	r5, r6
   81f1c:	d020      	beq.n	81f60 <UOTGHS_Handler+0x37c>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   81f1e:	6866      	ldr	r6, [r4, #4]
   81f20:	4235      	tst	r5, r6
   81f22:	d01d      	beq.n	81f60 <UOTGHS_Handler+0x37c>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   81f24:	4b98      	ldr	r3, [pc, #608]	; (82188 <UOTGHS_Handler+0x5a4>)
   81f26:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   81f2a:	68d9      	ldr	r1, [r3, #12]
   81f2c:	f011 0f01 	tst.w	r1, #1
   81f30:	f040 8160 	bne.w	821f4 <UOTGHS_Handler+0x610>
					& UOTGHS_DEVDMASTATUS_CHANN_ENB) {
				return true; // Ignore EOT_STA interrupt
			}
			dbg_print("dma%x: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   81f34:	4995      	ldr	r1, [pc, #596]	; (8218c <UOTGHS_Handler+0x5a8>)
   81f36:	614d      	str	r5, [r1, #20]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   81f38:	68db      	ldr	r3, [r3, #12]
					UOTGHS_DEVDMASTATUS_BUFF_COUNT_Msk)
					>> UOTGHS_DEVDMASTATUS_BUFF_COUNT_Pos;
			if (nb_remaining) {
   81f3a:	0c1e      	lsrs	r6, r3, #16
   81f3c:	d00b      	beq.n	81f56 <UOTGHS_Handler+0x372>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   81f3e:	4994      	ldr	r1, [pc, #592]	; (82190 <UOTGHS_Handler+0x5ac>)
   81f40:	0045      	lsls	r5, r0, #1
   81f42:	182b      	adds	r3, r5, r0
   81f44:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
   81f48:	68dc      	ldr	r4, [r3, #12]
   81f4a:	1ba4      	subs	r4, r4, r6
   81f4c:	60dc      	str	r4, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   81f4e:	4428      	add	r0, r5
   81f50:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   81f54:	608c      	str	r4, [r1, #8]
			}
			udd_ep_trans_done(ep);
   81f56:	4610      	mov	r0, r2
   81f58:	4b8e      	ldr	r3, [pc, #568]	; (82194 <UOTGHS_Handler+0x5b0>)
   81f5a:	4798      	blx	r3
   81f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   81f60:	6926      	ldr	r6, [r4, #16]
   81f62:	fa0c f507 	lsl.w	r5, ip, r7
   81f66:	4235      	tst	r5, r6
   81f68:	d04c      	beq.n	82004 <UOTGHS_Handler+0x420>
   81f6a:	ea4f 0883 	mov.w	r8, r3, lsl #2
   81f6e:	f101 0790 	add.w	r7, r1, #144	; 0x90
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   81f72:	f8d1 6090 	ldr.w	r6, [r1, #144]	; 0x90
   81f76:	f016 0f01 	tst.w	r6, #1
   81f7a:	d018      	beq.n	81fae <UOTGHS_Handler+0x3ca>
					&& Is_udd_in_send(ep)) {
   81f7c:	680e      	ldr	r6, [r1, #0]
   81f7e:	f016 0f01 	tst.w	r6, #1
   81f82:	d014      	beq.n	81fae <UOTGHS_Handler+0x3ca>
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
   81f84:	4b84      	ldr	r3, [pc, #528]	; (82198 <UOTGHS_Handler+0x5b4>)
   81f86:	2101      	movs	r1, #1
   81f88:	f848 1003 	str.w	r1, [r8, r3]
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
   81f8c:	4c7a      	ldr	r4, [pc, #488]	; (82178 <UOTGHS_Handler+0x594>)
   81f8e:	f848 1004 	str.w	r1, [r8, r4]
				udd_ack_fifocon(ep);
   81f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81f96:	f848 1003 	str.w	r1, [r8, r3]
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   81f9a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
				dbg_print("I ");
				udd_disable_in_send_interrupt(ep);
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
   81f9e:	4b7c      	ldr	r3, [pc, #496]	; (82190 <UOTGHS_Handler+0x5ac>)
   81fa0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   81fa4:	2100      	movs	r1, #0
   81fa6:	4b7d      	ldr	r3, [pc, #500]	; (8219c <UOTGHS_Handler+0x5b8>)
   81fa8:	4798      	blx	r3
   81faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   81fae:	683a      	ldr	r2, [r7, #0]
   81fb0:	f412 5f80 	tst.w	r2, #4096	; 0x1000
   81fb4:	d026      	beq.n	82004 <UOTGHS_Handler+0x420>
					&& (0 == udd_nb_busy_bank(ep))) {
   81fb6:	680a      	ldr	r2, [r1, #0]
   81fb8:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   81fbc:	d122      	bne.n	82004 <UOTGHS_Handler+0x420>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   81fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81fc2:	4b75      	ldr	r3, [pc, #468]	; (82198 <UOTGHS_Handler+0x5b4>)
   81fc4:	f848 2003 	str.w	r2, [r8, r3]
				udd_disable_endpoint_interrupt(ep);
   81fc8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   81fcc:	615d      	str	r5, [r3, #20]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
   81fce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   81fd2:	4b6f      	ldr	r3, [pc, #444]	; (82190 <UOTGHS_Handler+0x5ac>)
   81fd4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   81fd8:	7d02      	ldrb	r2, [r0, #20]
   81fda:	f36f 0282 	bfc	r2, #2, #1
   81fde:	7502      	strb	r2, [r0, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   81fe0:	4a6f      	ldr	r2, [pc, #444]	; (821a0 <UOTGHS_Handler+0x5bc>)
   81fe2:	f858 3002 	ldr.w	r3, [r8, r2]
   81fe6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   81fea:	f848 3002 	str.w	r3, [r8, r2]
				udd_enable_stall_handshake(ep);
   81fee:	4b64      	ldr	r3, [pc, #400]	; (82180 <UOTGHS_Handler+0x59c>)
   81ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81ff4:	f848 2003 	str.w	r2, [r8, r3]
				udd_reset_data_toggle(ep);
   81ff8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   81ffc:	f848 2003 	str.w	r2, [r8, r3]
   82000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82004:	3301      	adds	r3, #1
   82006:	3104      	adds	r1, #4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   82008:	2b04      	cmp	r3, #4
   8200a:	d180      	bne.n	81f0e <UOTGHS_Handler+0x32a>
   8200c:	e0eb      	b.n	821e6 <UOTGHS_Handler+0x602>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
   8200e:	2208      	movs	r2, #8
   82010:	4b5e      	ldr	r3, [pc, #376]	; (8218c <UOTGHS_Handler+0x5a8>)
   82012:	609a      	str	r2, [r3, #8]
   82014:	4d5e      	ldr	r5, [pc, #376]	; (82190 <UOTGHS_Handler+0x5ac>)
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   82016:	2400      	movs	r4, #0
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   82018:	2701      	movs	r7, #1
   8201a:	4e60      	ldr	r6, [pc, #384]	; (8219c <UOTGHS_Handler+0x5b8>)
   8201c:	3401      	adds	r4, #1
   8201e:	b2e4      	uxtb	r4, r4
   82020:	4628      	mov	r0, r5
   82022:	4639      	mov	r1, r7
   82024:	4622      	mov	r2, r4
   82026:	47b0      	blx	r6
   82028:	3518      	adds	r5, #24
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8202a:	2c03      	cmp	r4, #3
   8202c:	d1f6      	bne.n	8201c <UOTGHS_Handler+0x438>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
   8202e:	4b5d      	ldr	r3, [pc, #372]	; (821a4 <UOTGHS_Handler+0x5c0>)
   82030:	4798      	blx	r3
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   82032:	4b56      	ldr	r3, [pc, #344]	; (8218c <UOTGHS_Handler+0x5a8>)
   82034:	681a      	ldr	r2, [r3, #0]
   82036:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8203a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8203c:	681a      	ldr	r2, [r3, #0]
   8203e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82042:	601a      	str	r2, [r3, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   82044:	4956      	ldr	r1, [pc, #344]	; (821a0 <UOTGHS_Handler+0x5bc>)
   82046:	680a      	ldr	r2, [r1, #0]
   82048:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   8204c:	f022 021c 	bic.w	r2, r2, #28
   82050:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   82054:	600a      	str	r2, [r1, #0]
		USB_EP_TYPE_CONTROL,
		0,
		USB_DEVICE_EP_CTRL_SIZE,
		UOTGHS_DEVEPTCFG_EPBK_1_BANK);

	udd_allocate_memory(0);
   82056:	680a      	ldr	r2, [r1, #0]
   82058:	f042 0202 	orr.w	r2, r2, #2
   8205c:	600a      	str	r2, [r1, #0]
	udd_enable_endpoint(0);
   8205e:	69da      	ldr	r2, [r3, #28]
   82060:	f042 0201 	orr.w	r2, r2, #1
   82064:	61da      	str	r2, [r3, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82066:	f3ef 8210 	mrs	r2, PRIMASK
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8206a:	b672      	cpsid	i
   8206c:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   82070:	2000      	movs	r0, #0
   82072:	494d      	ldr	r1, [pc, #308]	; (821a8 <UOTGHS_Handler+0x5c4>)
   82074:	7008      	strb	r0, [r1, #0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
   82076:	4942      	ldr	r1, [pc, #264]	; (82180 <UOTGHS_Handler+0x59c>)
   82078:	2004      	movs	r0, #4
   8207a:	6008      	str	r0, [r1, #0]
	udd_enable_out_received_interrupt(0);
   8207c:	2002      	movs	r0, #2
   8207e:	6008      	str	r0, [r1, #0]
	udd_enable_endpoint_interrupt(0);
   82080:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82084:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82086:	b92a      	cbnz	r2, 82094 <UOTGHS_Handler+0x4b0>
		cpu_irq_enable();
   82088:	2201      	movs	r2, #1
   8208a:	4b47      	ldr	r3, [pc, #284]	; (821a8 <UOTGHS_Handler+0x5c4>)
   8208c:	701a      	strb	r2, [r3, #0]
   8208e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82092:	b662      	cpsie	i
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
   82094:	4b45      	ldr	r3, [pc, #276]	; (821ac <UOTGHS_Handler+0x5c8>)
   82096:	4798      	blx	r3
		goto udd_interrupt_end;
   82098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   8209c:	4b3b      	ldr	r3, [pc, #236]	; (8218c <UOTGHS_Handler+0x5a8>)
   8209e:	691b      	ldr	r3, [r3, #16]
   820a0:	f013 0f01 	tst.w	r3, #1
   820a4:	d01a      	beq.n	820dc <UOTGHS_Handler+0x4f8>
   820a6:	4b39      	ldr	r3, [pc, #228]	; (8218c <UOTGHS_Handler+0x5a8>)
   820a8:	685b      	ldr	r3, [r3, #4]
   820aa:	f013 0f01 	tst.w	r3, #1
   820ae:	d015      	beq.n	820dc <UOTGHS_Handler+0x4f8>
		otg_unfreeze_clock();
   820b0:	4b36      	ldr	r3, [pc, #216]	; (8218c <UOTGHS_Handler+0x5a8>)
   820b2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   820b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   820ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   820be:	2201      	movs	r2, #1
   820c0:	615a      	str	r2, [r3, #20]
		udd_enable_wake_up_interrupt();
   820c2:	2210      	movs	r2, #16
   820c4:	619a      	str	r2, [r3, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   820c6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   820ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   820ce:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		udd_sleep_mode(false);  // Enter in SUSPEND mode
   820d2:	2000      	movs	r0, #0
   820d4:	4b36      	ldr	r3, [pc, #216]	; (821b0 <UOTGHS_Handler+0x5cc>)
   820d6:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
   820d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   820dc:	4b2b      	ldr	r3, [pc, #172]	; (8218c <UOTGHS_Handler+0x5a8>)
   820de:	691b      	ldr	r3, [r3, #16]
   820e0:	f013 0f10 	tst.w	r3, #16
   820e4:	d01f      	beq.n	82126 <UOTGHS_Handler+0x542>
   820e6:	4b29      	ldr	r3, [pc, #164]	; (8218c <UOTGHS_Handler+0x5a8>)
   820e8:	685b      	ldr	r3, [r3, #4]
   820ea:	f013 0f10 	tst.w	r3, #16
   820ee:	d01a      	beq.n	82126 <UOTGHS_Handler+0x542>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
   820f0:	4a26      	ldr	r2, [pc, #152]	; (8218c <UOTGHS_Handler+0x5a8>)
   820f2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
   820f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   820fa:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   820fe:	4613      	mov	r3, r2
   82100:	e003      	b.n	8210a <UOTGHS_Handler+0x526>
			if (Is_udd_suspend()) {
   82102:	685a      	ldr	r2, [r3, #4]
   82104:	f012 0f01 	tst.w	r2, #1
   82108:	d104      	bne.n	82114 <UOTGHS_Handler+0x530>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while (!Is_otg_clock_usable()) {
   8210a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   8210e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   82112:	d0f6      	beq.n	82102 <UOTGHS_Handler+0x51e>
			if (Is_udd_suspend()) {
				break; // In case of USB state change in HS
			}
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
   82114:	4b1d      	ldr	r3, [pc, #116]	; (8218c <UOTGHS_Handler+0x5a8>)
   82116:	2210      	movs	r2, #16
   82118:	615a      	str	r2, [r3, #20]
		udd_enable_suspend_interrupt();
   8211a:	2001      	movs	r0, #1
   8211c:	6198      	str	r0, [r3, #24]
		udd_sleep_mode(true); // Enter in IDLE mode
   8211e:	4b24      	ldr	r3, [pc, #144]	; (821b0 <UOTGHS_Handler+0x5cc>)
   82120:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
   82122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	if (Is_otg_vbus_transition()) {
   82126:	4b19      	ldr	r3, [pc, #100]	; (8218c <UOTGHS_Handler+0x5a8>)
   82128:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   8212c:	f013 0f02 	tst.w	r3, #2
   82130:	d060      	beq.n	821f4 <UOTGHS_Handler+0x610>
		dbg_print("VBus ");
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
   82132:	4b16      	ldr	r3, [pc, #88]	; (8218c <UOTGHS_Handler+0x5a8>)
   82134:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   82138:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   8213c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   82140:	2202      	movs	r2, #2
   82142:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
		otg_freeze_clock();
   82146:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8214a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8214e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
   82152:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   82156:	f413 6f00 	tst.w	r3, #2048	; 0x800
			udd_attach();
   8215a:	bf14      	ite	ne
   8215c:	4b15      	ldrne	r3, [pc, #84]	; (821b4 <UOTGHS_Handler+0x5d0>)
		} else {
			udd_detach();
   8215e:	4b16      	ldreq	r3, [pc, #88]	; (821b8 <UOTGHS_Handler+0x5d4>)
   82160:	4798      	blx	r3
		}
#endif
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
   82162:	4b0a      	ldr	r3, [pc, #40]	; (8218c <UOTGHS_Handler+0x5a8>)
   82164:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   82168:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   8216c:	4b13      	ldr	r3, [pc, #76]	; (821bc <UOTGHS_Handler+0x5d8>)
   8216e:	4798      	blx	r3
#endif
		goto udd_interrupt_end;
   82170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82174:	400ac130 	.word	0x400ac130
   82178:	400ac160 	.word	0x400ac160
   8217c:	20070c4d 	.word	0x20070c4d
   82180:	400ac1f0 	.word	0x400ac1f0
   82184:	000815a1 	.word	0x000815a1
   82188:	400ac300 	.word	0x400ac300
   8218c:	400ac000 	.word	0x400ac000
   82190:	20070c00 	.word	0x20070c00
   82194:	0008178d 	.word	0x0008178d
   82198:	400ac220 	.word	0x400ac220
   8219c:	00081759 	.word	0x00081759
   821a0:	400ac100 	.word	0x400ac100
   821a4:	00080799 	.word	0x00080799
   821a8:	200701d8 	.word	0x200701d8
   821ac:	0008153d 	.word	0x0008153d
   821b0:	00081925 	.word	0x00081925
   821b4:	00081b35 	.word	0x00081b35
   821b8:	00081bb1 	.word	0x00081bb1
   821bc:	00082c5d 	.word	0x00082c5d

		// Reinitializes control endpoint management
		udd_ctrl_init();
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   821c0:	4b0d      	ldr	r3, [pc, #52]	; (821f8 <UOTGHS_Handler+0x614>)
   821c2:	681b      	ldr	r3, [r3, #0]
   821c4:	f3c3 530a 	ubfx	r3, r3, #20, #11
   821c8:	2b08      	cmp	r3, #8
   821ca:	f47f ad55 	bne.w	81c78 <UOTGHS_Handler+0x94>
   821ce:	4a0b      	ldr	r2, [pc, #44]	; (821fc <UOTGHS_Handler+0x618>)
   821d0:	4b0b      	ldr	r3, [pc, #44]	; (82200 <UOTGHS_Handler+0x61c>)
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
   821d2:	480c      	ldr	r0, [pc, #48]	; (82204 <UOTGHS_Handler+0x620>)
   821d4:	e557      	b.n	81c86 <UOTGHS_Handler+0xa2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
	for (i = 0; i < nb_data; i++) {
   821d6:	490c      	ldr	r1, [pc, #48]	; (82208 <UOTGHS_Handler+0x624>)
   821d8:	2301      	movs	r3, #1
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   821da:	4c0c      	ldr	r4, [pc, #48]	; (8220c <UOTGHS_Handler+0x628>)
   821dc:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   821e0:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   821e4:	e693      	b.n	81f0e <UOTGHS_Handler+0x32a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   821e6:	4b09      	ldr	r3, [pc, #36]	; (8220c <UOTGHS_Handler+0x628>)
   821e8:	685b      	ldr	r3, [r3, #4]
   821ea:	f013 0f08 	tst.w	r3, #8
   821ee:	f43f af55 	beq.w	8209c <UOTGHS_Handler+0x4b8>
   821f2:	e70c      	b.n	8200e <UOTGHS_Handler+0x42a>
   821f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821f8:	400ac130 	.word	0x400ac130
   821fc:	20070c9b 	.word	0x20070c9b
   82200:	20180000 	.word	0x20180000
   82204:	20180008 	.word	0x20180008
   82208:	400ac134 	.word	0x400ac134
   8220c:	400ac000 	.word	0x400ac000

00082210 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
   82210:	2000      	movs	r0, #0
   82212:	4770      	bx	lr

00082214 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
   82214:	4b08      	ldr	r3, [pc, #32]	; (82238 <udd_set_address+0x24>)
   82216:	681a      	ldr	r2, [r3, #0]
   82218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   8221c:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8221e:	681a      	ldr	r2, [r3, #0]
   82220:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82224:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82228:	4302      	orrs	r2, r0
   8222a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8222c:	681a      	ldr	r2, [r3, #0]
   8222e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   82232:	601a      	str	r2, [r3, #0]
   82234:	4770      	bx	lr
   82236:	bf00      	nop
   82238:	400ac000 	.word	0x400ac000

0008223c <udd_getaddress>:
}


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
   8223c:	4b02      	ldr	r3, [pc, #8]	; (82248 <udd_getaddress+0xc>)
   8223e:	6818      	ldr	r0, [r3, #0]
}
   82240:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   82244:	4770      	bx	lr
   82246:	bf00      	nop
   82248:	400ac000 	.word	0x400ac000

0008224c <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
   8224c:	4b02      	ldr	r3, [pc, #8]	; (82258 <udd_get_frame_number+0xc>)
   8224e:	6a18      	ldr	r0, [r3, #32]
}
   82250:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   82254:	4770      	bx	lr
   82256:	bf00      	nop
   82258:	400ac000 	.word	0x400ac000

0008225c <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
	return udd_micro_frame_number();
   8225c:	4b02      	ldr	r3, [pc, #8]	; (82268 <udd_get_micro_frame_number+0xc>)
   8225e:	6a18      	ldr	r0, [r3, #32]
}
   82260:	f3c0 000d 	ubfx	r0, r0, #0, #14
   82264:	4770      	bx	lr
   82266:	bf00      	nop
   82268:	400ac000 	.word	0x400ac000

0008226c <udd_set_setup_payload>:
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
	udd_g_ctrlreq.payload = payload;
   8226c:	4b01      	ldr	r3, [pc, #4]	; (82274 <udd_set_setup_payload+0x8>)
   8226e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   82270:	8199      	strh	r1, [r3, #12]
   82272:	4770      	bx	lr
   82274:	20070c9c 	.word	0x20070c9c

00082278 <udd_ep_free>:
}


void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   82278:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8227c:	2a03      	cmp	r2, #3
   8227e:	d821      	bhi.n	822c4 <udd_ep_free+0x4c>
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
   82280:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_index) {
		return;
	}
	udd_disable_endpoint(ep_index);
   82282:	4811      	ldr	r0, [pc, #68]	; (822c8 <udd_ep_free+0x50>)
   82284:	69c3      	ldr	r3, [r0, #28]
   82286:	2101      	movs	r1, #1
   82288:	fa01 f402 	lsl.w	r4, r1, r2
   8228c:	ea23 0304 	bic.w	r3, r3, r4
   82290:	61c3      	str	r3, [r0, #28]
	udd_unallocate_memory(ep_index);
   82292:	f500 7080 	add.w	r0, r0, #256	; 0x100
   82296:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
   8229a:	f023 0302 	bic.w	r3, r3, #2
   8229e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   822a2:	1e55      	subs	r5, r2, #1
   822a4:	4c09      	ldr	r4, [pc, #36]	; (822cc <udd_ep_free+0x54>)
   822a6:	fa05 f601 	lsl.w	r6, r5, r1
   822aa:	1970      	adds	r0, r6, r5
   822ac:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
   822b0:	4b07      	ldr	r3, [pc, #28]	; (822d0 <udd_ep_free+0x58>)
   822b2:	4798      	blx	r3
		return;
	}
	udd_disable_endpoint(ep_index);
	udd_unallocate_memory(ep_index);
	udd_ep_abort_job(ep);
	udd_ep_job[ep_index - 1].stall_requested = false;
   822b4:	4435      	add	r5, r6
   822b6:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   822ba:	7d23      	ldrb	r3, [r4, #20]
   822bc:	f36f 0382 	bfc	r3, #2, #1
   822c0:	7523      	strb	r3, [r4, #20]
   822c2:	bd70      	pop	{r4, r5, r6, pc}
   822c4:	4770      	bx	lr
   822c6:	bf00      	nop
   822c8:	400ac000 	.word	0x400ac000
   822cc:	20070c00 	.word	0x20070c00
   822d0:	00081759 	.word	0x00081759

000822d4 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	return Is_udd_endpoint_stall_requested(ep_index);
   822d4:	f000 000f 	and.w	r0, r0, #15
   822d8:	4b02      	ldr	r3, [pc, #8]	; (822e4 <udd_ep_is_halted+0x10>)
   822da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   822de:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   822e2:	4770      	bx	lr
   822e4:	400ac1c0 	.word	0x400ac1c0

000822e8 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   822e8:	f000 030f 	and.w	r3, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
   822ec:	2b03      	cmp	r3, #3
   822ee:	d857      	bhi.n	823a0 <udd_ep_set_halt+0xb8>
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   822f0:	4a32      	ldr	r2, [pc, #200]	; (823bc <udd_ep_set_halt+0xd4>)
   822f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   822f6:	f412 2f00 	tst.w	r2, #524288	; 0x80000
   822fa:	d153      	bne.n	823a4 <udd_ep_set_halt+0xbc>
	return Is_udd_endpoint_stall_requested(ep_index);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   822fc:	b430      	push	{r4, r5}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   822fe:	1e59      	subs	r1, r3, #1
	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   82300:	eb01 0441 	add.w	r4, r1, r1, lsl #1
   82304:	4a2e      	ldr	r2, [pc, #184]	; (823c0 <udd_ep_set_halt+0xd8>)
   82306:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
   8230a:	7d12      	ldrb	r2, [r2, #20]
   8230c:	f012 0f04 	tst.w	r2, #4
   82310:	d14a      	bne.n	823a8 <udd_ep_set_halt+0xc0>
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
   82312:	f012 0f01 	tst.w	r2, #1
   82316:	d149      	bne.n	823ac <udd_ep_set_halt+0xc4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   82318:	f3ef 8210 	mrs	r2, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   8231c:	fab2 f282 	clz	r2, r2
   82320:	0952      	lsrs	r2, r2, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   82322:	b672      	cpsid	i
   82324:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   82328:	2500      	movs	r5, #0
   8232a:	4c26      	ldr	r4, [pc, #152]	; (823c4 <udd_ep_set_halt+0xdc>)
   8232c:	7025      	strb	r5, [r4, #0]
		return false; // Job on going, stall impossible
	}

	flags = cpu_irq_save();
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8232e:	f010 0f80 	tst.w	r0, #128	; 0x80
   82332:	d01d      	beq.n	82370 <udd_ep_set_halt+0x88>
   82334:	4824      	ldr	r0, [pc, #144]	; (823c8 <udd_ep_set_halt+0xe0>)
   82336:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
   8233a:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   8233e:	d017      	beq.n	82370 <udd_ep_set_halt+0x88>
		// Delay the stall after the end of IN transfer on USB line
		ptr_job->stall_requested = true;
   82340:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   82344:	481e      	ldr	r0, [pc, #120]	; (823c0 <udd_ep_set_halt+0xd8>)
   82346:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   8234a:	7d08      	ldrb	r0, [r1, #20]
   8234c:	f040 0004 	orr.w	r0, r0, #4
   82350:	7508      	strb	r0, [r1, #20]
#ifdef UDD_EP_FIFO_SUPPORTED
		udd_disable_in_send_interrupt(ep_index);
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
   82352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82356:	481d      	ldr	r0, [pc, #116]	; (823cc <udd_ep_set_halt+0xe4>)
   82358:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   8235c:	4099      	lsls	r1, r3
   8235e:	4b1c      	ldr	r3, [pc, #112]	; (823d0 <udd_ep_set_halt+0xe8>)
   82360:	6199      	str	r1, [r3, #24]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82362:	b32a      	cbz	r2, 823b0 <udd_ep_set_halt+0xc8>
		cpu_irq_enable();
   82364:	2001      	movs	r0, #1
   82366:	7020      	strb	r0, [r4, #0]
   82368:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   8236c:	b662      	cpsie	i
   8236e:	e022      	b.n	823b6 <udd_ep_set_halt+0xce>
		cpu_irq_restore(flags);
		return true;
	}
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   82370:	4818      	ldr	r0, [pc, #96]	; (823d4 <udd_ep_set_halt+0xec>)
   82372:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   82376:	f421 7100 	bic.w	r1, r1, #512	; 0x200
   8237a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
	udd_ack_stall(ep_index);
   8237e:	2040      	movs	r0, #64	; 0x40
   82380:	4915      	ldr	r1, [pc, #84]	; (823d8 <udd_ep_set_halt+0xf0>)
   82382:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   82386:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   8238a:	3190      	adds	r1, #144	; 0x90
   8238c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82390:	b182      	cbz	r2, 823b4 <udd_ep_set_halt+0xcc>
		cpu_irq_enable();
   82392:	2001      	movs	r0, #1
   82394:	4b0b      	ldr	r3, [pc, #44]	; (823c4 <udd_ep_set_halt+0xdc>)
   82396:	7018      	strb	r0, [r3, #0]
   82398:	f3bf 8f5f 	dmb	sy
   8239c:	b662      	cpsie	i
   8239e:	e00a      	b.n	823b6 <udd_ep_set_halt+0xce>
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	irqflags_t flags;

	if (USB_DEVICE_MAX_EP < ep_index) {
		return false;
   823a0:	2000      	movs	r0, #0
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
}
   823a2:	4770      	bx	lr
		return false;
	}

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
   823a4:	2001      	movs	r0, #1
   823a6:	4770      	bx	lr
   823a8:	2001      	movs	r0, #1
   823aa:	e004      	b.n	823b6 <udd_ep_set_halt+0xce>
	}

	if (ptr_job->busy == true) {
		return false; // Job on going, stall impossible
   823ac:	2000      	movs	r0, #0
   823ae:	e002      	b.n	823b6 <udd_ep_set_halt+0xce>
		udd_enable_endpoint_bank_autoswitch(ep_index);
#endif
		udd_enable_bank_interrupt(ep_index);
		udd_enable_endpoint_interrupt(ep_index);
		cpu_irq_restore(flags);
		return true;
   823b0:	2001      	movs	r0, #1
   823b2:	e000      	b.n	823b6 <udd_ep_set_halt+0xce>
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
	udd_ack_stall(ep_index);
	udd_enable_stall_handshake(ep_index);
	cpu_irq_restore(flags);
	return true;
   823b4:	2001      	movs	r0, #1
}
   823b6:	bc30      	pop	{r4, r5}
   823b8:	4770      	bx	lr
   823ba:	bf00      	nop
   823bc:	400ac1c0 	.word	0x400ac1c0
   823c0:	20070c00 	.word	0x20070c00
   823c4:	200701d8 	.word	0x200701d8
   823c8:	400ac130 	.word	0x400ac130
   823cc:	400ac1f0 	.word	0x400ac1f0
   823d0:	400ac000 	.word	0x400ac000
   823d4:	400ac100 	.word	0x400ac100
   823d8:	400ac160 	.word	0x400ac160

000823dc <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   823dc:	b510      	push	{r4, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   823de:	f000 000f 	and.w	r0, r0, #15
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
   823e2:	2803      	cmp	r0, #3
   823e4:	d84e      	bhi.n	82484 <udd_ep_clear_halt+0xa8>


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   823e6:	1e43      	subs	r3, r0, #1
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;

	if (ptr_job->stall_requested) {
   823e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   823ec:	4a2c      	ldr	r2, [pc, #176]	; (824a0 <udd_ep_clear_halt+0xc4>)
   823ee:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   823f2:	7d12      	ldrb	r2, [r2, #20]
   823f4:	f012 0f04 	tst.w	r2, #4
   823f8:	d048      	beq.n	8248c <udd_ep_clear_halt+0xb0>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
   823fa:	460a      	mov	r2, r1
   823fc:	4928      	ldr	r1, [pc, #160]	; (824a0 <udd_ep_clear_halt+0xc4>)
   823fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   82402:	7d11      	ldrb	r1, [r2, #20]
   82404:	f36f 0182 	bfc	r1, #2, #1
   82408:	7511      	strb	r1, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   8240a:	0082      	lsls	r2, r0, #2
   8240c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82410:	4c24      	ldr	r4, [pc, #144]	; (824a4 <udd_ep_clear_halt+0xc8>)
   82412:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   82416:	4081      	lsls	r1, r0
   82418:	f5a4 7408 	sub.w	r4, r4, #544	; 0x220
   8241c:	6161      	str	r1, [r4, #20]
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8241e:	4922      	ldr	r1, [pc, #136]	; (824a8 <udd_ep_clear_halt+0xcc>)
   82420:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82424:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82428:	d014      	beq.n	82454 <udd_ep_clear_halt+0x78>
		if (Is_udd_stall(ep_index)) {
   8242a:	4920      	ldr	r1, [pc, #128]	; (824ac <udd_ep_clear_halt+0xd0>)
   8242c:	5851      	ldr	r1, [r2, r1]
   8242e:	f011 0f40 	tst.w	r1, #64	; 0x40
   82432:	d006      	beq.n	82442 <udd_ep_clear_halt+0x66>
			udd_ack_stall(ep_index);
   82434:	2040      	movs	r0, #64	; 0x40
   82436:	491e      	ldr	r1, [pc, #120]	; (824b0 <udd_ep_clear_halt+0xd4>)
   82438:	5050      	str	r0, [r2, r1]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep_index);
   8243a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   8243e:	3190      	adds	r1, #144	; 0x90
   82440:	5050      	str	r0, [r2, r1]
		}
		// Disable stall
		udd_disable_stall_handshake(ep_index);
   82442:	f44f 2000 	mov.w	r0, #524288	; 0x80000
   82446:	4917      	ldr	r1, [pc, #92]	; (824a4 <udd_ep_clear_halt+0xc8>)
   82448:	5050      	str	r0, [r2, r1]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8244a:	481a      	ldr	r0, [pc, #104]	; (824b4 <udd_ep_clear_halt+0xd8>)
   8244c:	5811      	ldr	r1, [r2, r0]
   8244e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   82452:	5011      	str	r1, [r2, r0]
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   82454:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   82458:	4911      	ldr	r1, [pc, #68]	; (824a0 <udd_ep_clear_halt+0xc4>)
   8245a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   8245e:	7d12      	ldrb	r2, [r2, #20]
   82460:	f012 0f01 	tst.w	r2, #1
   82464:	d010      	beq.n	82488 <udd_ep_clear_halt+0xac>
			ptr_job->busy = false;
   82466:	4608      	mov	r0, r1
   82468:	0059      	lsls	r1, r3, #1
   8246a:	18ca      	adds	r2, r1, r3
   8246c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
   82470:	7d14      	ldrb	r4, [r2, #20]
   82472:	f36f 0400 	bfc	r4, #0, #1
   82476:	7514      	strb	r4, [r2, #20]
			ptr_job->call_nohalt();
   82478:	440b      	add	r3, r1
   8247a:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
   8247e:	4798      	blx	r3
		}
	}
	return true;
   82480:	2001      	movs	r0, #1
   82482:	bd10      	pop	{r4, pc}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
	bool b_stall_cleared = false;

	if (USB_DEVICE_MAX_EP < ep_index)
		return false;
   82484:	2000      	movs	r0, #0
   82486:	bd10      	pop	{r4, pc}
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   82488:	2001      	movs	r0, #1
   8248a:	bd10      	pop	{r4, pc}
		ptr_job->stall_requested = false;
		udd_disable_bank_interrupt(ep_index);
		udd_disable_endpoint_interrupt(ep_index);
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8248c:	0082      	lsls	r2, r0, #2
   8248e:	4906      	ldr	r1, [pc, #24]	; (824a8 <udd_ep_clear_halt+0xcc>)
   82490:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
   82494:	f411 2f00 	tst.w	r1, #524288	; 0x80000
   82498:	d1c7      	bne.n	8242a <udd_ep_clear_halt+0x4e>
		if (ptr_job->busy == true) {
			ptr_job->busy = false;
			ptr_job->call_nohalt();
		}
	}
	return true;
   8249a:	2001      	movs	r0, #1
}
   8249c:	bd10      	pop	{r4, pc}
   8249e:	bf00      	nop
   824a0:	20070c00 	.word	0x20070c00
   824a4:	400ac220 	.word	0x400ac220
   824a8:	400ac1c0 	.word	0x400ac1c0
   824ac:	400ac130 	.word	0x400ac130
   824b0:	400ac160 	.word	0x400ac160
   824b4:	400ac100 	.word	0x400ac100

000824b8 <udd_ep_run>:
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
#endif
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   824b8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep) {
   824bc:	2803      	cmp	r0, #3
   824be:	d863      	bhi.n	82588 <udd_ep_run+0xd0>


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   824c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
   824c2:	4c36      	ldr	r4, [pc, #216]	; (8259c <udd_ep_run+0xe4>)
   824c4:	69e5      	ldr	r5, [r4, #28]
   824c6:	2401      	movs	r4, #1
   824c8:	4084      	lsls	r4, r0
   824ca:	422c      	tst	r4, r5
   824cc:	d05e      	beq.n	8258c <udd_ep_run+0xd4>
			|| Is_udd_endpoint_stall_requested(ep)
   824ce:	4c34      	ldr	r4, [pc, #208]	; (825a0 <udd_ep_run+0xe8>)
   824d0:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   824d4:	f414 2f00 	tst.w	r4, #524288	; 0x80000
   824d8:	d15a      	bne.n	82590 <udd_ep_run+0xd8>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   824da:	1e44      	subs	r4, r0, #1

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
   824dc:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   824e0:	4d30      	ldr	r5, [pc, #192]	; (825a4 <udd_ep_run+0xec>)
   824e2:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   824e6:	7d2d      	ldrb	r5, [r5, #20]
   824e8:	f015 0f04 	tst.w	r5, #4
   824ec:	d152      	bne.n	82594 <udd_ep_run+0xdc>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   824ee:	f3ef 8510 	mrs	r5, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
   824f2:	fab5 f585 	clz	r5, r5
   824f6:	096d      	lsrs	r5, r5, #5
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   824f8:	b672      	cpsid	i
   824fa:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   824fe:	2700      	movs	r7, #0
   82500:	4e29      	ldr	r6, [pc, #164]	; (825a8 <udd_ep_run+0xf0>)
   82502:	7037      	strb	r7, [r6, #0]
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
   82504:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   82508:	4f26      	ldr	r7, [pc, #152]	; (825a4 <udd_ep_run+0xec>)
   8250a:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   8250e:	7d36      	ldrb	r6, [r6, #20]
   82510:	f016 0f01 	tst.w	r6, #1
   82514:	d009      	beq.n	8252a <udd_ep_run+0x72>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   82516:	2d00      	cmp	r5, #0
   82518:	d03e      	beq.n	82598 <udd_ep_run+0xe0>
		cpu_irq_enable();
   8251a:	2201      	movs	r2, #1
   8251c:	4b22      	ldr	r3, [pc, #136]	; (825a8 <udd_ep_run+0xf0>)
   8251e:	701a      	strb	r2, [r3, #0]
   82520:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   82524:	b662      	cpsie	i
		cpu_irq_restore(flags);
		return false; // Job already on going
   82526:	2000      	movs	r0, #0
   82528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	ptr_job->busy = true;
   8252a:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   8252e:	4f1d      	ldr	r7, [pc, #116]	; (825a4 <udd_ep_run+0xec>)
   82530:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
   82534:	7d37      	ldrb	r7, [r6, #20]
   82536:	f047 0701 	orr.w	r7, r7, #1
   8253a:	7537      	strb	r7, [r6, #20]
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8253c:	b12d      	cbz	r5, 8254a <udd_ep_run+0x92>
		cpu_irq_enable();
   8253e:	2601      	movs	r6, #1
   82540:	4d19      	ldr	r5, [pc, #100]	; (825a8 <udd_ep_run+0xf0>)
   82542:	702e      	strb	r6, [r5, #0]
   82544:	f3bf 8f5f 	dmb	sy
   82548:	b662      	cpsie	i
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   8254a:	4f16      	ldr	r7, [pc, #88]	; (825a4 <udd_ep_run+0xec>)
   8254c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
   82550:	00ed      	lsls	r5, r5, #3
   82552:	197e      	adds	r6, r7, r5
   82554:	6072      	str	r2, [r6, #4]
	ptr_job->buf_size = buf_size;
   82556:	60b3      	str	r3, [r6, #8]
	ptr_job->buf_cnt = 0;
   82558:	2200      	movs	r2, #0
   8255a:	60f2      	str	r2, [r6, #12]
	ptr_job->buf_load = 0;
   8255c:	6132      	str	r2, [r6, #16]
	ptr_job->call_trans = callback;
   8255e:	9a06      	ldr	r2, [sp, #24]
   82560:	517a      	str	r2, [r7, r5]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   82562:	b919      	cbnz	r1, 8256c <udd_ep_run+0xb4>
   82564:	fab3 f383 	clz	r3, r3
   82568:	095b      	lsrs	r3, r3, #5
   8256a:	e000      	b.n	8256e <udd_ep_run+0xb6>
   8256c:	2301      	movs	r3, #1
   8256e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   82572:	4a0c      	ldr	r2, [pc, #48]	; (825a4 <udd_ep_run+0xec>)
   82574:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
   82578:	7d22      	ldrb	r2, [r4, #20]
   8257a:	f363 0241 	bfi	r2, r3, #1, #1
   8257e:	7522      	strb	r2, [r4, #20]
#endif // UDD_EP_FIFO_SUPPORTED

#ifdef UDD_EP_DMA_SUPPORTED
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
   82580:	4b0a      	ldr	r3, [pc, #40]	; (825ac <udd_ep_run+0xf4>)
   82582:	4798      	blx	r3
	return true;
   82584:	2001      	movs	r0, #1
   82586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
   82588:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   8258a:	4770      	bx	lr
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
   8258c:	2000      	movs	r0, #0
   8258e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82590:	2000      	movs	r0, #0
   82592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82594:	2000      	movs	r0, #0
   82596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false; // Job already on going
   82598:	2000      	movs	r0, #0
	// Request first DMA transfer
	dbg_print("(exDMA%x) ", ep);
	udd_ep_trans_done(ep);
	return true;
#endif
}
   8259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8259c:	400ac000 	.word	0x400ac000
   825a0:	400ac1c0 	.word	0x400ac1c0
   825a4:	20070c00 	.word	0x20070c00
   825a8:	200701d8 	.word	0x200701d8
   825ac:	0008178d 	.word	0x0008178d

000825b0 <udd_ep_alloc>:


#if (0 != USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   825b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   825b4:	b082      	sub	sp, #8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
   825b6:	f000 040f 	and.w	r4, r0, #15

	if (ep > USB_DEVICE_MAX_EP) {
   825ba:	2c03      	cmp	r4, #3
   825bc:	f200 80e3 	bhi.w	82786 <udd_ep_alloc+0x1d6>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
   825c0:	4b7a      	ldr	r3, [pc, #488]	; (827ac <udd_ep_alloc+0x1fc>)
   825c2:	69dd      	ldr	r5, [r3, #28]
   825c4:	4627      	mov	r7, r4
   825c6:	2301      	movs	r3, #1
   825c8:	40a3      	lsls	r3, r4
   825ca:	402b      	ands	r3, r5
   825cc:	f040 80dd 	bne.w	8278a <udd_ep_alloc+0x1da>
		return false;
	}
	dbg_print("alloc(%x, %d) ", ep, MaxEndpointSize);

	// Bank choise
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   825d0:	f011 0503 	ands.w	r5, r1, #3
   825d4:	f000 80db 	beq.w	8278e <udd_ep_alloc+0x1de>
   825d8:	2d02      	cmp	r5, #2
   825da:	d905      	bls.n	825e8 <udd_ep_alloc+0x38>
   825dc:	2d03      	cmp	r5, #3
   825de:	f040 80d6 	bne.w	8278e <udd_ep_alloc+0x1de>
		Assert(false);
		return false;
	}
	switch (nb_bank) {
	case 1:
		bank = UOTGHS_DEVEPTCFG_EPBK_1_BANK >>
   825e2:	f04f 0c00 	mov.w	ip, #0
   825e6:	e001      	b.n	825ec <udd_ep_alloc+0x3c>
				UOTGHS_DEVEPTCFG_EPBK_Pos;
		break;
	case 2:
		bank = UOTGHS_DEVEPTCFG_EPBK_2_BANK >>
   825e8:	f04f 0c01 	mov.w	ip, #1
	Assert((MaxEndpointSize == 1023)
		|| !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   825ec:	ea4f 0e84 	mov.w	lr, r4, lsl #2
   825f0:	4e6f      	ldr	r6, [pc, #444]	; (827b0 <udd_ep_alloc+0x200>)
   825f2:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
   825f6:	f425 55cb 	bic.w	r5, r5, #6496	; 0x1960
   825fa:	f025 051c 	bic.w	r5, r5, #28
   825fe:	02c9      	lsls	r1, r1, #11
   82600:	f401 51c0 	and.w	r1, r1, #6144	; 0x1800
   82604:	f000 0080 	and.w	r0, r0, #128	; 0x80
   82608:	2800      	cmp	r0, #0
   8260a:	bf18      	it	ne
   8260c:	f44f 7380 	movne.w	r3, #256	; 0x100
   82610:	f5a2 6080 	sub.w	r0, r2, #1024	; 0x400
   82614:	b280      	uxth	r0, r0
   82616:	f5b0 4f7c 	cmp.w	r0, #64512	; 0xfc00
   8261a:	d304      	bcc.n	82626 <udd_ep_alloc+0x76>
   8261c:	2a08      	cmp	r2, #8
   8261e:	d905      	bls.n	8262c <udd_ep_alloc+0x7c>
   82620:	0052      	lsls	r2, r2, #1
   82622:	3a01      	subs	r2, #1
   82624:	e003      	b.n	8262e <udd_ep_alloc+0x7e>
   82626:	f240 72ff 	movw	r2, #2047	; 0x7ff
   8262a:	e000      	b.n	8262e <udd_ep_alloc+0x7e>
   8262c:	220f      	movs	r2, #15
   8262e:	fab2 f282 	clz	r2, r2
   82632:	ea41 0c8c 	orr.w	ip, r1, ip, lsl #2
   82636:	ea4c 0303 	orr.w	r3, ip, r3
   8263a:	f1c2 021c 	rsb	r2, r2, #28
   8263e:	ea43 1202 	orr.w	r2, r3, r2, lsl #4
   82642:	f422 62d0 	bic.w	r2, r2, #1664	; 0x680
   82646:	f022 0203 	bic.w	r2, r2, #3
   8264a:	04d2      	lsls	r2, r2, #19
   8264c:	0cd2      	lsrs	r2, r2, #19
   8264e:	432a      	orrs	r2, r5
   82650:	f84e 2006 	str.w	r2, [lr, r6]
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
   82654:	2601      	movs	r6, #1
   82656:	40be      	lsls	r6, r7
   82658:	b2b6      	uxth	r6, r6

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8265a:	2c02      	cmp	r4, #2
   8265c:	f200 809d 	bhi.w	8279a <udd_ep_alloc+0x1ea>
   82660:	4a54      	ldr	r2, [pc, #336]	; (827b4 <udd_ep_alloc+0x204>)
   82662:	2303      	movs	r3, #3
		if (Is_udd_endpoint_enabled(i)) {
   82664:	4851      	ldr	r0, [pc, #324]	; (827ac <udd_ep_alloc+0x1fc>)
   82666:	2701      	movs	r7, #1
   82668:	69c5      	ldr	r5, [r0, #28]
   8266a:	fa07 f103 	lsl.w	r1, r7, r3
   8266e:	4229      	tst	r1, r5
   82670:	d009      	beq.n	82686 <udd_ep_alloc+0xd6>
			ep_allocated |= 1 << i;
   82672:	430e      	orrs	r6, r1
   82674:	b2b6      	uxth	r6, r6
			udd_disable_endpoint(i);
   82676:	69c5      	ldr	r5, [r0, #28]
   82678:	ea25 0101 	bic.w	r1, r5, r1
   8267c:	61c1      	str	r1, [r0, #28]
			udd_unallocate_memory(i);
   8267e:	6811      	ldr	r1, [r2, #0]
   82680:	f021 0102 	bic.w	r1, r1, #2
   82684:	6011      	str	r1, [r2, #0]
   82686:	3b01      	subs	r3, #1
   82688:	3a04      	subs	r2, #4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8268a:	b2d9      	uxtb	r1, r3
   8268c:	428c      	cmp	r4, r1
   8268e:	d3eb      	bcc.n	82668 <udd_ep_alloc+0xb8>
   82690:	e083      	b.n	8279a <udd_ep_alloc+0x1ea>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
   82692:	fa46 f304 	asr.w	r3, r6, r4
   82696:	f013 0f01 	tst.w	r3, #1
   8269a:	d06e      	beq.n	8277a <udd_ep_alloc+0x1ca>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8269c:	f104 3eff 	add.w	lr, r4, #4294967295
			bool b_restart = ptr_job->busy;
   826a0:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   826a4:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   826a8:	7d1a      	ldrb	r2, [r3, #20]
   826aa:	f002 0101 	and.w	r1, r2, #1
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
   826ae:	f36f 0200 	bfc	r2, #0, #1
   826b2:	751a      	strb	r2, [r3, #20]
			// Re-allocate memory
			udd_allocate_memory(i);
   826b4:	00a0      	lsls	r0, r4, #2
   826b6:	eb00 0c05 	add.w	ip, r0, r5
   826ba:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   826be:	f043 0302 	orr.w	r3, r3, #2
   826c2:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			udd_enable_endpoint(i);
   826c6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 827ac <udd_ep_alloc+0x1fc>
   826ca:	f8d9 201c 	ldr.w	r2, [r9, #28]
   826ce:	2301      	movs	r3, #1
   826d0:	40a3      	lsls	r3, r4
   826d2:	4313      	orrs	r3, r2
   826d4:	f8c9 301c 	str.w	r3, [r9, #28]
			if (!Is_udd_endpoint_configured(i)) {
   826d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   826dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   826e0:	d119      	bne.n	82716 <udd_ep_alloc+0x166>
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
   826e2:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   826e6:	4a34      	ldr	r2, [pc, #208]	; (827b8 <udd_ep_alloc+0x208>)
   826e8:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
   826ec:	2d00      	cmp	r5, #0
   826ee:	d050      	beq.n	82792 <udd_ep_alloc+0x1e2>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
   826f0:	f8dc 3000 	ldr.w	r3, [ip]
   826f4:	f413 7f80 	tst.w	r3, #256	; 0x100
					i |= USB_EP_DIR_IN;
   826f8:	bf18      	it	ne
   826fa:	f044 0480 	orrne.w	r4, r4, #128	; 0x80
				}
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   826fe:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   82702:	4b2d      	ldr	r3, [pc, #180]	; (827b8 <udd_ep_alloc+0x208>)
   82704:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
   82708:	2001      	movs	r0, #1
   8270a:	f8de 100c 	ldr.w	r1, [lr, #12]
   8270e:	4622      	mov	r2, r4
   82710:	47a8      	blx	r5
						ptr_job->buf_cnt, i);
				return false;
   82712:	2000      	movs	r0, #0
   82714:	e046      	b.n	827a4 <udd_ep_alloc+0x1f4>
			}
			udd_enable_endpoint_bank_autoswitch(i);
   82716:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8271a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   8271e:	f845 3024 	str.w	r3, [r5, r4, lsl #2]
			if (b_restart) {
   82722:	b351      	cbz	r1, 8277a <udd_ep_alloc+0x1ca>
				if (!Is_udd_endpoint_dma_supported(i)
					&& !Is_udd_endpoint_in(i)) {
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
   82724:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   82728:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
   8272c:	f102 0108 	add.w	r1, r2, #8
   82730:	68d3      	ldr	r3, [r2, #12]
   82732:	6912      	ldr	r2, [r2, #16]
   82734:	1a9b      	subs	r3, r3, r2
   82736:	604b      	str	r3, [r1, #4]
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82738:	5942      	ldr	r2, [r0, r5]
   8273a:	f412 7f80 	tst.w	r2, #256	; 0x100
   8273e:	bf14      	ite	ne
   82740:	f044 0a80 	orrne.w	sl, r4, #128	; 0x80
   82744:	46a2      	moveq	sl, r4
							(i | USB_EP_DIR_IN) : i,
						ptr_job->b_shortpacket,
   82746:	ea4f 094e 	mov.w	r9, lr, lsl #1
   8274a:	eb09 0c0e 	add.w	ip, r9, lr
   8274e:	eb07 0ccc 	add.w	ip, r7, ip, lsl #3
   82752:	f89c 1014 	ldrb.w	r1, [ip, #20]
					ptr_job->buf_cnt -= ptr_job->buf_load;
				}
#  else
				ptr_job->buf_cnt -= ptr_job->buf_load;
#  endif
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   82756:	f8dc 2004 	ldr.w	r2, [ip, #4]
   8275a:	f8dc c008 	ldr.w	ip, [ip, #8]
   8275e:	44ce      	add	lr, r9
   82760:	f857 003e 	ldr.w	r0, [r7, lr, lsl #3]
   82764:	9000      	str	r0, [sp, #0]
   82766:	4650      	mov	r0, sl
   82768:	f3c1 0140 	ubfx	r1, r1, #1, #1
   8276c:	441a      	add	r2, r3
   8276e:	ebc3 030c 	rsb	r3, r3, ip
   82772:	f8df c048 	ldr.w	ip, [pc, #72]	; 827bc <udd_ep_alloc+0x20c>
   82776:	47e0      	blx	ip
						ptr_job->b_shortpacket,
						&ptr_job->buf[ptr_job->buf_cnt],
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
   82778:	b168      	cbz	r0, 82796 <udd_ep_alloc+0x1e6>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   8277a:	3401      	adds	r4, #1
   8277c:	b2e4      	uxtb	r4, r4
   8277e:	2c04      	cmp	r4, #4
   82780:	d187      	bne.n	82692 <udd_ep_alloc+0xe2>
					return false;
				}
			}
		}
	}
	return true;
   82782:	2001      	movs	r0, #1
   82784:	e00e      	b.n	827a4 <udd_ep_alloc+0x1f4>

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;

	if (ep > USB_DEVICE_MAX_EP) {
		return false;
   82786:	2000      	movs	r0, #0
   82788:	e00c      	b.n	827a4 <udd_ep_alloc+0x1f4>
	}
	if (Is_udd_endpoint_enabled(ep)) {
		return false;
   8278a:	2000      	movs	r0, #0
   8278c:	e00a      	b.n	827a4 <udd_ep_alloc+0x1f4>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
		break;
	default:
		Assert(false);
		return false;
   8278e:	2000      	movs	r0, #0
   82790:	e008      	b.n	827a4 <udd_ep_alloc+0x1f4>
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
				dbg_print("ErrRealloc%d ", i);
				if (NULL == ptr_job->call_trans) {
					return false;
   82792:	2000      	movs	r0, #0
   82794:	e006      	b.n	827a4 <udd_ep_alloc+0x1f4>
						ptr_job->buf_size
							- ptr_job->buf_cnt,
						ptr_job->call_trans);
				if (!b_restart) {
					dbg_print("ErrReRun%d ", i);
					return false;
   82796:	2000      	movs	r0, #0
   82798:	e004      	b.n	827a4 <udd_ep_alloc+0x1f4>

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
			bool b_restart = ptr_job->busy;
   8279a:	4f07      	ldr	r7, [pc, #28]	; (827b8 <udd_ep_alloc+0x208>)
			// Restart running job because
			// memory window slides up and its data is lost
			ptr_job->busy = false;
			// Re-allocate memory
			udd_allocate_memory(i);
   8279c:	4d04      	ldr	r5, [pc, #16]	; (827b0 <udd_ep_alloc+0x200>)
			udd_enable_endpoint(i);
			if (!Is_udd_endpoint_configured(i)) {
   8279e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 827c0 <udd_ep_alloc+0x210>
   827a2:	e776      	b.n	82692 <udd_ep_alloc+0xe2>
				}
			}
		}
	}
	return true;
}
   827a4:	b002      	add	sp, #8
   827a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   827aa:	bf00      	nop
   827ac:	400ac000 	.word	0x400ac000
   827b0:	400ac100 	.word	0x400ac100
   827b4:	400ac10c 	.word	0x400ac10c
   827b8:	20070c00 	.word	0x20070c00
   827bc:	000824b9 	.word	0x000824b9
   827c0:	400ac130 	.word	0x400ac130

000827c4 <udd_ep_abort>:
#endif
}


void udd_ep_abort(udd_ep_id_t ep)
{
   827c4:	b570      	push	{r4, r5, r6, lr}
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   827c6:	f000 020f 	and.w	r2, r0, #15
		udd_disable_in_send_interrupt(ep_index);
	} else
#endif
	{
		// Stop DMA transfer
		udd_disable_endpoint_dma_interrupt(ep_index);
   827ca:	1e54      	subs	r4, r2, #1
   827cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
   827d0:	40a3      	lsls	r3, r4
   827d2:	4915      	ldr	r1, [pc, #84]	; (82828 <udd_ep_abort+0x64>)
   827d4:	614b      	str	r3, [r1, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   827d6:	4b15      	ldr	r3, [pc, #84]	; (8282c <udd_ep_abort+0x68>)
   827d8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   827dc:	2500      	movs	r5, #0
   827de:	609d      	str	r5, [r3, #8]
	}
	udd_disable_endpoint_interrupt(ep_index);
   827e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   827e4:	4093      	lsls	r3, r2
   827e6:	614b      	str	r3, [r1, #20]
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
   827e8:	f010 0f80 	tst.w	r0, #128	; 0x80
   827ec:	d013      	beq.n	82816 <udd_ep_abort+0x52>
		while(udd_nb_busy_bank(ep_index)) {
   827ee:	0093      	lsls	r3, r2, #2
   827f0:	480f      	ldr	r0, [pc, #60]	; (82830 <udd_ep_abort+0x6c>)
   827f2:	4418      	add	r0, r3
			udd_kill_last_in_bank(ep_index);
   827f4:	4d0f      	ldr	r5, [pc, #60]	; (82834 <udd_ep_abort+0x70>)
   827f6:	441d      	add	r5, r3
   827f8:	f44f 5600 	mov.w	r6, #8192	; 0x2000
			while(Is_udd_kill_last(ep_index));
   827fc:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   82800:	4419      	add	r1, r3
   82802:	e004      	b.n	8280e <udd_ep_abort+0x4a>
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
			udd_kill_last_in_bank(ep_index);
   82804:	602e      	str	r6, [r5, #0]
			while(Is_udd_kill_last(ep_index));
   82806:	680b      	ldr	r3, [r1, #0]
   82808:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   8280c:	d1fb      	bne.n	82806 <udd_ep_abort+0x42>
		udd_endpoint_dma_set_control(ep_index, 0);
	}
	udd_disable_endpoint_interrupt(ep_index);
	// Kill IN banks
	if (ep & USB_EP_DIR_IN) {
		while(udd_nb_busy_bank(ep_index)) {
   8280e:	6803      	ldr	r3, [r0, #0]
   82810:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   82814:	d1f6      	bne.n	82804 <udd_ep_abort+0x40>
static void udd_ep_abort_job(udd_ep_id_t ep)
{
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   82816:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   8281a:	4807      	ldr	r0, [pc, #28]	; (82838 <udd_ep_abort+0x74>)
   8281c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   82820:	2101      	movs	r1, #1
   82822:	4b06      	ldr	r3, [pc, #24]	; (8283c <udd_ep_abort+0x78>)
   82824:	4798      	blx	r3
   82826:	bd70      	pop	{r4, r5, r6, pc}
   82828:	400ac000 	.word	0x400ac000
   8282c:	400ac300 	.word	0x400ac300
   82830:	400ac130 	.word	0x400ac130
   82834:	400ac1f0 	.word	0x400ac1f0
   82838:	20070c00 	.word	0x20070c00
   8283c:	00081759 	.word	0x00081759

00082840 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82840:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82842:	010b      	lsls	r3, r1, #4
   82844:	4293      	cmp	r3, r2
   82846:	d90f      	bls.n	82868 <usart_set_async_baudrate+0x28>
   82848:	e01c      	b.n	82884 <usart_set_async_baudrate+0x44>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   8284a:	f002 0207 	and.w	r2, r2, #7
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   8284e:	6841      	ldr	r1, [r0, #4]
   82850:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   82854:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82856:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8285a:	6202      	str	r2, [r0, #32]

	return 0;
   8285c:	2000      	movs	r0, #0
   8285e:	e01e      	b.n	8289e <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   82860:	2001      	movs	r0, #1
   82862:	e01c      	b.n	8289e <usart_set_async_baudrate+0x5e>
   82864:	2001      	movs	r0, #1
   82866:	e01a      	b.n	8289e <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82868:	00d2      	lsls	r2, r2, #3
   8286a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   8286e:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
   82872:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82874:	1e5c      	subs	r4, r3, #1
   82876:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   8287a:	428c      	cmp	r4, r1
   8287c:	d8f0      	bhi.n	82860 <usart_set_async_baudrate+0x20>
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
   8287e:	f002 0207 	and.w	r2, r2, #7
   82882:	e7e8      	b.n	82856 <usart_set_async_baudrate+0x16>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82884:	00c9      	lsls	r1, r1, #3
   82886:	00d2      	lsls	r2, r2, #3
   82888:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   8288c:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
   82890:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82892:	1e5c      	subs	r4, r3, #1
   82894:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   82898:	428c      	cmp	r4, r1
   8289a:	d9d6      	bls.n	8284a <usart_set_async_baudrate+0xa>
   8289c:	e7e2      	b.n	82864 <usart_set_async_baudrate+0x24>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   8289e:	f85d 4b04 	ldr.w	r4, [sp], #4
   828a2:	4770      	bx	lr

000828a4 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   828a4:	4b08      	ldr	r3, [pc, #32]	; (828c8 <usart_reset+0x24>)
   828a6:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   828aa:	2300      	movs	r3, #0
   828ac:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   828ae:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   828b0:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   828b2:	2388      	movs	r3, #136	; 0x88
   828b4:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   828b6:	2324      	movs	r3, #36	; 0x24
   828b8:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   828ba:	f44f 7380 	mov.w	r3, #256	; 0x100
   828be:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   828c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   828c4:	6003      	str	r3, [r0, #0]
   828c6:	4770      	bx	lr
   828c8:	55534100 	.word	0x55534100

000828cc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   828cc:	b570      	push	{r4, r5, r6, lr}
   828ce:	4605      	mov	r5, r0
   828d0:	460c      	mov	r4, r1
   828d2:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   828d4:	4b0f      	ldr	r3, [pc, #60]	; (82914 <usart_init_rs232+0x48>)
   828d6:	4798      	blx	r3

	ul_reg_val = 0;
   828d8:	2200      	movs	r2, #0
   828da:	4b0f      	ldr	r3, [pc, #60]	; (82918 <usart_init_rs232+0x4c>)
   828dc:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   828de:	b19c      	cbz	r4, 82908 <usart_init_rs232+0x3c>
   828e0:	4628      	mov	r0, r5
   828e2:	6821      	ldr	r1, [r4, #0]
   828e4:	4632      	mov	r2, r6
   828e6:	4b0d      	ldr	r3, [pc, #52]	; (8291c <usart_init_rs232+0x50>)
   828e8:	4798      	blx	r3
   828ea:	4602      	mov	r2, r0
   828ec:	b970      	cbnz	r0, 8290c <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   828ee:	68a1      	ldr	r1, [r4, #8]
   828f0:	6863      	ldr	r3, [r4, #4]
   828f2:	4319      	orrs	r1, r3
   828f4:	6923      	ldr	r3, [r4, #16]
   828f6:	4319      	orrs	r1, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   828f8:	68e3      	ldr	r3, [r4, #12]
   828fa:	430b      	orrs	r3, r1
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   828fc:	4906      	ldr	r1, [pc, #24]	; (82918 <usart_init_rs232+0x4c>)
   828fe:	600b      	str	r3, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   82900:	6869      	ldr	r1, [r5, #4]
   82902:	430b      	orrs	r3, r1
   82904:	606b      	str	r3, [r5, #4]

	return 0;
   82906:	e002      	b.n	8290e <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   82908:	2201      	movs	r2, #1
   8290a:	e000      	b.n	8290e <usart_init_rs232+0x42>
   8290c:	2201      	movs	r2, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   8290e:	4610      	mov	r0, r2
   82910:	bd70      	pop	{r4, r5, r6, pc}
   82912:	bf00      	nop
   82914:	000828a5 	.word	0x000828a5
   82918:	20070c54 	.word	0x20070c54
   8291c:	00082841 	.word	0x00082841

00082920 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   82920:	2340      	movs	r3, #64	; 0x40
   82922:	6003      	str	r3, [r0, #0]
   82924:	4770      	bx	lr
   82926:	bf00      	nop

00082928 <wdt_disable>:
/**
 * \brief Disable the watchdog timer.
 */
void wdt_disable(Wdt *p_wdt)
{
	p_wdt->WDT_MR = WDT_MR_WDDIS;
   82928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8292c:	6043      	str	r3, [r0, #4]
   8292e:	4770      	bx	lr

00082930 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   82930:	e7fe      	b.n	82930 <Dummy_Handler>
   82932:	bf00      	nop

00082934 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82934:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82936:	4b1f      	ldr	r3, [pc, #124]	; (829b4 <Reset_Handler+0x80>)
   82938:	4a1f      	ldr	r2, [pc, #124]	; (829b8 <Reset_Handler+0x84>)
   8293a:	429a      	cmp	r2, r3
   8293c:	d003      	beq.n	82946 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8293e:	4b1f      	ldr	r3, [pc, #124]	; (829bc <Reset_Handler+0x88>)
   82940:	4a1c      	ldr	r2, [pc, #112]	; (829b4 <Reset_Handler+0x80>)
   82942:	429a      	cmp	r2, r3
   82944:	d304      	bcc.n	82950 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82946:	4b1e      	ldr	r3, [pc, #120]	; (829c0 <Reset_Handler+0x8c>)
   82948:	4a1e      	ldr	r2, [pc, #120]	; (829c4 <Reset_Handler+0x90>)
   8294a:	429a      	cmp	r2, r3
   8294c:	d310      	bcc.n	82970 <Reset_Handler+0x3c>
   8294e:	e01b      	b.n	82988 <Reset_Handler+0x54>
   82950:	4918      	ldr	r1, [pc, #96]	; (829b4 <Reset_Handler+0x80>)
   82952:	1d0a      	adds	r2, r1, #4
   82954:	4b1c      	ldr	r3, [pc, #112]	; (829c8 <Reset_Handler+0x94>)
   82956:	1a9b      	subs	r3, r3, r2
   82958:	f023 0303 	bic.w	r3, r3, #3
   8295c:	3304      	adds	r3, #4
   8295e:	4a16      	ldr	r2, [pc, #88]	; (829b8 <Reset_Handler+0x84>)
   82960:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   82962:	f852 0b04 	ldr.w	r0, [r2], #4
   82966:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8296a:	429a      	cmp	r2, r3
   8296c:	d1f9      	bne.n	82962 <Reset_Handler+0x2e>
   8296e:	e7ea      	b.n	82946 <Reset_Handler+0x12>
   82970:	4b16      	ldr	r3, [pc, #88]	; (829cc <Reset_Handler+0x98>)
   82972:	4a17      	ldr	r2, [pc, #92]	; (829d0 <Reset_Handler+0x9c>)
   82974:	1ad2      	subs	r2, r2, r3
   82976:	f022 0203 	bic.w	r2, r2, #3
   8297a:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8297c:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8297e:	2100      	movs	r1, #0
   82980:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82984:	4293      	cmp	r3, r2
   82986:	d1fb      	bne.n	82980 <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82988:	4b12      	ldr	r3, [pc, #72]	; (829d4 <Reset_Handler+0xa0>)
   8298a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8298e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82992:	4911      	ldr	r1, [pc, #68]	; (829d8 <Reset_Handler+0xa4>)
   82994:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82996:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8299a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8299e:	d203      	bcs.n	829a8 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   829a0:	688b      	ldr	r3, [r1, #8]
   829a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   829a6:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   829a8:	4b0c      	ldr	r3, [pc, #48]	; (829dc <Reset_Handler+0xa8>)
   829aa:	4798      	blx	r3

	/* Branch to main function */
	main();
   829ac:	4b0c      	ldr	r3, [pc, #48]	; (829e0 <Reset_Handler+0xac>)
   829ae:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   829b0:	e7fe      	b.n	829b0 <Reset_Handler+0x7c>
   829b2:	bf00      	nop
   829b4:	20070000 	.word	0x20070000
   829b8:	000835f4 	.word	0x000835f4
   829bc:	20070a1c 	.word	0x20070a1c
   829c0:	20070cb8 	.word	0x20070cb8
   829c4:	20070a1c 	.word	0x20070a1c
   829c8:	20070a1f 	.word	0x20070a1f
   829cc:	20070a20 	.word	0x20070a20
   829d0:	20070cbb 	.word	0x20070cbb
   829d4:	00080000 	.word	0x00080000
   829d8:	e000ed00 	.word	0xe000ed00
   829dc:	00082c89 	.word	0x00082c89
   829e0:	00082b79 	.word	0x00082b79

000829e4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   829e4:	4b3e      	ldr	r3, [pc, #248]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   829e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   829e8:	f003 0303 	and.w	r3, r3, #3
   829ec:	2b03      	cmp	r3, #3
   829ee:	d85f      	bhi.n	82ab0 <SystemCoreClockUpdate+0xcc>
   829f0:	e8df f003 	tbb	[pc, r3]
   829f4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   829f8:	4b3a      	ldr	r3, [pc, #232]	; (82ae4 <SystemCoreClockUpdate+0x100>)
   829fa:	695b      	ldr	r3, [r3, #20]
   829fc:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82a00:	bf14      	ite	ne
   82a02:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82a06:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82a0a:	4b37      	ldr	r3, [pc, #220]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a0c:	601a      	str	r2, [r3, #0]
   82a0e:	e04f      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a10:	4b33      	ldr	r3, [pc, #204]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a12:	6a1b      	ldr	r3, [r3, #32]
   82a14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a18:	d003      	beq.n	82a22 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a1a:	4a34      	ldr	r2, [pc, #208]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a1c:	4b32      	ldr	r3, [pc, #200]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a1e:	601a      	str	r2, [r3, #0]
   82a20:	e046      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a22:	4a33      	ldr	r2, [pc, #204]	; (82af0 <SystemCoreClockUpdate+0x10c>)
   82a24:	4b30      	ldr	r3, [pc, #192]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a26:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a28:	4b2d      	ldr	r3, [pc, #180]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a2a:	6a1b      	ldr	r3, [r3, #32]
   82a2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a30:	2b10      	cmp	r3, #16
   82a32:	d002      	beq.n	82a3a <SystemCoreClockUpdate+0x56>
   82a34:	2b20      	cmp	r3, #32
   82a36:	d004      	beq.n	82a42 <SystemCoreClockUpdate+0x5e>
   82a38:	e03a      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a3a:	4a2e      	ldr	r2, [pc, #184]	; (82af4 <SystemCoreClockUpdate+0x110>)
   82a3c:	4b2a      	ldr	r3, [pc, #168]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a3e:	601a      	str	r2, [r3, #0]
				break;
   82a40:	e036      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a42:	4a2a      	ldr	r2, [pc, #168]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a44:	4b28      	ldr	r3, [pc, #160]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a46:	601a      	str	r2, [r3, #0]
				break;
   82a48:	e032      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82a4a:	4b25      	ldr	r3, [pc, #148]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a4c:	6a1b      	ldr	r3, [r3, #32]
   82a4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82a52:	d003      	beq.n	82a5c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82a54:	4a25      	ldr	r2, [pc, #148]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a56:	4b24      	ldr	r3, [pc, #144]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a58:	601a      	str	r2, [r3, #0]
   82a5a:	e012      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82a5c:	4a24      	ldr	r2, [pc, #144]	; (82af0 <SystemCoreClockUpdate+0x10c>)
   82a5e:	4b22      	ldr	r3, [pc, #136]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a60:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82a62:	4b1f      	ldr	r3, [pc, #124]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a64:	6a1b      	ldr	r3, [r3, #32]
   82a66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a6a:	2b10      	cmp	r3, #16
   82a6c:	d002      	beq.n	82a74 <SystemCoreClockUpdate+0x90>
   82a6e:	2b20      	cmp	r3, #32
   82a70:	d004      	beq.n	82a7c <SystemCoreClockUpdate+0x98>
   82a72:	e006      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82a74:	4a1f      	ldr	r2, [pc, #124]	; (82af4 <SystemCoreClockUpdate+0x110>)
   82a76:	4b1c      	ldr	r3, [pc, #112]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a78:	601a      	str	r2, [r3, #0]
				break;
   82a7a:	e002      	b.n	82a82 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82a7c:	4a1b      	ldr	r2, [pc, #108]	; (82aec <SystemCoreClockUpdate+0x108>)
   82a7e:	4b1a      	ldr	r3, [pc, #104]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82a80:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82a82:	4b17      	ldr	r3, [pc, #92]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a86:	f003 0303 	and.w	r3, r3, #3
   82a8a:	2b02      	cmp	r3, #2
   82a8c:	d10d      	bne.n	82aaa <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a8e:	4a14      	ldr	r2, [pc, #80]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82a90:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82a92:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82a94:	4814      	ldr	r0, [pc, #80]	; (82ae8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82a96:	f3c3 410a 	ubfx	r1, r3, #16, #11
   82a9a:	6803      	ldr	r3, [r0, #0]
   82a9c:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82aa0:	b2d2      	uxtb	r2, r2
   82aa2:	fbb3 f3f2 	udiv	r3, r3, r2
   82aa6:	6003      	str	r3, [r0, #0]
   82aa8:	e002      	b.n	82ab0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82aaa:	4a13      	ldr	r2, [pc, #76]	; (82af8 <SystemCoreClockUpdate+0x114>)
   82aac:	4b0e      	ldr	r3, [pc, #56]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82aae:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82ab0:	4b0b      	ldr	r3, [pc, #44]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82ab4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ab8:	2b70      	cmp	r3, #112	; 0x70
   82aba:	d107      	bne.n	82acc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   82abc:	4a0a      	ldr	r2, [pc, #40]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82abe:	6813      	ldr	r3, [r2, #0]
   82ac0:	490e      	ldr	r1, [pc, #56]	; (82afc <SystemCoreClockUpdate+0x118>)
   82ac2:	fba1 1303 	umull	r1, r3, r1, r3
   82ac6:	085b      	lsrs	r3, r3, #1
   82ac8:	6013      	str	r3, [r2, #0]
   82aca:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82acc:	4b04      	ldr	r3, [pc, #16]	; (82ae0 <SystemCoreClockUpdate+0xfc>)
   82ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82ad0:	4905      	ldr	r1, [pc, #20]	; (82ae8 <SystemCoreClockUpdate+0x104>)
   82ad2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82ad6:	680b      	ldr	r3, [r1, #0]
   82ad8:	40d3      	lsrs	r3, r2
   82ada:	600b      	str	r3, [r1, #0]
   82adc:	4770      	bx	lr
   82ade:	bf00      	nop
   82ae0:	400e0600 	.word	0x400e0600
   82ae4:	400e1a10 	.word	0x400e1a10
   82ae8:	200701dc 	.word	0x200701dc
   82aec:	00b71b00 	.word	0x00b71b00
   82af0:	003d0900 	.word	0x003d0900
   82af4:	007a1200 	.word	0x007a1200
   82af8:	0e4e1c00 	.word	0x0e4e1c00
   82afc:	aaaaaaab 	.word	0xaaaaaaab

00082b00 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82b00:	4b09      	ldr	r3, [pc, #36]	; (82b28 <_sbrk+0x28>)
   82b02:	681b      	ldr	r3, [r3, #0]
   82b04:	b913      	cbnz	r3, 82b0c <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   82b06:	4a09      	ldr	r2, [pc, #36]	; (82b2c <_sbrk+0x2c>)
   82b08:	4b07      	ldr	r3, [pc, #28]	; (82b28 <_sbrk+0x28>)
   82b0a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   82b0c:	4b06      	ldr	r3, [pc, #24]	; (82b28 <_sbrk+0x28>)
   82b0e:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82b10:	181a      	adds	r2, r3, r0
   82b12:	4907      	ldr	r1, [pc, #28]	; (82b30 <_sbrk+0x30>)
   82b14:	4291      	cmp	r1, r2
   82b16:	db04      	blt.n	82b22 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82b18:	4610      	mov	r0, r2
   82b1a:	4a03      	ldr	r2, [pc, #12]	; (82b28 <_sbrk+0x28>)
   82b1c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82b1e:	4618      	mov	r0, r3
   82b20:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82b22:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82b26:	4770      	bx	lr
   82b28:	20070c58 	.word	0x20070c58
   82b2c:	20072cb8 	.word	0x20072cb8
   82b30:	20087ffc 	.word	0x20087ffc

00082b34 <oled_write_byte>:
 */

#include "oled.h"

/* Function Definitions */
void oled_write_byte(char i) {
   82b34:	b510      	push	{r4, lr}
	spi_write(OLED_SPI, (uint16_t)i, OLED_CS_ID, false);
   82b36:	4601      	mov	r1, r0
   82b38:	4802      	ldr	r0, [pc, #8]	; (82b44 <oled_write_byte+0x10>)
   82b3a:	2200      	movs	r2, #0
   82b3c:	4613      	mov	r3, r2
   82b3e:	4c02      	ldr	r4, [pc, #8]	; (82b48 <oled_write_byte+0x14>)
   82b40:	47a0      	blx	r4
   82b42:	bd10      	pop	{r4, pc}
   82b44:	40008000 	.word	0x40008000
   82b48:	0008141d 	.word	0x0008141d

00082b4c <oled_send_cmd>:
		oled_start_byte = 0xFF;		// oled sees this as invalid
	}
	oled_write_byte(oled_start_byte);
}

void oled_send_cmd(void) {
   82b4c:	b508      	push	{r3, lr}
	} else if(oled_mode == OLED_DATA_MODE) {
		oled_start_byte = (OLED_START_BYTE_BASE)|(1<<OLED_START_BYTE_DC);
	} else {
		oled_start_byte = 0xFF;		// oled sees this as invalid
	}
	oled_write_byte(oled_start_byte);
   82b4e:	20f8      	movs	r0, #248	; 0xf8
   82b50:	4b01      	ldr	r3, [pc, #4]	; (82b58 <oled_send_cmd+0xc>)
   82b52:	4798      	blx	r3
   82b54:	bd08      	pop	{r3, pc}
   82b56:	bf00      	nop
   82b58:	00082b35 	.word	0x00082b35

00082b5c <oled_init>:

void oled_test_output(void) {
	
}

void oled_init(void) {
   82b5c:	b508      	push	{r3, lr}
	pio_set_pin_high(OLED_RST_PIN);		// rst high, inactive
   82b5e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   82b62:	4b03      	ldr	r3, [pc, #12]	; (82b70 <oled_init+0x14>)
   82b64:	4798      	blx	r3
	delay_ms(1);
   82b66:	f241 7070 	movw	r0, #6000	; 0x1770
   82b6a:	4b02      	ldr	r3, [pc, #8]	; (82b74 <oled_init+0x18>)
   82b6c:	4798      	blx	r3
   82b6e:	bd08      	pop	{r3, pc}
   82b70:	00080fe5 	.word	0x00080fe5
   82b74:	20070001 	.word	0x20070001

00082b78 <main>:
/* Global Variables */
static bool my_flag_autorize_cdc_transfert = false;
// TODO:: Define state machine
//enum {S_IDLE = 0, S_CONTACTOR_CHECK, S_)

int main (void) {
   82b78:	b580      	push	{r7, lr}
 
	/* Initializations */
	sysclk_init();
   82b7a:	4b28      	ldr	r3, [pc, #160]	; (82c1c <main+0xa4>)
   82b7c:	4798      	blx	r3
	board_init();
   82b7e:	4b28      	ldr	r3, [pc, #160]	; (82c20 <main+0xa8>)
   82b80:	4798      	blx	r3
	oled_init();
   82b82:	4b28      	ldr	r3, [pc, #160]	; (82c24 <main+0xac>)
   82b84:	4798      	blx	r3
	
	pio_set_pin_high(BUZ_PIN);
   82b86:	2001      	movs	r0, #1
   82b88:	4f27      	ldr	r7, [pc, #156]	; (82c28 <main+0xb0>)
   82b8a:	47b8      	blx	r7
	delay_ms(50);
   82b8c:	4d27      	ldr	r5, [pc, #156]	; (82c2c <main+0xb4>)
   82b8e:	4628      	mov	r0, r5
   82b90:	4c27      	ldr	r4, [pc, #156]	; (82c30 <main+0xb8>)
   82b92:	47a0      	blx	r4
	pio_set_pin_low(BUZ_PIN);
   82b94:	2001      	movs	r0, #1
   82b96:	4e27      	ldr	r6, [pc, #156]	; (82c34 <main+0xbc>)
   82b98:	47b0      	blx	r6
	delay_ms(50);
   82b9a:	4628      	mov	r0, r5
   82b9c:	47a0      	blx	r4
	pio_set_pin_high(BUZ_PIN);
   82b9e:	2001      	movs	r0, #1
   82ba0:	47b8      	blx	r7
	delay_ms(50);
   82ba2:	4628      	mov	r0, r5
   82ba4:	47a0      	blx	r4
	pio_set_pin_low(BUZ_PIN);
   82ba6:	2001      	movs	r0, #1
   82ba8:	47b0      	blx	r6

	pio_set_pin_high(ULED3_PIN);
   82baa:	2008      	movs	r0, #8
   82bac:	47b8      	blx	r7
	delay_ms(100);		
   82bae:	4d22      	ldr	r5, [pc, #136]	; (82c38 <main+0xc0>)
   82bb0:	4628      	mov	r0, r5
   82bb2:	47a0      	blx	r4
	pio_set_pin_high(MAIN1_CONTACTOR_PIN);
   82bb4:	2040      	movs	r0, #64	; 0x40
   82bb6:	47b8      	blx	r7
	delay_ms(100);
   82bb8:	4628      	mov	r0, r5
   82bba:	47a0      	blx	r4
	pio_set_pin_low(MAIN1_CONTACTOR_PIN);
   82bbc:	2040      	movs	r0, #64	; 0x40
   82bbe:	47b0      	blx	r6
	delay_ms(100);		
   82bc0:	4628      	mov	r0, r5
   82bc2:	47a0      	blx	r4
	pio_set_pin_high(ASTR_CONTACTOR_PIN);
   82bc4:	f44f 7080 	mov.w	r0, #256	; 0x100
   82bc8:	47b8      	blx	r7
	delay_ms(100);
   82bca:	4628      	mov	r0, r5
   82bcc:	47a0      	blx	r4
	pio_set_pin_low(ASTR_CONTACTOR_PIN);
   82bce:	f44f 7080 	mov.w	r0, #256	; 0x100
   82bd2:	47b0      	blx	r6
	delay_ms(100);				
   82bd4:	4628      	mov	r0, r5
   82bd6:	47a0      	blx	r4
	pio_set_pin_high(BSTR_CONTACTOR_PIN);
   82bd8:	f44f 7000 	mov.w	r0, #512	; 0x200
   82bdc:	47b8      	blx	r7
	delay_ms(100);
   82bde:	4628      	mov	r0, r5
   82be0:	47a0      	blx	r4
	pio_set_pin_low(BSTR_CONTACTOR_PIN);
   82be2:	f44f 7000 	mov.w	r0, #512	; 0x200
   82be6:	47b0      	blx	r6
	delay_ms(100);				
   82be8:	4628      	mov	r0, r5
   82bea:	47a0      	blx	r4
	pio_set_pin_high(PCRG_CONTACTOR_PIN);
   82bec:	2080      	movs	r0, #128	; 0x80
   82bee:	47b8      	blx	r7
	delay_ms(100);
   82bf0:	4628      	mov	r0, r5
   82bf2:	47a0      	blx	r4
	pio_set_pin_low(PCRG_CONTACTOR_PIN);
   82bf4:	2080      	movs	r0, #128	; 0x80
   82bf6:	47b0      	blx	r6
	delay_ms(100);				
   82bf8:	4628      	mov	r0, r5
   82bfa:	47a0      	blx	r4
	pio_set_pin_high(MAIN2_CONTACTOR_PIN);
   82bfc:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82c00:	47b8      	blx	r7
	delay_ms(100);
   82c02:	4628      	mov	r0, r5
   82c04:	47a0      	blx	r4
	pio_set_pin_low(MAIN2_CONTACTOR_PIN);		
   82c06:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82c0a:	47b0      	blx	r6
	pio_set_pin_low(ULED3_PIN);
   82c0c:	2008      	movs	r0, #8
   82c0e:	47b0      	blx	r6
		pio_clear(ULED3_PIO, ULED3);
		while (!(can_mailbox_get_status(CAN0, 0) & CAN_MSR_MRDY));	
		pio_set(ULED2_PIO, ULED2);
		pio_clear(ULED2_PIO, ULED2);	
    */
		oled_send_cmd();
   82c10:	4e0a      	ldr	r6, [pc, #40]	; (82c3c <main+0xc4>)
		delay_ms(1000);
   82c12:	4d0b      	ldr	r5, [pc, #44]	; (82c40 <main+0xc8>)
		pio_clear(ULED3_PIO, ULED3);
		while (!(can_mailbox_get_status(CAN0, 0) & CAN_MSR_MRDY));	
		pio_set(ULED2_PIO, ULED2);
		pio_clear(ULED2_PIO, ULED2);	
    */
		oled_send_cmd();
   82c14:	47b0      	blx	r6
		delay_ms(1000);
   82c16:	4628      	mov	r0, r5
   82c18:	47a0      	blx	r4
	}
   82c1a:	e7fb      	b.n	82c14 <main+0x9c>
   82c1c:	00080e55 	.word	0x00080e55
   82c20:	000811b1 	.word	0x000811b1
   82c24:	00082b5d 	.word	0x00082b5d
   82c28:	00080fe5 	.word	0x00080fe5
   82c2c:	000493e0 	.word	0x000493e0
   82c30:	20070001 	.word	0x20070001
   82c34:	00080ffd 	.word	0x00080ffd
   82c38:	000927c0 	.word	0x000927c0
   82c3c:	00082b4d 	.word	0x00082b4d
   82c40:	005b8d80 	.word	0x005b8d80

00082c44 <my_callback_cdc_enable>:
}

/* USB Callback Definitions */
bool my_callback_cdc_enable(void)
{
  my_flag_autorize_cdc_transfert = true;
   82c44:	2001      	movs	r0, #1
   82c46:	4b01      	ldr	r3, [pc, #4]	; (82c4c <my_callback_cdc_enable+0x8>)
   82c48:	7018      	strb	r0, [r3, #0]
  return true;
}
   82c4a:	4770      	bx	lr
   82c4c:	20070c5c 	.word	0x20070c5c

00082c50 <my_callback_cdc_disable>:

void my_callback_cdc_disable(void)
{
  my_flag_autorize_cdc_transfert = false;
   82c50:	2200      	movs	r2, #0
   82c52:	4b01      	ldr	r3, [pc, #4]	; (82c58 <my_callback_cdc_disable+0x8>)
   82c54:	701a      	strb	r2, [r3, #0]
   82c56:	4770      	bx	lr
   82c58:	20070c5c 	.word	0x20070c5c

00082c5c <user_callback_vbus_action>:
}

void user_callback_vbus_action(bool b_vbus_high) {
   82c5c:	b508      	push	{r3, lr}
	if (b_vbus_high) {
   82c5e:	b128      	cbz	r0, 82c6c <user_callback_vbus_action+0x10>
		// Connect USB device
		pio_set_pin_high(ULED1_PIN);
   82c60:	2002      	movs	r0, #2
   82c62:	4b05      	ldr	r3, [pc, #20]	; (82c78 <user_callback_vbus_action+0x1c>)
   82c64:	4798      	blx	r3
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
   82c66:	4b05      	ldr	r3, [pc, #20]	; (82c7c <user_callback_vbus_action+0x20>)
   82c68:	4798      	blx	r3
   82c6a:	bd08      	pop	{r3, pc}
		udc_attach();
	} else { 
		// Disconnect USB device
		pio_set_pin_low(ULED1_PIN);
   82c6c:	2002      	movs	r0, #2
   82c6e:	4b04      	ldr	r3, [pc, #16]	; (82c80 <user_callback_vbus_action+0x24>)
   82c70:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82c72:	4b04      	ldr	r3, [pc, #16]	; (82c84 <user_callback_vbus_action+0x28>)
   82c74:	4798      	blx	r3
   82c76:	bd08      	pop	{r3, pc}
   82c78:	00080fe5 	.word	0x00080fe5
   82c7c:	00081b35 	.word	0x00081b35
   82c80:	00080ffd 	.word	0x00080ffd
   82c84:	00081bb1 	.word	0x00081bb1

00082c88 <__libc_init_array>:
   82c88:	b570      	push	{r4, r5, r6, lr}
   82c8a:	4e0f      	ldr	r6, [pc, #60]	; (82cc8 <__libc_init_array+0x40>)
   82c8c:	4d0f      	ldr	r5, [pc, #60]	; (82ccc <__libc_init_array+0x44>)
   82c8e:	1b76      	subs	r6, r6, r5
   82c90:	10b6      	asrs	r6, r6, #2
   82c92:	bf18      	it	ne
   82c94:	2400      	movne	r4, #0
   82c96:	d005      	beq.n	82ca4 <__libc_init_array+0x1c>
   82c98:	3401      	adds	r4, #1
   82c9a:	f855 3b04 	ldr.w	r3, [r5], #4
   82c9e:	4798      	blx	r3
   82ca0:	42a6      	cmp	r6, r4
   82ca2:	d1f9      	bne.n	82c98 <__libc_init_array+0x10>
   82ca4:	4e0a      	ldr	r6, [pc, #40]	; (82cd0 <__libc_init_array+0x48>)
   82ca6:	4d0b      	ldr	r5, [pc, #44]	; (82cd4 <__libc_init_array+0x4c>)
   82ca8:	f000 fc92 	bl	835d0 <_init>
   82cac:	1b76      	subs	r6, r6, r5
   82cae:	10b6      	asrs	r6, r6, #2
   82cb0:	bf18      	it	ne
   82cb2:	2400      	movne	r4, #0
   82cb4:	d006      	beq.n	82cc4 <__libc_init_array+0x3c>
   82cb6:	3401      	adds	r4, #1
   82cb8:	f855 3b04 	ldr.w	r3, [r5], #4
   82cbc:	4798      	blx	r3
   82cbe:	42a6      	cmp	r6, r4
   82cc0:	d1f9      	bne.n	82cb6 <__libc_init_array+0x2e>
   82cc2:	bd70      	pop	{r4, r5, r6, pc}
   82cc4:	bd70      	pop	{r4, r5, r6, pc}
   82cc6:	bf00      	nop
   82cc8:	000835dc 	.word	0x000835dc
   82ccc:	000835dc 	.word	0x000835dc
   82cd0:	000835e4 	.word	0x000835e4
   82cd4:	000835dc 	.word	0x000835dc

00082cd8 <register_fini>:
   82cd8:	4b02      	ldr	r3, [pc, #8]	; (82ce4 <register_fini+0xc>)
   82cda:	b113      	cbz	r3, 82ce2 <register_fini+0xa>
   82cdc:	4802      	ldr	r0, [pc, #8]	; (82ce8 <register_fini+0x10>)
   82cde:	f000 b805 	b.w	82cec <atexit>
   82ce2:	4770      	bx	lr
   82ce4:	00000000 	.word	0x00000000
   82ce8:	00082cf9 	.word	0x00082cf9

00082cec <atexit>:
   82cec:	4601      	mov	r1, r0
   82cee:	2000      	movs	r0, #0
   82cf0:	4602      	mov	r2, r0
   82cf2:	4603      	mov	r3, r0
   82cf4:	f000 bbe0 	b.w	834b8 <__register_exitproc>

00082cf8 <__libc_fini_array>:
   82cf8:	b538      	push	{r3, r4, r5, lr}
   82cfa:	4b08      	ldr	r3, [pc, #32]	; (82d1c <__libc_fini_array+0x24>)
   82cfc:	4d08      	ldr	r5, [pc, #32]	; (82d20 <__libc_fini_array+0x28>)
   82cfe:	1aed      	subs	r5, r5, r3
   82d00:	10ac      	asrs	r4, r5, #2
   82d02:	bf18      	it	ne
   82d04:	18ed      	addne	r5, r5, r3
   82d06:	d005      	beq.n	82d14 <__libc_fini_array+0x1c>
   82d08:	3c01      	subs	r4, #1
   82d0a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82d0e:	4798      	blx	r3
   82d10:	2c00      	cmp	r4, #0
   82d12:	d1f9      	bne.n	82d08 <__libc_fini_array+0x10>
   82d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82d18:	f000 bc64 	b.w	835e4 <_fini>
   82d1c:	000835f0 	.word	0x000835f0
   82d20:	000835f4 	.word	0x000835f4

00082d24 <_malloc_trim_r>:
   82d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82d26:	460c      	mov	r4, r1
   82d28:	4f22      	ldr	r7, [pc, #136]	; (82db4 <_malloc_trim_r+0x90>)
   82d2a:	4606      	mov	r6, r0
   82d2c:	f000 fbae 	bl	8348c <__malloc_lock>
   82d30:	68bb      	ldr	r3, [r7, #8]
   82d32:	685d      	ldr	r5, [r3, #4]
   82d34:	f025 0503 	bic.w	r5, r5, #3
   82d38:	1b29      	subs	r1, r5, r4
   82d3a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82d3e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82d42:	f021 010f 	bic.w	r1, r1, #15
   82d46:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82d4a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82d4e:	db07      	blt.n	82d60 <_malloc_trim_r+0x3c>
   82d50:	4630      	mov	r0, r6
   82d52:	2100      	movs	r1, #0
   82d54:	f000 fb9e 	bl	83494 <_sbrk_r>
   82d58:	68bb      	ldr	r3, [r7, #8]
   82d5a:	442b      	add	r3, r5
   82d5c:	4298      	cmp	r0, r3
   82d5e:	d004      	beq.n	82d6a <_malloc_trim_r+0x46>
   82d60:	4630      	mov	r0, r6
   82d62:	f000 fb95 	bl	83490 <__malloc_unlock>
   82d66:	2000      	movs	r0, #0
   82d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d6a:	4630      	mov	r0, r6
   82d6c:	4261      	negs	r1, r4
   82d6e:	f000 fb91 	bl	83494 <_sbrk_r>
   82d72:	3001      	adds	r0, #1
   82d74:	d00d      	beq.n	82d92 <_malloc_trim_r+0x6e>
   82d76:	4b10      	ldr	r3, [pc, #64]	; (82db8 <_malloc_trim_r+0x94>)
   82d78:	68ba      	ldr	r2, [r7, #8]
   82d7a:	6819      	ldr	r1, [r3, #0]
   82d7c:	1b2d      	subs	r5, r5, r4
   82d7e:	f045 0501 	orr.w	r5, r5, #1
   82d82:	4630      	mov	r0, r6
   82d84:	1b09      	subs	r1, r1, r4
   82d86:	6055      	str	r5, [r2, #4]
   82d88:	6019      	str	r1, [r3, #0]
   82d8a:	f000 fb81 	bl	83490 <__malloc_unlock>
   82d8e:	2001      	movs	r0, #1
   82d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82d92:	4630      	mov	r0, r6
   82d94:	2100      	movs	r1, #0
   82d96:	f000 fb7d 	bl	83494 <_sbrk_r>
   82d9a:	68ba      	ldr	r2, [r7, #8]
   82d9c:	1a83      	subs	r3, r0, r2
   82d9e:	2b0f      	cmp	r3, #15
   82da0:	ddde      	ble.n	82d60 <_malloc_trim_r+0x3c>
   82da2:	4c06      	ldr	r4, [pc, #24]	; (82dbc <_malloc_trim_r+0x98>)
   82da4:	4904      	ldr	r1, [pc, #16]	; (82db8 <_malloc_trim_r+0x94>)
   82da6:	6824      	ldr	r4, [r4, #0]
   82da8:	f043 0301 	orr.w	r3, r3, #1
   82dac:	1b00      	subs	r0, r0, r4
   82dae:	6053      	str	r3, [r2, #4]
   82db0:	6008      	str	r0, [r1, #0]
   82db2:	e7d5      	b.n	82d60 <_malloc_trim_r+0x3c>
   82db4:	2007060c 	.word	0x2007060c
   82db8:	20070c6c 	.word	0x20070c6c
   82dbc:	20070a18 	.word	0x20070a18

00082dc0 <_free_r>:
   82dc0:	2900      	cmp	r1, #0
   82dc2:	d04e      	beq.n	82e62 <_free_r+0xa2>
   82dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82dc8:	460c      	mov	r4, r1
   82dca:	4680      	mov	r8, r0
   82dcc:	f000 fb5e 	bl	8348c <__malloc_lock>
   82dd0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   82dd4:	4962      	ldr	r1, [pc, #392]	; (82f60 <_free_r+0x1a0>)
   82dd6:	f1a4 0508 	sub.w	r5, r4, #8
   82dda:	f027 0201 	bic.w	r2, r7, #1
   82dde:	18ab      	adds	r3, r5, r2
   82de0:	688e      	ldr	r6, [r1, #8]
   82de2:	6858      	ldr	r0, [r3, #4]
   82de4:	429e      	cmp	r6, r3
   82de6:	f020 0003 	bic.w	r0, r0, #3
   82dea:	d05a      	beq.n	82ea2 <_free_r+0xe2>
   82dec:	07fe      	lsls	r6, r7, #31
   82dee:	6058      	str	r0, [r3, #4]
   82df0:	d40b      	bmi.n	82e0a <_free_r+0x4a>
   82df2:	f854 7c08 	ldr.w	r7, [r4, #-8]
   82df6:	f101 0e08 	add.w	lr, r1, #8
   82dfa:	1bed      	subs	r5, r5, r7
   82dfc:	68ac      	ldr	r4, [r5, #8]
   82dfe:	443a      	add	r2, r7
   82e00:	4574      	cmp	r4, lr
   82e02:	d067      	beq.n	82ed4 <_free_r+0x114>
   82e04:	68ef      	ldr	r7, [r5, #12]
   82e06:	60e7      	str	r7, [r4, #12]
   82e08:	60bc      	str	r4, [r7, #8]
   82e0a:	181c      	adds	r4, r3, r0
   82e0c:	6864      	ldr	r4, [r4, #4]
   82e0e:	07e4      	lsls	r4, r4, #31
   82e10:	d40c      	bmi.n	82e2c <_free_r+0x6c>
   82e12:	4f54      	ldr	r7, [pc, #336]	; (82f64 <_free_r+0x1a4>)
   82e14:	689c      	ldr	r4, [r3, #8]
   82e16:	4402      	add	r2, r0
   82e18:	42bc      	cmp	r4, r7
   82e1a:	d07c      	beq.n	82f16 <_free_r+0x156>
   82e1c:	68d8      	ldr	r0, [r3, #12]
   82e1e:	f042 0301 	orr.w	r3, r2, #1
   82e22:	60e0      	str	r0, [r4, #12]
   82e24:	6084      	str	r4, [r0, #8]
   82e26:	606b      	str	r3, [r5, #4]
   82e28:	50aa      	str	r2, [r5, r2]
   82e2a:	e003      	b.n	82e34 <_free_r+0x74>
   82e2c:	f042 0301 	orr.w	r3, r2, #1
   82e30:	606b      	str	r3, [r5, #4]
   82e32:	50aa      	str	r2, [r5, r2]
   82e34:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82e38:	d214      	bcs.n	82e64 <_free_r+0xa4>
   82e3a:	08d2      	lsrs	r2, r2, #3
   82e3c:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   82e40:	2401      	movs	r4, #1
   82e42:	6848      	ldr	r0, [r1, #4]
   82e44:	1092      	asrs	r2, r2, #2
   82e46:	fa04 f202 	lsl.w	r2, r4, r2
   82e4a:	689c      	ldr	r4, [r3, #8]
   82e4c:	4310      	orrs	r0, r2
   82e4e:	60ac      	str	r4, [r5, #8]
   82e50:	60eb      	str	r3, [r5, #12]
   82e52:	6048      	str	r0, [r1, #4]
   82e54:	609d      	str	r5, [r3, #8]
   82e56:	60e5      	str	r5, [r4, #12]
   82e58:	4640      	mov	r0, r8
   82e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82e5e:	f000 bb17 	b.w	83490 <__malloc_unlock>
   82e62:	4770      	bx	lr
   82e64:	0a53      	lsrs	r3, r2, #9
   82e66:	2b04      	cmp	r3, #4
   82e68:	d847      	bhi.n	82efa <_free_r+0x13a>
   82e6a:	0993      	lsrs	r3, r2, #6
   82e6c:	f103 0438 	add.w	r4, r3, #56	; 0x38
   82e70:	0060      	lsls	r0, r4, #1
   82e72:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   82e76:	6883      	ldr	r3, [r0, #8]
   82e78:	4939      	ldr	r1, [pc, #228]	; (82f60 <_free_r+0x1a0>)
   82e7a:	4283      	cmp	r3, r0
   82e7c:	d043      	beq.n	82f06 <_free_r+0x146>
   82e7e:	6859      	ldr	r1, [r3, #4]
   82e80:	f021 0103 	bic.w	r1, r1, #3
   82e84:	4291      	cmp	r1, r2
   82e86:	d902      	bls.n	82e8e <_free_r+0xce>
   82e88:	689b      	ldr	r3, [r3, #8]
   82e8a:	4298      	cmp	r0, r3
   82e8c:	d1f7      	bne.n	82e7e <_free_r+0xbe>
   82e8e:	68da      	ldr	r2, [r3, #12]
   82e90:	60ea      	str	r2, [r5, #12]
   82e92:	60ab      	str	r3, [r5, #8]
   82e94:	4640      	mov	r0, r8
   82e96:	6095      	str	r5, [r2, #8]
   82e98:	60dd      	str	r5, [r3, #12]
   82e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82e9e:	f000 baf7 	b.w	83490 <__malloc_unlock>
   82ea2:	07ff      	lsls	r7, r7, #31
   82ea4:	4402      	add	r2, r0
   82ea6:	d407      	bmi.n	82eb8 <_free_r+0xf8>
   82ea8:	f854 4c08 	ldr.w	r4, [r4, #-8]
   82eac:	1b2d      	subs	r5, r5, r4
   82eae:	68eb      	ldr	r3, [r5, #12]
   82eb0:	68a8      	ldr	r0, [r5, #8]
   82eb2:	4422      	add	r2, r4
   82eb4:	60c3      	str	r3, [r0, #12]
   82eb6:	6098      	str	r0, [r3, #8]
   82eb8:	4b2b      	ldr	r3, [pc, #172]	; (82f68 <_free_r+0x1a8>)
   82eba:	f042 0001 	orr.w	r0, r2, #1
   82ebe:	681b      	ldr	r3, [r3, #0]
   82ec0:	6068      	str	r0, [r5, #4]
   82ec2:	429a      	cmp	r2, r3
   82ec4:	608d      	str	r5, [r1, #8]
   82ec6:	d3c7      	bcc.n	82e58 <_free_r+0x98>
   82ec8:	4b28      	ldr	r3, [pc, #160]	; (82f6c <_free_r+0x1ac>)
   82eca:	4640      	mov	r0, r8
   82ecc:	6819      	ldr	r1, [r3, #0]
   82ece:	f7ff ff29 	bl	82d24 <_malloc_trim_r>
   82ed2:	e7c1      	b.n	82e58 <_free_r+0x98>
   82ed4:	1819      	adds	r1, r3, r0
   82ed6:	6849      	ldr	r1, [r1, #4]
   82ed8:	07c9      	lsls	r1, r1, #31
   82eda:	d409      	bmi.n	82ef0 <_free_r+0x130>
   82edc:	68d9      	ldr	r1, [r3, #12]
   82ede:	4402      	add	r2, r0
   82ee0:	689b      	ldr	r3, [r3, #8]
   82ee2:	f042 0001 	orr.w	r0, r2, #1
   82ee6:	60d9      	str	r1, [r3, #12]
   82ee8:	608b      	str	r3, [r1, #8]
   82eea:	6068      	str	r0, [r5, #4]
   82eec:	50aa      	str	r2, [r5, r2]
   82eee:	e7b3      	b.n	82e58 <_free_r+0x98>
   82ef0:	f042 0301 	orr.w	r3, r2, #1
   82ef4:	606b      	str	r3, [r5, #4]
   82ef6:	50aa      	str	r2, [r5, r2]
   82ef8:	e7ae      	b.n	82e58 <_free_r+0x98>
   82efa:	2b14      	cmp	r3, #20
   82efc:	d814      	bhi.n	82f28 <_free_r+0x168>
   82efe:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   82f02:	0060      	lsls	r0, r4, #1
   82f04:	e7b5      	b.n	82e72 <_free_r+0xb2>
   82f06:	684a      	ldr	r2, [r1, #4]
   82f08:	10a4      	asrs	r4, r4, #2
   82f0a:	2001      	movs	r0, #1
   82f0c:	40a0      	lsls	r0, r4
   82f0e:	4302      	orrs	r2, r0
   82f10:	604a      	str	r2, [r1, #4]
   82f12:	461a      	mov	r2, r3
   82f14:	e7bc      	b.n	82e90 <_free_r+0xd0>
   82f16:	f042 0301 	orr.w	r3, r2, #1
   82f1a:	614d      	str	r5, [r1, #20]
   82f1c:	610d      	str	r5, [r1, #16]
   82f1e:	60ec      	str	r4, [r5, #12]
   82f20:	60ac      	str	r4, [r5, #8]
   82f22:	606b      	str	r3, [r5, #4]
   82f24:	50aa      	str	r2, [r5, r2]
   82f26:	e797      	b.n	82e58 <_free_r+0x98>
   82f28:	2b54      	cmp	r3, #84	; 0x54
   82f2a:	d804      	bhi.n	82f36 <_free_r+0x176>
   82f2c:	0b13      	lsrs	r3, r2, #12
   82f2e:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   82f32:	0060      	lsls	r0, r4, #1
   82f34:	e79d      	b.n	82e72 <_free_r+0xb2>
   82f36:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f3a:	d804      	bhi.n	82f46 <_free_r+0x186>
   82f3c:	0bd3      	lsrs	r3, r2, #15
   82f3e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   82f42:	0060      	lsls	r0, r4, #1
   82f44:	e795      	b.n	82e72 <_free_r+0xb2>
   82f46:	f240 5054 	movw	r0, #1364	; 0x554
   82f4a:	4283      	cmp	r3, r0
   82f4c:	d804      	bhi.n	82f58 <_free_r+0x198>
   82f4e:	0c93      	lsrs	r3, r2, #18
   82f50:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   82f54:	0060      	lsls	r0, r4, #1
   82f56:	e78c      	b.n	82e72 <_free_r+0xb2>
   82f58:	20fc      	movs	r0, #252	; 0xfc
   82f5a:	247e      	movs	r4, #126	; 0x7e
   82f5c:	e789      	b.n	82e72 <_free_r+0xb2>
   82f5e:	bf00      	nop
   82f60:	2007060c 	.word	0x2007060c
   82f64:	20070614 	.word	0x20070614
   82f68:	20070a14 	.word	0x20070a14
   82f6c:	20070c68 	.word	0x20070c68

00082f70 <malloc>:
   82f70:	4b02      	ldr	r3, [pc, #8]	; (82f7c <malloc+0xc>)
   82f72:	4601      	mov	r1, r0
   82f74:	6818      	ldr	r0, [r3, #0]
   82f76:	f000 b803 	b.w	82f80 <_malloc_r>
   82f7a:	bf00      	nop
   82f7c:	20070608 	.word	0x20070608

00082f80 <_malloc_r>:
   82f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f84:	f101 050b 	add.w	r5, r1, #11
   82f88:	2d16      	cmp	r5, #22
   82f8a:	b083      	sub	sp, #12
   82f8c:	4606      	mov	r6, r0
   82f8e:	d927      	bls.n	82fe0 <_malloc_r+0x60>
   82f90:	f035 0507 	bics.w	r5, r5, #7
   82f94:	f100 80b6 	bmi.w	83104 <_malloc_r+0x184>
   82f98:	42a9      	cmp	r1, r5
   82f9a:	f200 80b3 	bhi.w	83104 <_malloc_r+0x184>
   82f9e:	f000 fa75 	bl	8348c <__malloc_lock>
   82fa2:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   82fa6:	d222      	bcs.n	82fee <_malloc_r+0x6e>
   82fa8:	4fbc      	ldr	r7, [pc, #752]	; (8329c <_malloc_r+0x31c>)
   82faa:	08e8      	lsrs	r0, r5, #3
   82fac:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   82fb0:	68dc      	ldr	r4, [r3, #12]
   82fb2:	429c      	cmp	r4, r3
   82fb4:	f000 81bc 	beq.w	83330 <_malloc_r+0x3b0>
   82fb8:	6863      	ldr	r3, [r4, #4]
   82fba:	68e1      	ldr	r1, [r4, #12]
   82fbc:	f023 0303 	bic.w	r3, r3, #3
   82fc0:	4423      	add	r3, r4
   82fc2:	685a      	ldr	r2, [r3, #4]
   82fc4:	68a5      	ldr	r5, [r4, #8]
   82fc6:	f042 0201 	orr.w	r2, r2, #1
   82fca:	60e9      	str	r1, [r5, #12]
   82fcc:	4630      	mov	r0, r6
   82fce:	608d      	str	r5, [r1, #8]
   82fd0:	605a      	str	r2, [r3, #4]
   82fd2:	f000 fa5d 	bl	83490 <__malloc_unlock>
   82fd6:	3408      	adds	r4, #8
   82fd8:	4620      	mov	r0, r4
   82fda:	b003      	add	sp, #12
   82fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fe0:	2910      	cmp	r1, #16
   82fe2:	f200 808f 	bhi.w	83104 <_malloc_r+0x184>
   82fe6:	f000 fa51 	bl	8348c <__malloc_lock>
   82fea:	2510      	movs	r5, #16
   82fec:	e7dc      	b.n	82fa8 <_malloc_r+0x28>
   82fee:	0a68      	lsrs	r0, r5, #9
   82ff0:	f000 808f 	beq.w	83112 <_malloc_r+0x192>
   82ff4:	2804      	cmp	r0, #4
   82ff6:	f200 8147 	bhi.w	83288 <_malloc_r+0x308>
   82ffa:	09a8      	lsrs	r0, r5, #6
   82ffc:	3038      	adds	r0, #56	; 0x38
   82ffe:	0041      	lsls	r1, r0, #1
   83000:	4fa6      	ldr	r7, [pc, #664]	; (8329c <_malloc_r+0x31c>)
   83002:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   83006:	68cc      	ldr	r4, [r1, #12]
   83008:	42a1      	cmp	r1, r4
   8300a:	d106      	bne.n	8301a <_malloc_r+0x9a>
   8300c:	e00c      	b.n	83028 <_malloc_r+0xa8>
   8300e:	2a00      	cmp	r2, #0
   83010:	f280 8082 	bge.w	83118 <_malloc_r+0x198>
   83014:	68e4      	ldr	r4, [r4, #12]
   83016:	42a1      	cmp	r1, r4
   83018:	d006      	beq.n	83028 <_malloc_r+0xa8>
   8301a:	6863      	ldr	r3, [r4, #4]
   8301c:	f023 0303 	bic.w	r3, r3, #3
   83020:	1b5a      	subs	r2, r3, r5
   83022:	2a0f      	cmp	r2, #15
   83024:	ddf3      	ble.n	8300e <_malloc_r+0x8e>
   83026:	3801      	subs	r0, #1
   83028:	3001      	adds	r0, #1
   8302a:	499c      	ldr	r1, [pc, #624]	; (8329c <_malloc_r+0x31c>)
   8302c:	693c      	ldr	r4, [r7, #16]
   8302e:	f101 0e08 	add.w	lr, r1, #8
   83032:	4574      	cmp	r4, lr
   83034:	f000 8171 	beq.w	8331a <_malloc_r+0x39a>
   83038:	6863      	ldr	r3, [r4, #4]
   8303a:	f023 0303 	bic.w	r3, r3, #3
   8303e:	1b5a      	subs	r2, r3, r5
   83040:	2a0f      	cmp	r2, #15
   83042:	f300 8157 	bgt.w	832f4 <_malloc_r+0x374>
   83046:	2a00      	cmp	r2, #0
   83048:	f8c1 e014 	str.w	lr, [r1, #20]
   8304c:	f8c1 e010 	str.w	lr, [r1, #16]
   83050:	da66      	bge.n	83120 <_malloc_r+0x1a0>
   83052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83056:	f080 812d 	bcs.w	832b4 <_malloc_r+0x334>
   8305a:	08db      	lsrs	r3, r3, #3
   8305c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   83060:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83064:	684a      	ldr	r2, [r1, #4]
   83066:	2301      	movs	r3, #1
   83068:	fa03 f30c 	lsl.w	r3, r3, ip
   8306c:	f8d8 c008 	ldr.w	ip, [r8, #8]
   83070:	4313      	orrs	r3, r2
   83072:	f8c4 c008 	str.w	ip, [r4, #8]
   83076:	f8c4 800c 	str.w	r8, [r4, #12]
   8307a:	604b      	str	r3, [r1, #4]
   8307c:	f8c8 4008 	str.w	r4, [r8, #8]
   83080:	f8cc 400c 	str.w	r4, [ip, #12]
   83084:	1082      	asrs	r2, r0, #2
   83086:	2401      	movs	r4, #1
   83088:	4094      	lsls	r4, r2
   8308a:	429c      	cmp	r4, r3
   8308c:	d855      	bhi.n	8313a <_malloc_r+0x1ba>
   8308e:	4223      	tst	r3, r4
   83090:	d106      	bne.n	830a0 <_malloc_r+0x120>
   83092:	f020 0003 	bic.w	r0, r0, #3
   83096:	0064      	lsls	r4, r4, #1
   83098:	4223      	tst	r3, r4
   8309a:	f100 0004 	add.w	r0, r0, #4
   8309e:	d0fa      	beq.n	83096 <_malloc_r+0x116>
   830a0:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   830a4:	46c4      	mov	ip, r8
   830a6:	4681      	mov	r9, r0
   830a8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   830ac:	459c      	cmp	ip, r3
   830ae:	d107      	bne.n	830c0 <_malloc_r+0x140>
   830b0:	e135      	b.n	8331e <_malloc_r+0x39e>
   830b2:	2900      	cmp	r1, #0
   830b4:	f280 8145 	bge.w	83342 <_malloc_r+0x3c2>
   830b8:	68db      	ldr	r3, [r3, #12]
   830ba:	459c      	cmp	ip, r3
   830bc:	f000 812f 	beq.w	8331e <_malloc_r+0x39e>
   830c0:	685a      	ldr	r2, [r3, #4]
   830c2:	f022 0203 	bic.w	r2, r2, #3
   830c6:	1b51      	subs	r1, r2, r5
   830c8:	290f      	cmp	r1, #15
   830ca:	ddf2      	ble.n	830b2 <_malloc_r+0x132>
   830cc:	461c      	mov	r4, r3
   830ce:	68da      	ldr	r2, [r3, #12]
   830d0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   830d4:	f045 0901 	orr.w	r9, r5, #1
   830d8:	f041 0801 	orr.w	r8, r1, #1
   830dc:	441d      	add	r5, r3
   830de:	f8c3 9004 	str.w	r9, [r3, #4]
   830e2:	4630      	mov	r0, r6
   830e4:	f8cc 200c 	str.w	r2, [ip, #12]
   830e8:	f8c2 c008 	str.w	ip, [r2, #8]
   830ec:	617d      	str	r5, [r7, #20]
   830ee:	613d      	str	r5, [r7, #16]
   830f0:	f8c5 e00c 	str.w	lr, [r5, #12]
   830f4:	f8c5 e008 	str.w	lr, [r5, #8]
   830f8:	f8c5 8004 	str.w	r8, [r5, #4]
   830fc:	5069      	str	r1, [r5, r1]
   830fe:	f000 f9c7 	bl	83490 <__malloc_unlock>
   83102:	e769      	b.n	82fd8 <_malloc_r+0x58>
   83104:	2400      	movs	r4, #0
   83106:	4620      	mov	r0, r4
   83108:	230c      	movs	r3, #12
   8310a:	6033      	str	r3, [r6, #0]
   8310c:	b003      	add	sp, #12
   8310e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83112:	217e      	movs	r1, #126	; 0x7e
   83114:	203f      	movs	r0, #63	; 0x3f
   83116:	e773      	b.n	83000 <_malloc_r+0x80>
   83118:	4423      	add	r3, r4
   8311a:	685a      	ldr	r2, [r3, #4]
   8311c:	68e1      	ldr	r1, [r4, #12]
   8311e:	e751      	b.n	82fc4 <_malloc_r+0x44>
   83120:	4423      	add	r3, r4
   83122:	685a      	ldr	r2, [r3, #4]
   83124:	4630      	mov	r0, r6
   83126:	f042 0201 	orr.w	r2, r2, #1
   8312a:	605a      	str	r2, [r3, #4]
   8312c:	3408      	adds	r4, #8
   8312e:	f000 f9af 	bl	83490 <__malloc_unlock>
   83132:	4620      	mov	r0, r4
   83134:	b003      	add	sp, #12
   83136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8313a:	68bc      	ldr	r4, [r7, #8]
   8313c:	6863      	ldr	r3, [r4, #4]
   8313e:	f023 0803 	bic.w	r8, r3, #3
   83142:	4545      	cmp	r5, r8
   83144:	d804      	bhi.n	83150 <_malloc_r+0x1d0>
   83146:	ebc5 0308 	rsb	r3, r5, r8
   8314a:	2b0f      	cmp	r3, #15
   8314c:	f300 808c 	bgt.w	83268 <_malloc_r+0x2e8>
   83150:	4b53      	ldr	r3, [pc, #332]	; (832a0 <_malloc_r+0x320>)
   83152:	f8df a15c 	ldr.w	sl, [pc, #348]	; 832b0 <_malloc_r+0x330>
   83156:	681a      	ldr	r2, [r3, #0]
   83158:	f8da 3000 	ldr.w	r3, [sl]
   8315c:	442a      	add	r2, r5
   8315e:	3301      	adds	r3, #1
   83160:	eb04 0b08 	add.w	fp, r4, r8
   83164:	f000 8151 	beq.w	8340a <_malloc_r+0x48a>
   83168:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   8316c:	320f      	adds	r2, #15
   8316e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   83172:	f022 020f 	bic.w	r2, r2, #15
   83176:	4611      	mov	r1, r2
   83178:	4630      	mov	r0, r6
   8317a:	9201      	str	r2, [sp, #4]
   8317c:	f000 f98a 	bl	83494 <_sbrk_r>
   83180:	f1b0 3fff 	cmp.w	r0, #4294967295
   83184:	4681      	mov	r9, r0
   83186:	9a01      	ldr	r2, [sp, #4]
   83188:	f000 8148 	beq.w	8341c <_malloc_r+0x49c>
   8318c:	4583      	cmp	fp, r0
   8318e:	f200 80ef 	bhi.w	83370 <_malloc_r+0x3f0>
   83192:	4b44      	ldr	r3, [pc, #272]	; (832a4 <_malloc_r+0x324>)
   83194:	45cb      	cmp	fp, r9
   83196:	6819      	ldr	r1, [r3, #0]
   83198:	4411      	add	r1, r2
   8319a:	6019      	str	r1, [r3, #0]
   8319c:	f000 8143 	beq.w	83426 <_malloc_r+0x4a6>
   831a0:	f8da 0000 	ldr.w	r0, [sl]
   831a4:	f8df e108 	ldr.w	lr, [pc, #264]	; 832b0 <_malloc_r+0x330>
   831a8:	3001      	adds	r0, #1
   831aa:	bf1b      	ittet	ne
   831ac:	ebcb 0b09 	rsbne	fp, fp, r9
   831b0:	4459      	addne	r1, fp
   831b2:	f8ce 9000 	streq.w	r9, [lr]
   831b6:	6019      	strne	r1, [r3, #0]
   831b8:	f019 0107 	ands.w	r1, r9, #7
   831bc:	f000 8108 	beq.w	833d0 <_malloc_r+0x450>
   831c0:	f1c1 0008 	rsb	r0, r1, #8
   831c4:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   831c8:	4481      	add	r9, r0
   831ca:	3108      	adds	r1, #8
   831cc:	444a      	add	r2, r9
   831ce:	f3c2 020b 	ubfx	r2, r2, #0, #12
   831d2:	ebc2 0a01 	rsb	sl, r2, r1
   831d6:	4651      	mov	r1, sl
   831d8:	4630      	mov	r0, r6
   831da:	9301      	str	r3, [sp, #4]
   831dc:	f000 f95a 	bl	83494 <_sbrk_r>
   831e0:	1c43      	adds	r3, r0, #1
   831e2:	9b01      	ldr	r3, [sp, #4]
   831e4:	f000 812d 	beq.w	83442 <_malloc_r+0x4c2>
   831e8:	ebc9 0200 	rsb	r2, r9, r0
   831ec:	4452      	add	r2, sl
   831ee:	f042 0201 	orr.w	r2, r2, #1
   831f2:	6819      	ldr	r1, [r3, #0]
   831f4:	42bc      	cmp	r4, r7
   831f6:	4451      	add	r1, sl
   831f8:	f8c7 9008 	str.w	r9, [r7, #8]
   831fc:	6019      	str	r1, [r3, #0]
   831fe:	f8c9 2004 	str.w	r2, [r9, #4]
   83202:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 832a4 <_malloc_r+0x324>
   83206:	d016      	beq.n	83236 <_malloc_r+0x2b6>
   83208:	f1b8 0f0f 	cmp.w	r8, #15
   8320c:	f240 80ef 	bls.w	833ee <_malloc_r+0x46e>
   83210:	6862      	ldr	r2, [r4, #4]
   83212:	f1a8 030c 	sub.w	r3, r8, #12
   83216:	f023 0307 	bic.w	r3, r3, #7
   8321a:	f002 0201 	and.w	r2, r2, #1
   8321e:	18e0      	adds	r0, r4, r3
   83220:	f04f 0e05 	mov.w	lr, #5
   83224:	431a      	orrs	r2, r3
   83226:	2b0f      	cmp	r3, #15
   83228:	6062      	str	r2, [r4, #4]
   8322a:	f8c0 e004 	str.w	lr, [r0, #4]
   8322e:	f8c0 e008 	str.w	lr, [r0, #8]
   83232:	f200 810a 	bhi.w	8344a <_malloc_r+0x4ca>
   83236:	4b1c      	ldr	r3, [pc, #112]	; (832a8 <_malloc_r+0x328>)
   83238:	68bc      	ldr	r4, [r7, #8]
   8323a:	681a      	ldr	r2, [r3, #0]
   8323c:	4291      	cmp	r1, r2
   8323e:	bf88      	it	hi
   83240:	6019      	strhi	r1, [r3, #0]
   83242:	4b1a      	ldr	r3, [pc, #104]	; (832ac <_malloc_r+0x32c>)
   83244:	681a      	ldr	r2, [r3, #0]
   83246:	4291      	cmp	r1, r2
   83248:	6862      	ldr	r2, [r4, #4]
   8324a:	bf88      	it	hi
   8324c:	6019      	strhi	r1, [r3, #0]
   8324e:	f022 0203 	bic.w	r2, r2, #3
   83252:	4295      	cmp	r5, r2
   83254:	eba2 0305 	sub.w	r3, r2, r5
   83258:	d801      	bhi.n	8325e <_malloc_r+0x2de>
   8325a:	2b0f      	cmp	r3, #15
   8325c:	dc04      	bgt.n	83268 <_malloc_r+0x2e8>
   8325e:	4630      	mov	r0, r6
   83260:	f000 f916 	bl	83490 <__malloc_unlock>
   83264:	2400      	movs	r4, #0
   83266:	e6b7      	b.n	82fd8 <_malloc_r+0x58>
   83268:	f045 0201 	orr.w	r2, r5, #1
   8326c:	f043 0301 	orr.w	r3, r3, #1
   83270:	4425      	add	r5, r4
   83272:	6062      	str	r2, [r4, #4]
   83274:	4630      	mov	r0, r6
   83276:	60bd      	str	r5, [r7, #8]
   83278:	3408      	adds	r4, #8
   8327a:	606b      	str	r3, [r5, #4]
   8327c:	f000 f908 	bl	83490 <__malloc_unlock>
   83280:	4620      	mov	r0, r4
   83282:	b003      	add	sp, #12
   83284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83288:	2814      	cmp	r0, #20
   8328a:	d969      	bls.n	83360 <_malloc_r+0x3e0>
   8328c:	2854      	cmp	r0, #84	; 0x54
   8328e:	f200 8098 	bhi.w	833c2 <_malloc_r+0x442>
   83292:	0b28      	lsrs	r0, r5, #12
   83294:	306e      	adds	r0, #110	; 0x6e
   83296:	0041      	lsls	r1, r0, #1
   83298:	e6b2      	b.n	83000 <_malloc_r+0x80>
   8329a:	bf00      	nop
   8329c:	2007060c 	.word	0x2007060c
   832a0:	20070c68 	.word	0x20070c68
   832a4:	20070c6c 	.word	0x20070c6c
   832a8:	20070c64 	.word	0x20070c64
   832ac:	20070c60 	.word	0x20070c60
   832b0:	20070a18 	.word	0x20070a18
   832b4:	0a5a      	lsrs	r2, r3, #9
   832b6:	2a04      	cmp	r2, #4
   832b8:	d955      	bls.n	83366 <_malloc_r+0x3e6>
   832ba:	2a14      	cmp	r2, #20
   832bc:	f200 80a7 	bhi.w	8340e <_malloc_r+0x48e>
   832c0:	325b      	adds	r2, #91	; 0x5b
   832c2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   832c6:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   832ca:	f8dc 1008 	ldr.w	r1, [ip, #8]
   832ce:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 83488 <_malloc_r+0x508>
   832d2:	4561      	cmp	r1, ip
   832d4:	d07f      	beq.n	833d6 <_malloc_r+0x456>
   832d6:	684a      	ldr	r2, [r1, #4]
   832d8:	f022 0203 	bic.w	r2, r2, #3
   832dc:	4293      	cmp	r3, r2
   832de:	d202      	bcs.n	832e6 <_malloc_r+0x366>
   832e0:	6889      	ldr	r1, [r1, #8]
   832e2:	458c      	cmp	ip, r1
   832e4:	d1f7      	bne.n	832d6 <_malloc_r+0x356>
   832e6:	68ca      	ldr	r2, [r1, #12]
   832e8:	687b      	ldr	r3, [r7, #4]
   832ea:	60e2      	str	r2, [r4, #12]
   832ec:	60a1      	str	r1, [r4, #8]
   832ee:	6094      	str	r4, [r2, #8]
   832f0:	60cc      	str	r4, [r1, #12]
   832f2:	e6c7      	b.n	83084 <_malloc_r+0x104>
   832f4:	f045 0701 	orr.w	r7, r5, #1
   832f8:	f042 0301 	orr.w	r3, r2, #1
   832fc:	4425      	add	r5, r4
   832fe:	6067      	str	r7, [r4, #4]
   83300:	4630      	mov	r0, r6
   83302:	614d      	str	r5, [r1, #20]
   83304:	610d      	str	r5, [r1, #16]
   83306:	f8c5 e00c 	str.w	lr, [r5, #12]
   8330a:	f8c5 e008 	str.w	lr, [r5, #8]
   8330e:	606b      	str	r3, [r5, #4]
   83310:	50aa      	str	r2, [r5, r2]
   83312:	3408      	adds	r4, #8
   83314:	f000 f8bc 	bl	83490 <__malloc_unlock>
   83318:	e65e      	b.n	82fd8 <_malloc_r+0x58>
   8331a:	684b      	ldr	r3, [r1, #4]
   8331c:	e6b2      	b.n	83084 <_malloc_r+0x104>
   8331e:	f109 0901 	add.w	r9, r9, #1
   83322:	f019 0f03 	tst.w	r9, #3
   83326:	f10c 0c08 	add.w	ip, ip, #8
   8332a:	f47f aebd 	bne.w	830a8 <_malloc_r+0x128>
   8332e:	e02c      	b.n	8338a <_malloc_r+0x40a>
   83330:	f104 0308 	add.w	r3, r4, #8
   83334:	6964      	ldr	r4, [r4, #20]
   83336:	42a3      	cmp	r3, r4
   83338:	bf08      	it	eq
   8333a:	3002      	addeq	r0, #2
   8333c:	f43f ae75 	beq.w	8302a <_malloc_r+0xaa>
   83340:	e63a      	b.n	82fb8 <_malloc_r+0x38>
   83342:	461c      	mov	r4, r3
   83344:	441a      	add	r2, r3
   83346:	6851      	ldr	r1, [r2, #4]
   83348:	68db      	ldr	r3, [r3, #12]
   8334a:	f854 5f08 	ldr.w	r5, [r4, #8]!
   8334e:	f041 0101 	orr.w	r1, r1, #1
   83352:	6051      	str	r1, [r2, #4]
   83354:	4630      	mov	r0, r6
   83356:	60eb      	str	r3, [r5, #12]
   83358:	609d      	str	r5, [r3, #8]
   8335a:	f000 f899 	bl	83490 <__malloc_unlock>
   8335e:	e63b      	b.n	82fd8 <_malloc_r+0x58>
   83360:	305b      	adds	r0, #91	; 0x5b
   83362:	0041      	lsls	r1, r0, #1
   83364:	e64c      	b.n	83000 <_malloc_r+0x80>
   83366:	099a      	lsrs	r2, r3, #6
   83368:	3238      	adds	r2, #56	; 0x38
   8336a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8336e:	e7aa      	b.n	832c6 <_malloc_r+0x346>
   83370:	42bc      	cmp	r4, r7
   83372:	4b45      	ldr	r3, [pc, #276]	; (83488 <_malloc_r+0x508>)
   83374:	f43f af0d 	beq.w	83192 <_malloc_r+0x212>
   83378:	689c      	ldr	r4, [r3, #8]
   8337a:	6862      	ldr	r2, [r4, #4]
   8337c:	f022 0203 	bic.w	r2, r2, #3
   83380:	e767      	b.n	83252 <_malloc_r+0x2d2>
   83382:	f8d8 8000 	ldr.w	r8, [r8]
   83386:	4598      	cmp	r8, r3
   83388:	d17c      	bne.n	83484 <_malloc_r+0x504>
   8338a:	f010 0f03 	tst.w	r0, #3
   8338e:	f1a8 0308 	sub.w	r3, r8, #8
   83392:	f100 30ff 	add.w	r0, r0, #4294967295
   83396:	d1f4      	bne.n	83382 <_malloc_r+0x402>
   83398:	687b      	ldr	r3, [r7, #4]
   8339a:	ea23 0304 	bic.w	r3, r3, r4
   8339e:	607b      	str	r3, [r7, #4]
   833a0:	0064      	lsls	r4, r4, #1
   833a2:	429c      	cmp	r4, r3
   833a4:	f63f aec9 	bhi.w	8313a <_malloc_r+0x1ba>
   833a8:	2c00      	cmp	r4, #0
   833aa:	f43f aec6 	beq.w	8313a <_malloc_r+0x1ba>
   833ae:	4223      	tst	r3, r4
   833b0:	4648      	mov	r0, r9
   833b2:	f47f ae75 	bne.w	830a0 <_malloc_r+0x120>
   833b6:	0064      	lsls	r4, r4, #1
   833b8:	4223      	tst	r3, r4
   833ba:	f100 0004 	add.w	r0, r0, #4
   833be:	d0fa      	beq.n	833b6 <_malloc_r+0x436>
   833c0:	e66e      	b.n	830a0 <_malloc_r+0x120>
   833c2:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   833c6:	d818      	bhi.n	833fa <_malloc_r+0x47a>
   833c8:	0be8      	lsrs	r0, r5, #15
   833ca:	3077      	adds	r0, #119	; 0x77
   833cc:	0041      	lsls	r1, r0, #1
   833ce:	e617      	b.n	83000 <_malloc_r+0x80>
   833d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   833d4:	e6fa      	b.n	831cc <_malloc_r+0x24c>
   833d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   833da:	1092      	asrs	r2, r2, #2
   833dc:	f04f 0c01 	mov.w	ip, #1
   833e0:	fa0c f202 	lsl.w	r2, ip, r2
   833e4:	4313      	orrs	r3, r2
   833e6:	f8c8 3004 	str.w	r3, [r8, #4]
   833ea:	460a      	mov	r2, r1
   833ec:	e77d      	b.n	832ea <_malloc_r+0x36a>
   833ee:	2301      	movs	r3, #1
   833f0:	f8c9 3004 	str.w	r3, [r9, #4]
   833f4:	464c      	mov	r4, r9
   833f6:	2200      	movs	r2, #0
   833f8:	e72b      	b.n	83252 <_malloc_r+0x2d2>
   833fa:	f240 5354 	movw	r3, #1364	; 0x554
   833fe:	4298      	cmp	r0, r3
   83400:	d81c      	bhi.n	8343c <_malloc_r+0x4bc>
   83402:	0ca8      	lsrs	r0, r5, #18
   83404:	307c      	adds	r0, #124	; 0x7c
   83406:	0041      	lsls	r1, r0, #1
   83408:	e5fa      	b.n	83000 <_malloc_r+0x80>
   8340a:	3210      	adds	r2, #16
   8340c:	e6b3      	b.n	83176 <_malloc_r+0x1f6>
   8340e:	2a54      	cmp	r2, #84	; 0x54
   83410:	d823      	bhi.n	8345a <_malloc_r+0x4da>
   83412:	0b1a      	lsrs	r2, r3, #12
   83414:	326e      	adds	r2, #110	; 0x6e
   83416:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8341a:	e754      	b.n	832c6 <_malloc_r+0x346>
   8341c:	68bc      	ldr	r4, [r7, #8]
   8341e:	6862      	ldr	r2, [r4, #4]
   83420:	f022 0203 	bic.w	r2, r2, #3
   83424:	e715      	b.n	83252 <_malloc_r+0x2d2>
   83426:	f3cb 000b 	ubfx	r0, fp, #0, #12
   8342a:	2800      	cmp	r0, #0
   8342c:	f47f aeb8 	bne.w	831a0 <_malloc_r+0x220>
   83430:	4442      	add	r2, r8
   83432:	68bb      	ldr	r3, [r7, #8]
   83434:	f042 0201 	orr.w	r2, r2, #1
   83438:	605a      	str	r2, [r3, #4]
   8343a:	e6fc      	b.n	83236 <_malloc_r+0x2b6>
   8343c:	21fc      	movs	r1, #252	; 0xfc
   8343e:	207e      	movs	r0, #126	; 0x7e
   83440:	e5de      	b.n	83000 <_malloc_r+0x80>
   83442:	2201      	movs	r2, #1
   83444:	f04f 0a00 	mov.w	sl, #0
   83448:	e6d3      	b.n	831f2 <_malloc_r+0x272>
   8344a:	f104 0108 	add.w	r1, r4, #8
   8344e:	4630      	mov	r0, r6
   83450:	f7ff fcb6 	bl	82dc0 <_free_r>
   83454:	f8da 1000 	ldr.w	r1, [sl]
   83458:	e6ed      	b.n	83236 <_malloc_r+0x2b6>
   8345a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8345e:	d804      	bhi.n	8346a <_malloc_r+0x4ea>
   83460:	0bda      	lsrs	r2, r3, #15
   83462:	3277      	adds	r2, #119	; 0x77
   83464:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   83468:	e72d      	b.n	832c6 <_malloc_r+0x346>
   8346a:	f240 5154 	movw	r1, #1364	; 0x554
   8346e:	428a      	cmp	r2, r1
   83470:	d804      	bhi.n	8347c <_malloc_r+0x4fc>
   83472:	0c9a      	lsrs	r2, r3, #18
   83474:	327c      	adds	r2, #124	; 0x7c
   83476:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   8347a:	e724      	b.n	832c6 <_malloc_r+0x346>
   8347c:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   83480:	227e      	movs	r2, #126	; 0x7e
   83482:	e720      	b.n	832c6 <_malloc_r+0x346>
   83484:	687b      	ldr	r3, [r7, #4]
   83486:	e78b      	b.n	833a0 <_malloc_r+0x420>
   83488:	2007060c 	.word	0x2007060c

0008348c <__malloc_lock>:
   8348c:	4770      	bx	lr
   8348e:	bf00      	nop

00083490 <__malloc_unlock>:
   83490:	4770      	bx	lr
   83492:	bf00      	nop

00083494 <_sbrk_r>:
   83494:	b538      	push	{r3, r4, r5, lr}
   83496:	4c07      	ldr	r4, [pc, #28]	; (834b4 <_sbrk_r+0x20>)
   83498:	2300      	movs	r3, #0
   8349a:	4605      	mov	r5, r0
   8349c:	4608      	mov	r0, r1
   8349e:	6023      	str	r3, [r4, #0]
   834a0:	f7ff fb2e 	bl	82b00 <_sbrk>
   834a4:	1c43      	adds	r3, r0, #1
   834a6:	d000      	beq.n	834aa <_sbrk_r+0x16>
   834a8:	bd38      	pop	{r3, r4, r5, pc}
   834aa:	6823      	ldr	r3, [r4, #0]
   834ac:	2b00      	cmp	r3, #0
   834ae:	d0fb      	beq.n	834a8 <_sbrk_r+0x14>
   834b0:	602b      	str	r3, [r5, #0]
   834b2:	bd38      	pop	{r3, r4, r5, pc}
   834b4:	20070cb4 	.word	0x20070cb4

000834b8 <__register_exitproc>:
   834b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   834bc:	4c25      	ldr	r4, [pc, #148]	; (83554 <__register_exitproc+0x9c>)
   834be:	4606      	mov	r6, r0
   834c0:	6825      	ldr	r5, [r4, #0]
   834c2:	4688      	mov	r8, r1
   834c4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   834c8:	4692      	mov	sl, r2
   834ca:	4699      	mov	r9, r3
   834cc:	b3c4      	cbz	r4, 83540 <__register_exitproc+0x88>
   834ce:	6860      	ldr	r0, [r4, #4]
   834d0:	281f      	cmp	r0, #31
   834d2:	dc17      	bgt.n	83504 <__register_exitproc+0x4c>
   834d4:	1c41      	adds	r1, r0, #1
   834d6:	b176      	cbz	r6, 834f6 <__register_exitproc+0x3e>
   834d8:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   834dc:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   834e0:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   834e4:	2201      	movs	r2, #1
   834e6:	4082      	lsls	r2, r0
   834e8:	4315      	orrs	r5, r2
   834ea:	2e02      	cmp	r6, #2
   834ec:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   834f0:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   834f4:	d01e      	beq.n	83534 <__register_exitproc+0x7c>
   834f6:	1c83      	adds	r3, r0, #2
   834f8:	6061      	str	r1, [r4, #4]
   834fa:	2000      	movs	r0, #0
   834fc:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   83500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83504:	4b14      	ldr	r3, [pc, #80]	; (83558 <__register_exitproc+0xa0>)
   83506:	b303      	cbz	r3, 8354a <__register_exitproc+0x92>
   83508:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8350c:	f7ff fd30 	bl	82f70 <malloc>
   83510:	4604      	mov	r4, r0
   83512:	b1d0      	cbz	r0, 8354a <__register_exitproc+0x92>
   83514:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   83518:	2700      	movs	r7, #0
   8351a:	e884 0088 	stmia.w	r4, {r3, r7}
   8351e:	4638      	mov	r0, r7
   83520:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83524:	2101      	movs	r1, #1
   83526:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8352a:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8352e:	2e00      	cmp	r6, #0
   83530:	d0e1      	beq.n	834f6 <__register_exitproc+0x3e>
   83532:	e7d1      	b.n	834d8 <__register_exitproc+0x20>
   83534:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   83538:	431a      	orrs	r2, r3
   8353a:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8353e:	e7da      	b.n	834f6 <__register_exitproc+0x3e>
   83540:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   83544:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   83548:	e7c1      	b.n	834ce <__register_exitproc+0x16>
   8354a:	f04f 30ff 	mov.w	r0, #4294967295
   8354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83552:	bf00      	nop
   83554:	000835cc 	.word	0x000835cc
   83558:	00082f71 	.word	0x00082f71

0008355c <can_bit_time>:
   8355c:	02020308 02094b03 43020303 0303030a     .....K.....C....
   8356c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   8357c:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   8358c:	05050510 06114504 47040505 06060512     .....E.....G....
   8359c:	06134304 44040606 06060714 08154604     .C.....D.....F..
   835ac:	47040606 07070716 08174404 46040708     ...G.....D.....F
   835bc:	08080718 08194304 44040808 00000043     .....C.....DC...

000835cc <_global_impure_ptr>:
   835cc:	200701e0                                ... 

000835d0 <_init>:
   835d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835d2:	bf00      	nop
   835d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   835d6:	bc08      	pop	{r3}
   835d8:	469e      	mov	lr, r3
   835da:	4770      	bx	lr

000835dc <__init_array_start>:
   835dc:	00082cd9 	.word	0x00082cd9

000835e0 <__frame_dummy_init_array_entry>:
   835e0:	00080119                                ....

000835e4 <_fini>:
   835e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   835e6:	bf00      	nop
   835e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   835ea:	bc08      	pop	{r3}
   835ec:	469e      	mov	lr, r3
   835ee:	4770      	bx	lr

000835f0 <__fini_array_start>:
   835f0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	200701dc 	.word	0x200701dc

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <udi_api_cdc_data>:
20070138:	00080515 000803d9 00080161 00080165     ........a...e...
20070148:	000803c9                                ....

2007014c <udi_api_cdc_comm>:
2007014c:	000801f1 00080151 00080169 00080165     ....Q...i...e...
2007015c:	00000000                                ....

20070160 <udc_config>:
20070160:	2007017c 20070174 00000000              |.. t.. ....

2007016c <udi_apis>:
2007016c:	2007014c 20070138                       L.. 8.. 

20070174 <udc_config_fs>:
20070174:	20070190 2007016c                       ... l.. 

2007017c <udc_device_desc>:
2007017c:	02000112 40000002 240403eb 00000100     .......@...$....
2007018c:	00000100                                ....

20070190 <udc_desc_fs>:
20070190:	00430209 c0000102 00040932 02020100     ..C.....2.......
200701a0:	24050001 04011000 05020224 01000624     ...$....$...$...
200701b0:	03012405 83050701 10004003 00010409     .$.......@......
200701c0:	00000a02 81050700 00004002 02020507     .........@......
200701d0:	00000040                                @...

200701d4 <udc_string_desc_languageid>:
200701d4:	04090304                                ....

200701d8 <g_interrupt_enabled>:
200701d8:	00000001                                ....

200701dc <SystemCoreClock>:
200701dc:	003d0900                                ..=.

200701e0 <impure_data>:
200701e0:	00000000 200704cc 20070534 2007059c     ....... 4.. ... 
	...
20070214:	000835c8 00000000 00000000 00000000     .5..............
	...
20070288:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070298:	0005deec 0000000b 00000000 00000000     ................
	...

20070608 <_impure_ptr>:
20070608:	200701e0                                ... 

2007060c <__malloc_av_>:
	...
20070614:	2007060c 2007060c 20070614 20070614     ... ... ... ... 
20070624:	2007061c 2007061c 20070624 20070624     ... ... $.. $.. 
20070634:	2007062c 2007062c 20070634 20070634     ,.. ,.. 4.. 4.. 
20070644:	2007063c 2007063c 20070644 20070644     <.. <.. D.. D.. 
20070654:	2007064c 2007064c 20070654 20070654     L.. L.. T.. T.. 
20070664:	2007065c 2007065c 20070664 20070664     \.. \.. d.. d.. 
20070674:	2007066c 2007066c 20070674 20070674     l.. l.. t.. t.. 
20070684:	2007067c 2007067c 20070684 20070684     |.. |.. ... ... 
20070694:	2007068c 2007068c 20070694 20070694     ... ... ... ... 
200706a4:	2007069c 2007069c 200706a4 200706a4     ... ... ... ... 
200706b4:	200706ac 200706ac 200706b4 200706b4     ... ... ... ... 
200706c4:	200706bc 200706bc 200706c4 200706c4     ... ... ... ... 
200706d4:	200706cc 200706cc 200706d4 200706d4     ... ... ... ... 
200706e4:	200706dc 200706dc 200706e4 200706e4     ... ... ... ... 
200706f4:	200706ec 200706ec 200706f4 200706f4     ... ... ... ... 
20070704:	200706fc 200706fc 20070704 20070704     ... ... ... ... 
20070714:	2007070c 2007070c 20070714 20070714     ... ... ... ... 
20070724:	2007071c 2007071c 20070724 20070724     ... ... $.. $.. 
20070734:	2007072c 2007072c 20070734 20070734     ,.. ,.. 4.. 4.. 
20070744:	2007073c 2007073c 20070744 20070744     <.. <.. D.. D.. 
20070754:	2007074c 2007074c 20070754 20070754     L.. L.. T.. T.. 
20070764:	2007075c 2007075c 20070764 20070764     \.. \.. d.. d.. 
20070774:	2007076c 2007076c 20070774 20070774     l.. l.. t.. t.. 
20070784:	2007077c 2007077c 20070784 20070784     |.. |.. ... ... 
20070794:	2007078c 2007078c 20070794 20070794     ... ... ... ... 
200707a4:	2007079c 2007079c 200707a4 200707a4     ... ... ... ... 
200707b4:	200707ac 200707ac 200707b4 200707b4     ... ... ... ... 
200707c4:	200707bc 200707bc 200707c4 200707c4     ... ... ... ... 
200707d4:	200707cc 200707cc 200707d4 200707d4     ... ... ... ... 
200707e4:	200707dc 200707dc 200707e4 200707e4     ... ... ... ... 
200707f4:	200707ec 200707ec 200707f4 200707f4     ... ... ... ... 
20070804:	200707fc 200707fc 20070804 20070804     ... ... ... ... 
20070814:	2007080c 2007080c 20070814 20070814     ... ... ... ... 
20070824:	2007081c 2007081c 20070824 20070824     ... ... $.. $.. 
20070834:	2007082c 2007082c 20070834 20070834     ,.. ,.. 4.. 4.. 
20070844:	2007083c 2007083c 20070844 20070844     <.. <.. D.. D.. 
20070854:	2007084c 2007084c 20070854 20070854     L.. L.. T.. T.. 
20070864:	2007085c 2007085c 20070864 20070864     \.. \.. d.. d.. 
20070874:	2007086c 2007086c 20070874 20070874     l.. l.. t.. t.. 
20070884:	2007087c 2007087c 20070884 20070884     |.. |.. ... ... 
20070894:	2007088c 2007088c 20070894 20070894     ... ... ... ... 
200708a4:	2007089c 2007089c 200708a4 200708a4     ... ... ... ... 
200708b4:	200708ac 200708ac 200708b4 200708b4     ... ... ... ... 
200708c4:	200708bc 200708bc 200708c4 200708c4     ... ... ... ... 
200708d4:	200708cc 200708cc 200708d4 200708d4     ... ... ... ... 
200708e4:	200708dc 200708dc 200708e4 200708e4     ... ... ... ... 
200708f4:	200708ec 200708ec 200708f4 200708f4     ... ... ... ... 
20070904:	200708fc 200708fc 20070904 20070904     ... ... ... ... 
20070914:	2007090c 2007090c 20070914 20070914     ... ... ... ... 
20070924:	2007091c 2007091c 20070924 20070924     ... ... $.. $.. 
20070934:	2007092c 2007092c 20070934 20070934     ,.. ,.. 4.. 4.. 
20070944:	2007093c 2007093c 20070944 20070944     <.. <.. D.. D.. 
20070954:	2007094c 2007094c 20070954 20070954     L.. L.. T.. T.. 
20070964:	2007095c 2007095c 20070964 20070964     \.. \.. d.. d.. 
20070974:	2007096c 2007096c 20070974 20070974     l.. l.. t.. t.. 
20070984:	2007097c 2007097c 20070984 20070984     |.. |.. ... ... 
20070994:	2007098c 2007098c 20070994 20070994     ... ... ... ... 
200709a4:	2007099c 2007099c 200709a4 200709a4     ... ... ... ... 
200709b4:	200709ac 200709ac 200709b4 200709b4     ... ... ... ... 
200709c4:	200709bc 200709bc 200709c4 200709c4     ... ... ... ... 
200709d4:	200709cc 200709cc 200709d4 200709d4     ... ... ... ... 
200709e4:	200709dc 200709dc 200709e4 200709e4     ... ... ... ... 
200709f4:	200709ec 200709ec 200709f4 200709f4     ... ... ... ... 
20070a04:	200709fc 200709fc 20070a04 20070a04     ... ... ... ... 

20070a14 <__malloc_trim_threshold>:
20070a14:	00020000                                ....

20070a18 <__malloc_sbrk_base>:
20070a18:	ffffffff                                ....
