
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  0008076c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000008c  20070558  00080cc4  00010558  2**2
                  ALLOC
  3 .stack        00002004  200705e4  00080d50  00010558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY
  6 .debug_info   000048df  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d75  00000000  00000000  00014ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001ee2  00000000  00000000  00015c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000460  00000000  00000000  00017b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003e0  00000000  00000000  00017f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00002cf9  00000000  00000000  00018352  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00005fa5  00000000  00000000  0001b04b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00057663  00000000  00000000  00020ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a18  00000000  00000000  00078654  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	000803d1 	.word	0x000803d1
   80008:	000803cd 	.word	0x000803cd
   8000c:	000803cd 	.word	0x000803cd
   80010:	000803cd 	.word	0x000803cd
   80014:	000803cd 	.word	0x000803cd
   80018:	000803cd 	.word	0x000803cd
	...
   8002c:	000803cd 	.word	0x000803cd
   80030:	000803cd 	.word	0x000803cd
   80034:	00000000 	.word	0x00000000
   80038:	000803cd 	.word	0x000803cd
   8003c:	000803cd 	.word	0x000803cd
   80040:	000803cd 	.word	0x000803cd
   80044:	000803cd 	.word	0x000803cd
   80048:	000803cd 	.word	0x000803cd
   8004c:	000803cd 	.word	0x000803cd
   80050:	000803cd 	.word	0x000803cd
   80054:	000803cd 	.word	0x000803cd
   80058:	000803cd 	.word	0x000803cd
   8005c:	000803cd 	.word	0x000803cd
   80060:	000803cd 	.word	0x000803cd
	...
   8006c:	00080265 	.word	0x00080265
   80070:	00080279 	.word	0x00080279
	...
   80084:	000803cd 	.word	0x000803cd
   80088:	000803cd 	.word	0x000803cd
   8008c:	000803cd 	.word	0x000803cd
   80090:	00000000 	.word	0x00000000
   80094:	000803cd 	.word	0x000803cd
   80098:	000803cd 	.word	0x000803cd
   8009c:	000803cd 	.word	0x000803cd
   800a0:	000803cd 	.word	0x000803cd
   800a4:	00000000 	.word	0x00000000
   800a8:	000803cd 	.word	0x000803cd
   800ac:	000803cd 	.word	0x000803cd
   800b0:	000803cd 	.word	0x000803cd
   800b4:	000803cd 	.word	0x000803cd
   800b8:	000803cd 	.word	0x000803cd
   800bc:	000803cd 	.word	0x000803cd
   800c0:	000803cd 	.word	0x000803cd
	...
   800d0:	000803cd 	.word	0x000803cd
   800d4:	000803cd 	.word	0x000803cd
   800d8:	000803cd 	.word	0x000803cd
   800dc:	000803cd 	.word	0x000803cd
   800e0:	000803cd 	.word	0x000803cd
   800e4:	000803cd 	.word	0x000803cd
   800e8:	000803cd 	.word	0x000803cd
   800ec:	000803cd 	.word	0x000803cd
   800f0:	000803cd 	.word	0x000803cd

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	0008076c 	.word	0x0008076c

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	0008076c 	.word	0x0008076c
   80144:	2007055c 	.word	0x2007055c
   80148:	0008076c 	.word	0x0008076c
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80150:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80152:	480e      	ldr	r0, [pc, #56]	; (8018c <sysclk_init+0x3c>)
   80154:	4b0e      	ldr	r3, [pc, #56]	; (80190 <sysclk_init+0x40>)
   80156:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80158:	2000      	movs	r0, #0
   8015a:	213e      	movs	r1, #62	; 0x3e
   8015c:	4b0d      	ldr	r3, [pc, #52]	; (80194 <sysclk_init+0x44>)
   8015e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80160:	4c0d      	ldr	r4, [pc, #52]	; (80198 <sysclk_init+0x48>)
   80162:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80164:	2800      	cmp	r0, #0
   80166:	d0fc      	beq.n	80162 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80168:	4b0c      	ldr	r3, [pc, #48]	; (8019c <sysclk_init+0x4c>)
   8016a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8016c:	4a0c      	ldr	r2, [pc, #48]	; (801a0 <sysclk_init+0x50>)
   8016e:	4b0d      	ldr	r3, [pc, #52]	; (801a4 <sysclk_init+0x54>)
   80170:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80172:	4c0d      	ldr	r4, [pc, #52]	; (801a8 <sysclk_init+0x58>)
   80174:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80176:	2800      	cmp	r0, #0
   80178:	d0fc      	beq.n	80174 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8017a:	2010      	movs	r0, #16
   8017c:	4b0b      	ldr	r3, [pc, #44]	; (801ac <sysclk_init+0x5c>)
   8017e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80180:	4b0b      	ldr	r3, [pc, #44]	; (801b0 <sysclk_init+0x60>)
   80182:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80184:	4801      	ldr	r0, [pc, #4]	; (8018c <sysclk_init+0x3c>)
   80186:	4b02      	ldr	r3, [pc, #8]	; (80190 <sysclk_init+0x40>)
   80188:	4798      	blx	r3
   8018a:	bd10      	pop	{r4, pc}
   8018c:	0501bd00 	.word	0x0501bd00
   80190:	200700a5 	.word	0x200700a5
   80194:	000802f5 	.word	0x000802f5
   80198:	00080349 	.word	0x00080349
   8019c:	00080359 	.word	0x00080359
   801a0:	200d3f01 	.word	0x200d3f01
   801a4:	400e0600 	.word	0x400e0600
   801a8:	00080369 	.word	0x00080369
   801ac:	0008028d 	.word	0x0008028d
   801b0:	00080481 	.word	0x00080481

000801b4 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   801b4:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   801b6:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   801b8:	9c01      	ldr	r4, [sp, #4]
   801ba:	b10c      	cbz	r4, 801c0 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   801bc:	6641      	str	r1, [r0, #100]	; 0x64
   801be:	e000      	b.n	801c2 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   801c0:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   801c2:	b10b      	cbz	r3, 801c8 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   801c4:	6501      	str	r1, [r0, #80]	; 0x50
   801c6:	e000      	b.n	801ca <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   801c8:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   801ca:	b10a      	cbz	r2, 801d0 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   801cc:	6301      	str	r1, [r0, #48]	; 0x30
   801ce:	e000      	b.n	801d2 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   801d0:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   801d2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   801d4:	6001      	str	r1, [r0, #0]
}
   801d6:	f85d 4b04 	ldr.w	r4, [sp], #4
   801da:	4770      	bx	lr

000801dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   801dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   801de:	4770      	bx	lr

000801e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   801e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   801e2:	4770      	bx	lr

000801e4 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   801e4:	0943      	lsrs	r3, r0, #5
   801e6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   801ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
   801ee:	025b      	lsls	r3, r3, #9
void pio_set_pin_high(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   801f0:	f000 001f 	and.w	r0, r0, #31
   801f4:	2201      	movs	r2, #1
   801f6:	4082      	lsls	r2, r0
   801f8:	631a      	str	r2, [r3, #48]	; 0x30
   801fa:	4770      	bx	lr

000801fc <pio_set_pin_low>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   801fc:	0943      	lsrs	r3, r0, #5
   801fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80202:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80206:	025b      	lsls	r3, r3, #9
void pio_set_pin_low(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   80208:	f000 001f 	and.w	r0, r0, #31
   8020c:	2201      	movs	r2, #1
   8020e:	4082      	lsls	r2, r0
   80210:	635a      	str	r2, [r3, #52]	; 0x34
   80212:	4770      	bx	lr

00080214 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80218:	4604      	mov	r4, r0
   8021a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8021c:	4b0e      	ldr	r3, [pc, #56]	; (80258 <pio_handler_process+0x44>)
   8021e:	4798      	blx	r3
   80220:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80222:	4620      	mov	r0, r4
   80224:	4b0d      	ldr	r3, [pc, #52]	; (8025c <pio_handler_process+0x48>)
   80226:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80228:	4005      	ands	r5, r0
   8022a:	d013      	beq.n	80254 <pio_handler_process+0x40>
   8022c:	4c0c      	ldr	r4, [pc, #48]	; (80260 <pio_handler_process+0x4c>)
   8022e:	f104 0660 	add.w	r6, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80232:	6823      	ldr	r3, [r4, #0]
   80234:	4543      	cmp	r3, r8
   80236:	d108      	bne.n	8024a <pio_handler_process+0x36>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80238:	6861      	ldr	r1, [r4, #4]
   8023a:	4229      	tst	r1, r5
   8023c:	d005      	beq.n	8024a <pio_handler_process+0x36>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8023e:	68e3      	ldr	r3, [r4, #12]
   80240:	4640      	mov	r0, r8
   80242:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   80244:	6863      	ldr	r3, [r4, #4]
   80246:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8024a:	42b4      	cmp	r4, r6
   8024c:	d002      	beq.n	80254 <pio_handler_process+0x40>
   8024e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80250:	2d00      	cmp	r5, #0
   80252:	d1ee      	bne.n	80232 <pio_handler_process+0x1e>
   80254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80258:	000801dd 	.word	0x000801dd
   8025c:	000801e1 	.word	0x000801e1
   80260:	20070574 	.word	0x20070574

00080264 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80264:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80266:	4802      	ldr	r0, [pc, #8]	; (80270 <PIOA_Handler+0xc>)
   80268:	210b      	movs	r1, #11
   8026a:	4b02      	ldr	r3, [pc, #8]	; (80274 <PIOA_Handler+0x10>)
   8026c:	4798      	blx	r3
   8026e:	bd08      	pop	{r3, pc}
   80270:	400e0e00 	.word	0x400e0e00
   80274:	00080215 	.word	0x00080215

00080278 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80278:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8027a:	4802      	ldr	r0, [pc, #8]	; (80284 <PIOB_Handler+0xc>)
   8027c:	210c      	movs	r1, #12
   8027e:	4b02      	ldr	r3, [pc, #8]	; (80288 <PIOB_Handler+0x10>)
   80280:	4798      	blx	r3
   80282:	bd08      	pop	{r3, pc}
   80284:	400e1000 	.word	0x400e1000
   80288:	00080215 	.word	0x00080215

0008028c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8028c:	4a18      	ldr	r2, [pc, #96]	; (802f0 <pmc_switch_mck_to_pllack+0x64>)
   8028e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80294:	4318      	orrs	r0, r3
   80296:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80298:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8029a:	f013 0f08 	tst.w	r3, #8
   8029e:	d003      	beq.n	802a8 <pmc_switch_mck_to_pllack+0x1c>
   802a0:	e009      	b.n	802b6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   802a2:	3b01      	subs	r3, #1
   802a4:	d103      	bne.n	802ae <pmc_switch_mck_to_pllack+0x22>
   802a6:	e01e      	b.n	802e6 <pmc_switch_mck_to_pllack+0x5a>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802ac:	4910      	ldr	r1, [pc, #64]	; (802f0 <pmc_switch_mck_to_pllack+0x64>)
   802ae:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   802b0:	f012 0f08 	tst.w	r2, #8
   802b4:	d0f5      	beq.n	802a2 <pmc_switch_mck_to_pllack+0x16>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   802b6:	4a0e      	ldr	r2, [pc, #56]	; (802f0 <pmc_switch_mck_to_pllack+0x64>)
   802b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   802ba:	f023 0303 	bic.w	r3, r3, #3
   802be:	f043 0302 	orr.w	r3, r3, #2
   802c2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802c4:	6e90      	ldr	r0, [r2, #104]	; 0x68
   802c6:	f010 0008 	ands.w	r0, r0, #8
   802ca:	d004      	beq.n	802d6 <pmc_switch_mck_to_pllack+0x4a>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   802cc:	2000      	movs	r0, #0
   802ce:	4770      	bx	lr
	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
   802d0:	3b01      	subs	r3, #1
   802d2:	d103      	bne.n	802dc <pmc_switch_mck_to_pllack+0x50>
   802d4:	e009      	b.n	802ea <pmc_switch_mck_to_pllack+0x5e>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   802d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802da:	4905      	ldr	r1, [pc, #20]	; (802f0 <pmc_switch_mck_to_pllack+0x64>)
   802dc:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   802de:	f012 0f08 	tst.w	r2, #8
   802e2:	d0f5      	beq.n	802d0 <pmc_switch_mck_to_pllack+0x44>
   802e4:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   802e6:	2001      	movs	r0, #1
   802e8:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   802ea:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   802ec:	4770      	bx	lr
   802ee:	bf00      	nop
   802f0:	400e0600 	.word	0x400e0600

000802f4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   802f4:	b138      	cbz	r0, 80306 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   802f6:	4911      	ldr	r1, [pc, #68]	; (8033c <pmc_switch_mainck_to_xtal+0x48>)
   802f8:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   802fa:	4a11      	ldr	r2, [pc, #68]	; (80340 <pmc_switch_mainck_to_xtal+0x4c>)
   802fc:	401a      	ands	r2, r3
   802fe:	4b11      	ldr	r3, [pc, #68]	; (80344 <pmc_switch_mainck_to_xtal+0x50>)
   80300:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80302:	620b      	str	r3, [r1, #32]
   80304:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80306:	4a0d      	ldr	r2, [pc, #52]	; (8033c <pmc_switch_mainck_to_xtal+0x48>)
   80308:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8030a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8030e:	f023 0303 	bic.w	r3, r3, #3
   80312:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80316:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8031a:	0209      	lsls	r1, r1, #8
   8031c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8031e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80320:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80322:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80324:	f013 0f01 	tst.w	r3, #1
   80328:	d0fb      	beq.n	80322 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8032a:	4a04      	ldr	r2, [pc, #16]	; (8033c <pmc_switch_mainck_to_xtal+0x48>)
   8032c:	6a13      	ldr	r3, [r2, #32]
   8032e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80336:	6213      	str	r3, [r2, #32]
   80338:	4770      	bx	lr
   8033a:	bf00      	nop
   8033c:	400e0600 	.word	0x400e0600
   80340:	fec8fffc 	.word	0xfec8fffc
   80344:	01370002 	.word	0x01370002

00080348 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80348:	4b02      	ldr	r3, [pc, #8]	; (80354 <pmc_osc_is_ready_mainck+0xc>)
   8034a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8034c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80350:	4770      	bx	lr
   80352:	bf00      	nop
   80354:	400e0600 	.word	0x400e0600

00080358 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80358:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8035c:	4b01      	ldr	r3, [pc, #4]	; (80364 <pmc_disable_pllack+0xc>)
   8035e:	629a      	str	r2, [r3, #40]	; 0x28
   80360:	4770      	bx	lr
   80362:	bf00      	nop
   80364:	400e0600 	.word	0x400e0600

00080368 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80368:	4b02      	ldr	r3, [pc, #8]	; (80374 <pmc_is_locked_pllack+0xc>)
   8036a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8036c:	f000 0002 	and.w	r0, r0, #2
   80370:	4770      	bx	lr
   80372:	bf00      	nop
   80374:	400e0600 	.word	0x400e0600

00080378 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80378:	282c      	cmp	r0, #44	; 0x2c
   8037a:	d81e      	bhi.n	803ba <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8037c:	281f      	cmp	r0, #31
   8037e:	d80c      	bhi.n	8039a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80380:	4b11      	ldr	r3, [pc, #68]	; (803c8 <pmc_enable_periph_clk+0x50>)
   80382:	699a      	ldr	r2, [r3, #24]
   80384:	2301      	movs	r3, #1
   80386:	4083      	lsls	r3, r0
   80388:	401a      	ands	r2, r3
   8038a:	4293      	cmp	r3, r2
   8038c:	d017      	beq.n	803be <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8038e:	2301      	movs	r3, #1
   80390:	4083      	lsls	r3, r0
   80392:	4a0d      	ldr	r2, [pc, #52]	; (803c8 <pmc_enable_periph_clk+0x50>)
   80394:	6113      	str	r3, [r2, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80396:	2000      	movs	r0, #0
   80398:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8039a:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <pmc_enable_periph_clk+0x50>)
   8039c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   803a0:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   803a2:	2301      	movs	r3, #1
   803a4:	4083      	lsls	r3, r0
   803a6:	401a      	ands	r2, r3
   803a8:	4293      	cmp	r3, r2
   803aa:	d00a      	beq.n	803c2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   803ac:	2301      	movs	r3, #1
   803ae:	4083      	lsls	r3, r0
   803b0:	4a05      	ldr	r2, [pc, #20]	; (803c8 <pmc_enable_periph_clk+0x50>)
   803b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   803b6:	2000      	movs	r0, #0
   803b8:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   803ba:	2001      	movs	r0, #1
   803bc:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   803be:	2000      	movs	r0, #0
   803c0:	4770      	bx	lr
   803c2:	2000      	movs	r0, #0
}
   803c4:	4770      	bx	lr
   803c6:	bf00      	nop
   803c8:	400e0600 	.word	0x400e0600

000803cc <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
	}
   803cc:	e7fe      	b.n	803cc <Dummy_Handler>
   803ce:	bf00      	nop

000803d0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   803d0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   803d2:	4b1f      	ldr	r3, [pc, #124]	; (80450 <Reset_Handler+0x80>)
   803d4:	4a1f      	ldr	r2, [pc, #124]	; (80454 <Reset_Handler+0x84>)
   803d6:	429a      	cmp	r2, r3
   803d8:	d003      	beq.n	803e2 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   803da:	4b1f      	ldr	r3, [pc, #124]	; (80458 <Reset_Handler+0x88>)
   803dc:	4a1c      	ldr	r2, [pc, #112]	; (80450 <Reset_Handler+0x80>)
   803de:	429a      	cmp	r2, r3
   803e0:	d304      	bcc.n	803ec <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   803e2:	4b1e      	ldr	r3, [pc, #120]	; (8045c <Reset_Handler+0x8c>)
   803e4:	4a1e      	ldr	r2, [pc, #120]	; (80460 <Reset_Handler+0x90>)
   803e6:	429a      	cmp	r2, r3
   803e8:	d310      	bcc.n	8040c <Reset_Handler+0x3c>
   803ea:	e01b      	b.n	80424 <Reset_Handler+0x54>
   803ec:	4918      	ldr	r1, [pc, #96]	; (80450 <Reset_Handler+0x80>)
   803ee:	1d0a      	adds	r2, r1, #4
   803f0:	4b1c      	ldr	r3, [pc, #112]	; (80464 <Reset_Handler+0x94>)
   803f2:	1a9b      	subs	r3, r3, r2
   803f4:	f023 0303 	bic.w	r3, r3, #3
   803f8:	3304      	adds	r3, #4
   803fa:	4a16      	ldr	r2, [pc, #88]	; (80454 <Reset_Handler+0x84>)
   803fc:	4413      	add	r3, r2
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   803fe:	f852 0b04 	ldr.w	r0, [r2], #4
   80402:	f841 0b04 	str.w	r0, [r1], #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80406:	429a      	cmp	r2, r3
   80408:	d1f9      	bne.n	803fe <Reset_Handler+0x2e>
   8040a:	e7ea      	b.n	803e2 <Reset_Handler+0x12>
   8040c:	4b16      	ldr	r3, [pc, #88]	; (80468 <Reset_Handler+0x98>)
   8040e:	4a17      	ldr	r2, [pc, #92]	; (8046c <Reset_Handler+0x9c>)
   80410:	1ad2      	subs	r2, r2, r3
   80412:	f022 0203 	bic.w	r2, r2, #3
   80416:	441a      	add	r2, r3
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80418:	3b04      	subs	r3, #4
		*pDest++ = 0;
   8041a:	2100      	movs	r1, #0
   8041c:	f843 1b04 	str.w	r1, [r3], #4
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80420:	4293      	cmp	r3, r2
   80422:	d1fb      	bne.n	8041c <Reset_Handler+0x4c>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80424:	4b12      	ldr	r3, [pc, #72]	; (80470 <Reset_Handler+0xa0>)
   80426:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8042a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8042e:	4911      	ldr	r1, [pc, #68]	; (80474 <Reset_Handler+0xa4>)
   80430:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80432:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8043a:	d203      	bcs.n	80444 <Reset_Handler+0x74>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8043c:	688b      	ldr	r3, [r1, #8]
   8043e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80442:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80444:	4b0c      	ldr	r3, [pc, #48]	; (80478 <Reset_Handler+0xa8>)
   80446:	4798      	blx	r3

	/* Branch to main function */
	main();
   80448:	4b0c      	ldr	r3, [pc, #48]	; (8047c <Reset_Handler+0xac>)
   8044a:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8044c:	e7fe      	b.n	8044c <Reset_Handler+0x7c>
   8044e:	bf00      	nop
   80450:	20070000 	.word	0x20070000
   80454:	0008076c 	.word	0x0008076c
   80458:	20070558 	.word	0x20070558
   8045c:	200705e4 	.word	0x200705e4
   80460:	20070558 	.word	0x20070558
   80464:	2007055b 	.word	0x2007055b
   80468:	2007055c 	.word	0x2007055c
   8046c:	200705e7 	.word	0x200705e7
   80470:	00080000 	.word	0x00080000
   80474:	e000ed00 	.word	0xe000ed00
   80478:	00080601 	.word	0x00080601
   8047c:	0008059d 	.word	0x0008059d

00080480 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80480:	4b3e      	ldr	r3, [pc, #248]	; (8057c <SystemCoreClockUpdate+0xfc>)
   80482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80484:	f003 0303 	and.w	r3, r3, #3
   80488:	2b03      	cmp	r3, #3
   8048a:	d85f      	bhi.n	8054c <SystemCoreClockUpdate+0xcc>
   8048c:	e8df f003 	tbb	[pc, r3]
   80490:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80494:	4b3a      	ldr	r3, [pc, #232]	; (80580 <SystemCoreClockUpdate+0x100>)
   80496:	695b      	ldr	r3, [r3, #20]
   80498:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8049c:	bf14      	ite	ne
   8049e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   804a2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   804a6:	4b37      	ldr	r3, [pc, #220]	; (80584 <SystemCoreClockUpdate+0x104>)
   804a8:	601a      	str	r2, [r3, #0]
   804aa:	e04f      	b.n	8054c <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   804ac:	4b33      	ldr	r3, [pc, #204]	; (8057c <SystemCoreClockUpdate+0xfc>)
   804ae:	6a1b      	ldr	r3, [r3, #32]
   804b0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804b4:	d003      	beq.n	804be <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   804b6:	4a34      	ldr	r2, [pc, #208]	; (80588 <SystemCoreClockUpdate+0x108>)
   804b8:	4b32      	ldr	r3, [pc, #200]	; (80584 <SystemCoreClockUpdate+0x104>)
   804ba:	601a      	str	r2, [r3, #0]
   804bc:	e046      	b.n	8054c <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   804be:	4a33      	ldr	r2, [pc, #204]	; (8058c <SystemCoreClockUpdate+0x10c>)
   804c0:	4b30      	ldr	r3, [pc, #192]	; (80584 <SystemCoreClockUpdate+0x104>)
   804c2:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   804c4:	4b2d      	ldr	r3, [pc, #180]	; (8057c <SystemCoreClockUpdate+0xfc>)
   804c6:	6a1b      	ldr	r3, [r3, #32]
   804c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   804cc:	2b10      	cmp	r3, #16
   804ce:	d002      	beq.n	804d6 <SystemCoreClockUpdate+0x56>
   804d0:	2b20      	cmp	r3, #32
   804d2:	d004      	beq.n	804de <SystemCoreClockUpdate+0x5e>
   804d4:	e03a      	b.n	8054c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   804d6:	4a2e      	ldr	r2, [pc, #184]	; (80590 <SystemCoreClockUpdate+0x110>)
   804d8:	4b2a      	ldr	r3, [pc, #168]	; (80584 <SystemCoreClockUpdate+0x104>)
   804da:	601a      	str	r2, [r3, #0]
				break;
   804dc:	e036      	b.n	8054c <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   804de:	4a2a      	ldr	r2, [pc, #168]	; (80588 <SystemCoreClockUpdate+0x108>)
   804e0:	4b28      	ldr	r3, [pc, #160]	; (80584 <SystemCoreClockUpdate+0x104>)
   804e2:	601a      	str	r2, [r3, #0]
				break;
   804e4:	e032      	b.n	8054c <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   804e6:	4b25      	ldr	r3, [pc, #148]	; (8057c <SystemCoreClockUpdate+0xfc>)
   804e8:	6a1b      	ldr	r3, [r3, #32]
   804ea:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   804ee:	d003      	beq.n	804f8 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   804f0:	4a25      	ldr	r2, [pc, #148]	; (80588 <SystemCoreClockUpdate+0x108>)
   804f2:	4b24      	ldr	r3, [pc, #144]	; (80584 <SystemCoreClockUpdate+0x104>)
   804f4:	601a      	str	r2, [r3, #0]
   804f6:	e012      	b.n	8051e <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   804f8:	4a24      	ldr	r2, [pc, #144]	; (8058c <SystemCoreClockUpdate+0x10c>)
   804fa:	4b22      	ldr	r3, [pc, #136]	; (80584 <SystemCoreClockUpdate+0x104>)
   804fc:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   804fe:	4b1f      	ldr	r3, [pc, #124]	; (8057c <SystemCoreClockUpdate+0xfc>)
   80500:	6a1b      	ldr	r3, [r3, #32]
   80502:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80506:	2b10      	cmp	r3, #16
   80508:	d002      	beq.n	80510 <SystemCoreClockUpdate+0x90>
   8050a:	2b20      	cmp	r3, #32
   8050c:	d004      	beq.n	80518 <SystemCoreClockUpdate+0x98>
   8050e:	e006      	b.n	8051e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80510:	4a1f      	ldr	r2, [pc, #124]	; (80590 <SystemCoreClockUpdate+0x110>)
   80512:	4b1c      	ldr	r3, [pc, #112]	; (80584 <SystemCoreClockUpdate+0x104>)
   80514:	601a      	str	r2, [r3, #0]
				break;
   80516:	e002      	b.n	8051e <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80518:	4a1b      	ldr	r2, [pc, #108]	; (80588 <SystemCoreClockUpdate+0x108>)
   8051a:	4b1a      	ldr	r3, [pc, #104]	; (80584 <SystemCoreClockUpdate+0x104>)
   8051c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8051e:	4b17      	ldr	r3, [pc, #92]	; (8057c <SystemCoreClockUpdate+0xfc>)
   80520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80522:	f003 0303 	and.w	r3, r3, #3
   80526:	2b02      	cmp	r3, #2
   80528:	d10d      	bne.n	80546 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8052a:	4a14      	ldr	r2, [pc, #80]	; (8057c <SystemCoreClockUpdate+0xfc>)
   8052c:	6a93      	ldr	r3, [r2, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8052e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80530:	4814      	ldr	r0, [pc, #80]	; (80584 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80532:	f3c3 410a 	ubfx	r1, r3, #16, #11
   80536:	6803      	ldr	r3, [r0, #0]
   80538:	fb01 3303 	mla	r3, r1, r3, r3
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8053c:	b2d2      	uxtb	r2, r2
   8053e:	fbb3 f3f2 	udiv	r3, r3, r2
   80542:	6003      	str	r3, [r0, #0]
   80544:	e002      	b.n	8054c <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80546:	4a13      	ldr	r2, [pc, #76]	; (80594 <SystemCoreClockUpdate+0x114>)
   80548:	4b0e      	ldr	r3, [pc, #56]	; (80584 <SystemCoreClockUpdate+0x104>)
   8054a:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8054c:	4b0b      	ldr	r3, [pc, #44]	; (8057c <SystemCoreClockUpdate+0xfc>)
   8054e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80550:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80554:	2b70      	cmp	r3, #112	; 0x70
   80556:	d107      	bne.n	80568 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80558:	4a0a      	ldr	r2, [pc, #40]	; (80584 <SystemCoreClockUpdate+0x104>)
   8055a:	6813      	ldr	r3, [r2, #0]
   8055c:	490e      	ldr	r1, [pc, #56]	; (80598 <SystemCoreClockUpdate+0x118>)
   8055e:	fba1 1303 	umull	r1, r3, r1, r3
   80562:	085b      	lsrs	r3, r3, #1
   80564:	6013      	str	r3, [r2, #0]
   80566:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80568:	4b04      	ldr	r3, [pc, #16]	; (8057c <SystemCoreClockUpdate+0xfc>)
   8056a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8056c:	4905      	ldr	r1, [pc, #20]	; (80584 <SystemCoreClockUpdate+0x104>)
   8056e:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80572:	680b      	ldr	r3, [r1, #0]
   80574:	40d3      	lsrs	r3, r2
   80576:	600b      	str	r3, [r1, #0]
   80578:	4770      	bx	lr
   8057a:	bf00      	nop
   8057c:	400e0600 	.word	0x400e0600
   80580:	400e1a10 	.word	0x400e1a10
   80584:	2007012c 	.word	0x2007012c
   80588:	00b71b00 	.word	0x00b71b00
   8058c:	003d0900 	.word	0x003d0900
   80590:	007a1200 	.word	0x007a1200
   80594:	0e4e1c00 	.word	0x0e4e1c00
   80598:	aaaaaaab 	.word	0xaaaaaaab

0008059c <main>:
 * Support and FAQ: visit <a href="http://www.atmel.com/design-support/">Atmel Support</a>
 */
#include <asf.h>

int main (void)
{	
   8059c:	b570      	push	{r4, r5, r6, lr}
   8059e:	b082      	sub	sp, #8
	/* Initializations */
	sysclk_init();
   805a0:	4b11      	ldr	r3, [pc, #68]	; (805e8 <main+0x4c>)
   805a2:	4798      	blx	r3
	//board_init();
	
	pmc_enable_periph_clk(ID_PIOA);		// enables clk on PIOA
   805a4:	200b      	movs	r0, #11
   805a6:	4c11      	ldr	r4, [pc, #68]	; (805ec <main+0x50>)
   805a8:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOB);		// enables clk on PIOB
   805aa:	200c      	movs	r0, #12
   805ac:	47a0      	blx	r4
		
	/* Initialize contactors, user LEDs, and buzzer to output. Default drive low */
	pio_set_output(CONTACTORS_PIO, CONTACTORS_PINS, LOW, DISABLE, ENABLE);
   805ae:	4e10      	ldr	r6, [pc, #64]	; (805f0 <main+0x54>)
   805b0:	2401      	movs	r4, #1
   805b2:	9400      	str	r4, [sp, #0]
   805b4:	4630      	mov	r0, r6
   805b6:	f44f 61f8 	mov.w	r1, #1984	; 0x7c0
   805ba:	2200      	movs	r2, #0
   805bc:	4613      	mov	r3, r2
   805be:	4d0d      	ldr	r5, [pc, #52]	; (805f4 <main+0x58>)
   805c0:	47a8      	blx	r5
	pio_set_output(BUZ_LED_PIO, BUZ_LED_PINS, LOW, DISABLE, ENABLE);
   805c2:	9400      	str	r4, [sp, #0]
   805c4:	4630      	mov	r0, r6
   805c6:	210f      	movs	r1, #15
   805c8:	2200      	movs	r2, #0
   805ca:	4613      	mov	r3, r2
   805cc:	47a8      	blx	r5
	
	pio_set_pin_high(BUZ_PIN);
   805ce:	4620      	mov	r0, r4
   805d0:	4e09      	ldr	r6, [pc, #36]	; (805f8 <main+0x5c>)
   805d2:	47b0      	blx	r6
	//delay_ms(50);
	pio_set_pin_low(BUZ_PIN);
   805d4:	4620      	mov	r0, r4
   805d6:	4d09      	ldr	r5, [pc, #36]	; (805fc <main+0x60>)
   805d8:	47a8      	blx	r5
	//delay_ms(50);
	pio_set_pin_high(BUZ_PIN);
   805da:	4620      	mov	r0, r4
   805dc:	47b0      	blx	r6
	//delay_ms(50);
	pio_set_pin_low(BUZ_PIN);
   805de:	4620      	mov	r0, r4
   805e0:	47a8      	blx	r5
// 	pio_set_pin_low(MAIN2_CONTACTOR_PIN);
// 	pio_set_pin_low(ULED3_PIN);


	/* Insert application code here, after the board has been initialized. */
}
   805e2:	2000      	movs	r0, #0
   805e4:	b002      	add	sp, #8
   805e6:	bd70      	pop	{r4, r5, r6, pc}
   805e8:	00080151 	.word	0x00080151
   805ec:	00080379 	.word	0x00080379
   805f0:	400e1000 	.word	0x400e1000
   805f4:	000801b5 	.word	0x000801b5
   805f8:	000801e5 	.word	0x000801e5
   805fc:	000801fd 	.word	0x000801fd

00080600 <__libc_init_array>:
   80600:	b570      	push	{r4, r5, r6, lr}
   80602:	4e0f      	ldr	r6, [pc, #60]	; (80640 <__libc_init_array+0x40>)
   80604:	4d0f      	ldr	r5, [pc, #60]	; (80644 <__libc_init_array+0x44>)
   80606:	1b76      	subs	r6, r6, r5
   80608:	10b6      	asrs	r6, r6, #2
   8060a:	bf18      	it	ne
   8060c:	2400      	movne	r4, #0
   8060e:	d005      	beq.n	8061c <__libc_init_array+0x1c>
   80610:	3401      	adds	r4, #1
   80612:	f855 3b04 	ldr.w	r3, [r5], #4
   80616:	4798      	blx	r3
   80618:	42a6      	cmp	r6, r4
   8061a:	d1f9      	bne.n	80610 <__libc_init_array+0x10>
   8061c:	4e0a      	ldr	r6, [pc, #40]	; (80648 <__libc_init_array+0x48>)
   8061e:	4d0b      	ldr	r5, [pc, #44]	; (8064c <__libc_init_array+0x4c>)
   80620:	f000 f892 	bl	80748 <_init>
   80624:	1b76      	subs	r6, r6, r5
   80626:	10b6      	asrs	r6, r6, #2
   80628:	bf18      	it	ne
   8062a:	2400      	movne	r4, #0
   8062c:	d006      	beq.n	8063c <__libc_init_array+0x3c>
   8062e:	3401      	adds	r4, #1
   80630:	f855 3b04 	ldr.w	r3, [r5], #4
   80634:	4798      	blx	r3
   80636:	42a6      	cmp	r6, r4
   80638:	d1f9      	bne.n	8062e <__libc_init_array+0x2e>
   8063a:	bd70      	pop	{r4, r5, r6, pc}
   8063c:	bd70      	pop	{r4, r5, r6, pc}
   8063e:	bf00      	nop
   80640:	00080754 	.word	0x00080754
   80644:	00080754 	.word	0x00080754
   80648:	0008075c 	.word	0x0008075c
   8064c:	00080754 	.word	0x00080754

00080650 <register_fini>:
   80650:	4b02      	ldr	r3, [pc, #8]	; (8065c <register_fini+0xc>)
   80652:	b113      	cbz	r3, 8065a <register_fini+0xa>
   80654:	4802      	ldr	r0, [pc, #8]	; (80660 <register_fini+0x10>)
   80656:	f000 b805 	b.w	80664 <atexit>
   8065a:	4770      	bx	lr
   8065c:	00000000 	.word	0x00000000
   80660:	00080671 	.word	0x00080671

00080664 <atexit>:
   80664:	4601      	mov	r1, r0
   80666:	2000      	movs	r0, #0
   80668:	4602      	mov	r2, r0
   8066a:	4603      	mov	r3, r0
   8066c:	f000 b816 	b.w	8069c <__register_exitproc>

00080670 <__libc_fini_array>:
   80670:	b538      	push	{r3, r4, r5, lr}
   80672:	4b08      	ldr	r3, [pc, #32]	; (80694 <__libc_fini_array+0x24>)
   80674:	4d08      	ldr	r5, [pc, #32]	; (80698 <__libc_fini_array+0x28>)
   80676:	1aed      	subs	r5, r5, r3
   80678:	10ac      	asrs	r4, r5, #2
   8067a:	bf18      	it	ne
   8067c:	18ed      	addne	r5, r5, r3
   8067e:	d005      	beq.n	8068c <__libc_fini_array+0x1c>
   80680:	3c01      	subs	r4, #1
   80682:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80686:	4798      	blx	r3
   80688:	2c00      	cmp	r4, #0
   8068a:	d1f9      	bne.n	80680 <__libc_fini_array+0x10>
   8068c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80690:	f000 b864 	b.w	8075c <_fini>
   80694:	00080768 	.word	0x00080768
   80698:	0008076c 	.word	0x0008076c

0008069c <__register_exitproc>:
   8069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   806a0:	4c25      	ldr	r4, [pc, #148]	; (80738 <__register_exitproc+0x9c>)
   806a2:	4606      	mov	r6, r0
   806a4:	6825      	ldr	r5, [r4, #0]
   806a6:	4688      	mov	r8, r1
   806a8:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   806ac:	4692      	mov	sl, r2
   806ae:	4699      	mov	r9, r3
   806b0:	b3c4      	cbz	r4, 80724 <__register_exitproc+0x88>
   806b2:	6860      	ldr	r0, [r4, #4]
   806b4:	281f      	cmp	r0, #31
   806b6:	dc17      	bgt.n	806e8 <__register_exitproc+0x4c>
   806b8:	1c41      	adds	r1, r0, #1
   806ba:	b176      	cbz	r6, 806da <__register_exitproc+0x3e>
   806bc:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   806c0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   806c4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   806c8:	2201      	movs	r2, #1
   806ca:	4082      	lsls	r2, r0
   806cc:	4315      	orrs	r5, r2
   806ce:	2e02      	cmp	r6, #2
   806d0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   806d4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   806d8:	d01e      	beq.n	80718 <__register_exitproc+0x7c>
   806da:	1c83      	adds	r3, r0, #2
   806dc:	6061      	str	r1, [r4, #4]
   806de:	2000      	movs	r0, #0
   806e0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   806e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   806e8:	4b14      	ldr	r3, [pc, #80]	; (8073c <__register_exitproc+0xa0>)
   806ea:	b303      	cbz	r3, 8072e <__register_exitproc+0x92>
   806ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
   806f0:	f3af 8000 	nop.w
   806f4:	4604      	mov	r4, r0
   806f6:	b1d0      	cbz	r0, 8072e <__register_exitproc+0x92>
   806f8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   806fc:	2700      	movs	r7, #0
   806fe:	e884 0088 	stmia.w	r4, {r3, r7}
   80702:	4638      	mov	r0, r7
   80704:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   80708:	2101      	movs	r1, #1
   8070a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8070e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   80712:	2e00      	cmp	r6, #0
   80714:	d0e1      	beq.n	806da <__register_exitproc+0x3e>
   80716:	e7d1      	b.n	806bc <__register_exitproc+0x20>
   80718:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8071c:	431a      	orrs	r2, r3
   8071e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   80722:	e7da      	b.n	806da <__register_exitproc+0x3e>
   80724:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   80728:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   8072c:	e7c1      	b.n	806b2 <__register_exitproc+0x16>
   8072e:	f04f 30ff 	mov.w	r0, #4294967295
   80732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80736:	bf00      	nop
   80738:	00080744 	.word	0x00080744
   8073c:	00000000 	.word	0x00000000
   80740:	00000043 	.word	0x00000043

00080744 <_global_impure_ptr>:
   80744:	20070130                                0.. 

00080748 <_init>:
   80748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8074a:	bf00      	nop
   8074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8074e:	bc08      	pop	{r3}
   80750:	469e      	mov	lr, r3
   80752:	4770      	bx	lr

00080754 <__init_array_start>:
   80754:	00080651 	.word	0x00080651

00080758 <__frame_dummy_init_array_entry>:
   80758:	00080119                                ....

0008075c <_fini>:
   8075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8075e:	bf00      	nop
   80760:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80762:	bc08      	pop	{r3}
   80764:	469e      	mov	lr, r3
   80766:	4770      	bx	lr

00080768 <__fini_array_start>:
   80768:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00080740 00000000 00000000 00000000     @...............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
