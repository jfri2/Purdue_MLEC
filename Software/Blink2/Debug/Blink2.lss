
Blink2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000410  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000430  20000000  00080410  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20000430  00080840  00010430  2**2
                  ALLOC
  3 .stack        00000404  2000044c  0008085c  00010430  2**0
                  ALLOC
  4 .heap         00000200  20000850  00080c60  00010430  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010430  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00010459  2**0
                  CONTENTS, READONLY
  7 .debug_info   00000c08  00000000  00000000  000104b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000002ad  00000000  00000000  000110bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000009e  00000000  00000000  00011369  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000078  00000000  00000000  00011407  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0001147f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000eaca  00000000  00000000  000114c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000016c7  00000000  00000000  0001ff91  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0004a34e  00000000  00000000  00021658  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000190  00000000  00000000  0006b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20000850 	.word	0x20000850
   80004:	00080159 	.word	0x00080159
   80008:	00080155 	.word	0x00080155
   8000c:	00080155 	.word	0x00080155
   80010:	00080155 	.word	0x00080155
   80014:	00080155 	.word	0x00080155
   80018:	00080155 	.word	0x00080155
	...
   8002c:	00080155 	.word	0x00080155
   80030:	00080155 	.word	0x00080155
   80034:	00000000 	.word	0x00000000
   80038:	00080155 	.word	0x00080155
   8003c:	00080155 	.word	0x00080155
   80040:	00080155 	.word	0x00080155
   80044:	00080155 	.word	0x00080155
   80048:	00080155 	.word	0x00080155
   8004c:	00080155 	.word	0x00080155
   80050:	00080155 	.word	0x00080155
   80054:	00080155 	.word	0x00080155
   80058:	00080155 	.word	0x00080155
   8005c:	00080155 	.word	0x00080155
   80060:	00080155 	.word	0x00080155
	...
   8006c:	00080155 	.word	0x00080155
   80070:	00080155 	.word	0x00080155
	...
   80084:	00080155 	.word	0x00080155
   80088:	00080155 	.word	0x00080155
   8008c:	00080155 	.word	0x00080155
   80090:	00000000 	.word	0x00000000
   80094:	00080155 	.word	0x00080155
   80098:	00080155 	.word	0x00080155
   8009c:	00080155 	.word	0x00080155
   800a0:	00080155 	.word	0x00080155
   800a4:	00000000 	.word	0x00000000
   800a8:	00080155 	.word	0x00080155
   800ac:	00080155 	.word	0x00080155
   800b0:	00080155 	.word	0x00080155
   800b4:	00080155 	.word	0x00080155
   800b8:	00080155 	.word	0x00080155
   800bc:	00080155 	.word	0x00080155
   800c0:	00080155 	.word	0x00080155
	...
   800d0:	00080155 	.word	0x00080155
   800d4:	00080155 	.word	0x00080155
   800d8:	00080155 	.word	0x00080155
   800dc:	00080155 	.word	0x00080155
   800e0:	00080155 	.word	0x00080155
   800e4:	00080155 	.word	0x00080155
   800e8:	00080155 	.word	0x00080155
   800ec:	00080155 	.word	0x00080155
   800f0:	00080155 	.word	0x00080155

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000430 	.word	0x20000430
   80110:	00000000 	.word	0x00000000
   80114:	00080410 	.word	0x00080410

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080410 	.word	0x00080410
   8013c:	20000434 	.word	0x20000434
   80140:	00080410 	.word	0x00080410
   80144:	00000000 	.word	0x00000000

00080148 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80148:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   8014a:	4b01      	ldr	r3, [pc, #4]	; (80150 <main+0x8>)
   8014c:	4798      	blx	r3
   8014e:	e7fe      	b.n	8014e <main+0x6>
   80150:	000801f9 	.word	0x000801f9

00080154 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80154:	e7fe      	b.n	80154 <Dummy_Handler>
   80156:	bf00      	nop

00080158 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80158:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
   8015a:	4b1a      	ldr	r3, [pc, #104]	; (801c4 <Reset_Handler+0x6c>)
   8015c:	4a1a      	ldr	r2, [pc, #104]	; (801c8 <Reset_Handler+0x70>)
   8015e:	429a      	cmp	r2, r3
   80160:	d003      	beq.n	8016a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
   80162:	4b1a      	ldr	r3, [pc, #104]	; (801cc <Reset_Handler+0x74>)
   80164:	4a17      	ldr	r2, [pc, #92]	; (801c4 <Reset_Handler+0x6c>)
   80166:	429a      	cmp	r2, r3
   80168:	d304      	bcc.n	80174 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   8016a:	4b19      	ldr	r3, [pc, #100]	; (801d0 <Reset_Handler+0x78>)
   8016c:	4a19      	ldr	r2, [pc, #100]	; (801d4 <Reset_Handler+0x7c>)
   8016e:	429a      	cmp	r2, r3
   80170:	d30f      	bcc.n	80192 <Reset_Handler+0x3a>
   80172:	e01a      	b.n	801aa <Reset_Handler+0x52>
   80174:	4b18      	ldr	r3, [pc, #96]	; (801d8 <Reset_Handler+0x80>)
   80176:	4c19      	ldr	r4, [pc, #100]	; (801dc <Reset_Handler+0x84>)
   80178:	1ae4      	subs	r4, r4, r3
   8017a:	f024 0403 	bic.w	r4, r4, #3
   8017e:	3404      	adds	r4, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   80180:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
   80182:	4810      	ldr	r0, [pc, #64]	; (801c4 <Reset_Handler+0x6c>)
   80184:	4910      	ldr	r1, [pc, #64]	; (801c8 <Reset_Handler+0x70>)
   80186:	585a      	ldr	r2, [r3, r1]
   80188:	501a      	str	r2, [r3, r0]
   8018a:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
   8018c:	42a3      	cmp	r3, r4
   8018e:	d1fa      	bne.n	80186 <Reset_Handler+0x2e>
   80190:	e7eb      	b.n	8016a <Reset_Handler+0x12>
   80192:	4b13      	ldr	r3, [pc, #76]	; (801e0 <Reset_Handler+0x88>)
   80194:	4913      	ldr	r1, [pc, #76]	; (801e4 <Reset_Handler+0x8c>)
   80196:	1ac9      	subs	r1, r1, r3
   80198:	f021 0103 	bic.w	r1, r1, #3
   8019c:	1d1a      	adds	r2, r3, #4
   8019e:	4411      	add	r1, r2
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
   801a0:	2200      	movs	r2, #0
   801a2:	f843 2f04 	str.w	r2, [r3, #4]!
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   801a6:	428b      	cmp	r3, r1
   801a8:	d1fb      	bne.n	801a2 <Reset_Handler+0x4a>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   801aa:	4b0f      	ldr	r3, [pc, #60]	; (801e8 <Reset_Handler+0x90>)
   801ac:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   801b0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   801b4:	4a0d      	ldr	r2, [pc, #52]	; (801ec <Reset_Handler+0x94>)
   801b6:	6093      	str	r3, [r2, #8]

        /* Initialize the C library */
        __libc_init_array();
   801b8:	4b0d      	ldr	r3, [pc, #52]	; (801f0 <Reset_Handler+0x98>)
   801ba:	4798      	blx	r3

        /* Branch to main function */
        main();
   801bc:	4b0d      	ldr	r3, [pc, #52]	; (801f4 <Reset_Handler+0x9c>)
   801be:	4798      	blx	r3
   801c0:	e7fe      	b.n	801c0 <Reset_Handler+0x68>
   801c2:	bf00      	nop
   801c4:	20000000 	.word	0x20000000
   801c8:	00080410 	.word	0x00080410
   801cc:	20000430 	.word	0x20000430
   801d0:	2000044c 	.word	0x2000044c
   801d4:	20000430 	.word	0x20000430
   801d8:	20000004 	.word	0x20000004
   801dc:	20000433 	.word	0x20000433
   801e0:	2000042c 	.word	0x2000042c
   801e4:	20000447 	.word	0x20000447
   801e8:	00080000 	.word	0x00080000
   801ec:	e000ed00 	.word	0xe000ed00
   801f0:	0008029d 	.word	0x0008029d
   801f4:	00080149 	.word	0x00080149

000801f8 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801fc:	4a20      	ldr	r2, [pc, #128]	; (80280 <SystemInit+0x88>)
   801fe:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   80200:	f502 7200 	add.w	r2, r2, #512	; 0x200
   80204:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   80206:	4b1f      	ldr	r3, [pc, #124]	; (80284 <SystemInit+0x8c>)
   80208:	6a1b      	ldr	r3, [r3, #32]
   8020a:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8020e:	d107      	bne.n	80220 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   80210:	4a1d      	ldr	r2, [pc, #116]	; (80288 <SystemInit+0x90>)
   80212:	4b1c      	ldr	r3, [pc, #112]	; (80284 <SystemInit+0x8c>)
   80214:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   80216:	461a      	mov	r2, r3
   80218:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8021a:	f013 0f01 	tst.w	r3, #1
   8021e:	d0fb      	beq.n	80218 <SystemInit+0x20>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   80220:	4a1a      	ldr	r2, [pc, #104]	; (8028c <SystemInit+0x94>)
   80222:	4b18      	ldr	r3, [pc, #96]	; (80284 <SystemInit+0x8c>)
   80224:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   80226:	461a      	mov	r2, r3
   80228:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8022a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   8022e:	d0fb      	beq.n	80228 <SystemInit+0x30>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	4b14      	ldr	r3, [pc, #80]	; (80284 <SystemInit+0x8c>)
   80232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80234:	f022 0203 	bic.w	r2, r2, #3
   80238:	f042 0201 	orr.w	r2, r2, #1
   8023c:	631a      	str	r2, [r3, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   8023e:	461a      	mov	r2, r3
   80240:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80242:	f013 0f08 	tst.w	r3, #8
   80246:	d0fb      	beq.n	80240 <SystemInit+0x48>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80248:	4a11      	ldr	r2, [pc, #68]	; (80290 <SystemInit+0x98>)
   8024a:	4b0e      	ldr	r3, [pc, #56]	; (80284 <SystemInit+0x8c>)
   8024c:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   8024e:	461a      	mov	r2, r3
   80250:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80252:	f013 0f02 	tst.w	r3, #2
   80256:	d0fb      	beq.n	80250 <SystemInit+0x58>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80258:	2211      	movs	r2, #17
   8025a:	4b0a      	ldr	r3, [pc, #40]	; (80284 <SystemInit+0x8c>)
   8025c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8025e:	461a      	mov	r2, r3
   80260:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80262:	f013 0f08 	tst.w	r3, #8
   80266:	d0fb      	beq.n	80260 <SystemInit+0x68>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80268:	2212      	movs	r2, #18
   8026a:	4b06      	ldr	r3, [pc, #24]	; (80284 <SystemInit+0x8c>)
   8026c:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   8026e:	461a      	mov	r2, r3
   80270:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80272:	f013 0f08 	tst.w	r3, #8
   80276:	d0fb      	beq.n	80270 <SystemInit+0x78>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80278:	4a06      	ldr	r2, [pc, #24]	; (80294 <SystemInit+0x9c>)
   8027a:	4b07      	ldr	r3, [pc, #28]	; (80298 <SystemInit+0xa0>)
   8027c:	601a      	str	r2, [r3, #0]
   8027e:	4770      	bx	lr
   80280:	400e0a00 	.word	0x400e0a00
   80284:	400e0600 	.word	0x400e0600
   80288:	00370809 	.word	0x00370809
   8028c:	01370809 	.word	0x01370809
   80290:	200d3f01 	.word	0x200d3f01
   80294:	0501bd00 	.word	0x0501bd00
   80298:	20000000 	.word	0x20000000

0008029c <__libc_init_array>:
   8029c:	b570      	push	{r4, r5, r6, lr}
   8029e:	4e0f      	ldr	r6, [pc, #60]	; (802dc <__libc_init_array+0x40>)
   802a0:	4d0f      	ldr	r5, [pc, #60]	; (802e0 <__libc_init_array+0x44>)
   802a2:	1b76      	subs	r6, r6, r5
   802a4:	10b6      	asrs	r6, r6, #2
   802a6:	d007      	beq.n	802b8 <__libc_init_array+0x1c>
   802a8:	3d04      	subs	r5, #4
   802aa:	2400      	movs	r4, #0
   802ac:	3401      	adds	r4, #1
   802ae:	f855 3f04 	ldr.w	r3, [r5, #4]!
   802b2:	4798      	blx	r3
   802b4:	42a6      	cmp	r6, r4
   802b6:	d1f9      	bne.n	802ac <__libc_init_array+0x10>
   802b8:	4e0a      	ldr	r6, [pc, #40]	; (802e4 <__libc_init_array+0x48>)
   802ba:	4d0b      	ldr	r5, [pc, #44]	; (802e8 <__libc_init_array+0x4c>)
   802bc:	f000 f896 	bl	803ec <_init>
   802c0:	1b76      	subs	r6, r6, r5
   802c2:	10b6      	asrs	r6, r6, #2
   802c4:	d008      	beq.n	802d8 <__libc_init_array+0x3c>
   802c6:	3d04      	subs	r5, #4
   802c8:	2400      	movs	r4, #0
   802ca:	3401      	adds	r4, #1
   802cc:	f855 3f04 	ldr.w	r3, [r5, #4]!
   802d0:	4798      	blx	r3
   802d2:	42a6      	cmp	r6, r4
   802d4:	d1f9      	bne.n	802ca <__libc_init_array+0x2e>
   802d6:	bd70      	pop	{r4, r5, r6, pc}
   802d8:	bd70      	pop	{r4, r5, r6, pc}
   802da:	bf00      	nop
   802dc:	000803f8 	.word	0x000803f8
   802e0:	000803f8 	.word	0x000803f8
   802e4:	00080400 	.word	0x00080400
   802e8:	000803f8 	.word	0x000803f8

000802ec <register_fini>:
   802ec:	4b02      	ldr	r3, [pc, #8]	; (802f8 <register_fini+0xc>)
   802ee:	b113      	cbz	r3, 802f6 <register_fini+0xa>
   802f0:	4802      	ldr	r0, [pc, #8]	; (802fc <register_fini+0x10>)
   802f2:	f000 b805 	b.w	80300 <atexit>
   802f6:	4770      	bx	lr
   802f8:	00000000 	.word	0x00000000
   802fc:	0008030d 	.word	0x0008030d

00080300 <atexit>:
   80300:	4601      	mov	r1, r0
   80302:	2000      	movs	r0, #0
   80304:	4602      	mov	r2, r0
   80306:	4603      	mov	r3, r0
   80308:	f000 b818 	b.w	8033c <__register_exitproc>

0008030c <__libc_fini_array>:
   8030c:	b538      	push	{r3, r4, r5, lr}
   8030e:	4d09      	ldr	r5, [pc, #36]	; (80334 <__libc_fini_array+0x28>)
   80310:	4c09      	ldr	r4, [pc, #36]	; (80338 <__libc_fini_array+0x2c>)
   80312:	1b64      	subs	r4, r4, r5
   80314:	10a4      	asrs	r4, r4, #2
   80316:	bf18      	it	ne
   80318:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   8031c:	d005      	beq.n	8032a <__libc_fini_array+0x1e>
   8031e:	3c01      	subs	r4, #1
   80320:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80324:	4798      	blx	r3
   80326:	2c00      	cmp	r4, #0
   80328:	d1f9      	bne.n	8031e <__libc_fini_array+0x12>
   8032a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8032e:	f000 b867 	b.w	80400 <_fini>
   80332:	bf00      	nop
   80334:	0008040c 	.word	0x0008040c
   80338:	00080410 	.word	0x00080410

0008033c <__register_exitproc>:
   8033c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8033e:	4c27      	ldr	r4, [pc, #156]	; (803dc <__register_exitproc+0xa0>)
   80340:	b085      	sub	sp, #20
   80342:	6826      	ldr	r6, [r4, #0]
   80344:	4607      	mov	r7, r0
   80346:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8034a:	2c00      	cmp	r4, #0
   8034c:	d040      	beq.n	803d0 <__register_exitproc+0x94>
   8034e:	6865      	ldr	r5, [r4, #4]
   80350:	2d1f      	cmp	r5, #31
   80352:	dd1e      	ble.n	80392 <__register_exitproc+0x56>
   80354:	4822      	ldr	r0, [pc, #136]	; (803e0 <__register_exitproc+0xa4>)
   80356:	b918      	cbnz	r0, 80360 <__register_exitproc+0x24>
   80358:	f04f 30ff 	mov.w	r0, #4294967295
   8035c:	b005      	add	sp, #20
   8035e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80360:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80364:	9103      	str	r1, [sp, #12]
   80366:	9202      	str	r2, [sp, #8]
   80368:	9301      	str	r3, [sp, #4]
   8036a:	f3af 8000 	nop.w
   8036e:	9903      	ldr	r1, [sp, #12]
   80370:	4604      	mov	r4, r0
   80372:	9a02      	ldr	r2, [sp, #8]
   80374:	9b01      	ldr	r3, [sp, #4]
   80376:	2800      	cmp	r0, #0
   80378:	d0ee      	beq.n	80358 <__register_exitproc+0x1c>
   8037a:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   8037e:	2000      	movs	r0, #0
   80380:	6025      	str	r5, [r4, #0]
   80382:	6060      	str	r0, [r4, #4]
   80384:	4605      	mov	r5, r0
   80386:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8038a:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   8038e:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80392:	b93f      	cbnz	r7, 803a4 <__register_exitproc+0x68>
   80394:	1c6b      	adds	r3, r5, #1
   80396:	2000      	movs	r0, #0
   80398:	3502      	adds	r5, #2
   8039a:	6063      	str	r3, [r4, #4]
   8039c:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   803a0:	b005      	add	sp, #20
   803a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   803a4:	2601      	movs	r6, #1
   803a6:	40ae      	lsls	r6, r5
   803a8:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   803ac:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   803b0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   803b4:	2f02      	cmp	r7, #2
   803b6:	ea42 0206 	orr.w	r2, r2, r6
   803ba:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   803be:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   803c2:	d1e7      	bne.n	80394 <__register_exitproc+0x58>
   803c4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   803c8:	431e      	orrs	r6, r3
   803ca:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   803ce:	e7e1      	b.n	80394 <__register_exitproc+0x58>
   803d0:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   803d4:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   803d8:	e7b9      	b.n	8034e <__register_exitproc+0x12>
   803da:	bf00      	nop
   803dc:	000803e8 	.word	0x000803e8
   803e0:	00000000 	.word	0x00000000
   803e4:	00000043 	.word	0x00000043

000803e8 <_global_impure_ptr>:
   803e8:	20000008                                ... 

000803ec <_init>:
   803ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   803ee:	bf00      	nop
   803f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   803f2:	bc08      	pop	{r3}
   803f4:	469e      	mov	lr, r3
   803f6:	4770      	bx	lr

000803f8 <__init_array_start>:
   803f8:	000802ed 	.word	0x000802ed

000803fc <__frame_dummy_init_array_entry>:
   803fc:	00080119                                ....

00080400 <_fini>:
   80400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80402:	bf00      	nop
   80404:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80406:	bc08      	pop	{r3}
   80408:	469e      	mov	lr, r3
   8040a:	4770      	bx	lr

0008040c <__fini_array_start>:
   8040c:	000800f5 	.word	0x000800f5
