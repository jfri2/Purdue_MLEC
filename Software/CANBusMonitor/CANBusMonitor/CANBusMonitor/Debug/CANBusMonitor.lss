
CANBusMonitor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  000027dc  00002870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800230  00800230  000029a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000029a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00002a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a33  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025a  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b1  00000000  00000000  000037b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00003e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e3  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000078d  00000000  00000000  000047db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004f68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <__vector_17>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	72 03       	mulsu	r23, r18
      7e:	68 04       	cpc	r6, r8
      80:	52 05       	cpc	r21, r2
      82:	20 06       	cpc	r2, r16
      84:	a3 06       	cpc	r10, r19
      86:	33 07       	cpc	r19, r19
      88:	cd 07       	cpc	r28, r29
      8a:	f3 08       	sbc	r15, r3
      8c:	26 0a       	sbc	r2, r22
      8e:	63 0b       	sbc	r22, r19
      90:	19 0c       	add	r1, r9

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	12 e0       	ldi	r17, 0x02	; 2
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	ec ed       	ldi	r30, 0xDC	; 220
      a6:	f7 e2       	ldi	r31, 0x27	; 39
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 33       	cpi	r26, 0x30	; 48
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	22 e0       	ldi	r18, 0x02	; 2
      b6:	a0 e3       	ldi	r26, 0x30	; 48
      b8:	b2 e0       	ldi	r27, 0x02	; 2
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ac 36       	cpi	r26, 0x6C	; 108
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <main>
      c8:	0c 94 ec 13 	jmp	0x27d8	; 0x27d8 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <gpio_init>:
    }
    else //! mode = 1
    {
        brp  = Max ((((CANBT1 &  BRP_MSK) >> 1) +1) , BRP_MIN );
        prs  = Max ((((CANBT2 &  PRS_MSK) >> 1) +1) , PRS_MIN );
        phs1 = Max ((((CANBT3 & PHS1_MSK) >> 1) +1) , PHS1_MIN);
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	84 e2       	ldi	r24, 0x24	; 36
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
      e2:	87 e2       	ldi	r24, 0x27	; 39
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	27 e0       	ldi	r18, 0x07	; 7
      e8:	fc 01       	movw	r30, r24
      ea:	20 83       	st	Z, r18
      ec:	8a e2       	ldi	r24, 0x2A	; 42
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	2b ef       	ldi	r18, 0xFB	; 251
      f2:	fc 01       	movw	r30, r24
      f4:	20 83       	st	Z, r18
      f6:	87 e2       	ldi	r24, 0x27	; 39
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	27 e2       	ldi	r18, 0x27	; 39
        phs2 = Max ((((CANBT3 & PHS2_MSK) >> 4) +1) , PHS2_MIN);
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	f9 01       	movw	r30, r18
     100:	20 81       	ld	r18, Z
     102:	20 68       	ori	r18, 0x80	; 128
     104:	fc 01       	movw	r30, r24
     106:	20 83       	st	Z, r18
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <timer1_init>:
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	88 e8       	ldi	r24, 0x88	; 136
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	28 ee       	ldi	r18, 0xE8	; 232
     11c:	33 e0       	ldi	r19, 0x03	; 3
     11e:	fc 01       	movw	r30, r24
     120:	31 83       	std	Z+1, r19	; 0x01
     122:	20 83       	st	Z, r18
     124:	81 e8       	ldi	r24, 0x81	; 129
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	21 e8       	ldi	r18, 0x81	; 129
     12a:	30 e0       	ldi	r19, 0x00	; 0
     12c:	f9 01       	movw	r30, r18
     12e:	20 81       	ld	r18, Z
     130:	2a 60       	ori	r18, 0x0A	; 10
     132:	fc 01       	movw	r30, r24
     134:	20 83       	st	Z, r18
     136:	8f e6       	ldi	r24, 0x6F	; 111
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	2f e6       	ldi	r18, 0x6F	; 111
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	22 60       	ori	r18, 0x02	; 2
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
     148:	df 91       	pop	r29
        ntq  = Max ((prs + phs1 + phs2 + 1) , NTQ_MIN);
     14a:	cf 91       	pop	r28
     14c:	08 95       	ret

0000014e <uart_init>:
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	2a 97       	sbiw	r28, 0x0a	; 10
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	9a 83       	std	Y+2, r25	; 0x02
     168:	89 83       	std	Y+1, r24	; 0x01
     16a:	88 ec       	ldi	r24, 0xC8	; 200
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	2f e0       	ldi	r18, 0x0F	; 15
     170:	fc 01       	movw	r30, r24
        phs1_inc = evaluate = 1;   //! To enter in "while (evaluate ..." loop
     172:	20 83       	st	Z, r18
     174:	0e ec       	ldi	r16, 0xCE	; 206
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	89 81       	ldd	r24, Y+1	; 0x01
        try_conf = 0;       //! Look for the next configuration
     17a:	9a 81       	ldd	r25, Y+2	; 0x02
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
     17c:	9c 01       	movw	r18, r24
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	50 e0       	ldi	r21, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
     182:	80 e9       	ldi	r24, 0x90	; 144
     184:	90 ed       	ldi	r25, 0xD0	; 208
     186:	a3 e0       	ldi	r26, 0x03	; 3
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	bc 01       	movw	r22, r24
     18c:	cd 01       	movw	r24, r26
     18e:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
        Can_clear_mob();        //! All MOb Registers = 0x00
     192:	da 01       	movw	r26, r20
     194:	c9 01       	movw	r24, r18
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	a1 09       	sbc	r26, r1
     19a:	b1 09       	sbc	r27, r1
     19c:	89 2f       	mov	r24, r25
     19e:	9a 2f       	mov	r25, r26
     1a0:	ab 2f       	mov	r26, r27
     1a2:	bb 27       	eor	r27, r27
     1a4:	a7 fd       	sbrc	r26, 7
     1a6:	ba 95       	dec	r27
     1a8:	f8 01       	movw	r30, r16
     1aa:	80 83       	st	Z, r24
     1ac:	0d ec       	ldi	r16, 0xCD	; 205
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	9a 81       	ldd	r25, Y+2	; 0x02
     1b4:	9c 01       	movw	r18, r24
        try_conf = 0;       //! Look for the next configuration
        wait_for_rx = 0;    //! Skip "while (wait_for_rx ..." loop
    }

    //! --- Clear all MOb's (CANMSG not cleared)
    for (u8_temp0 = 0; u8_temp0 < NB_MOB; u8_temp0++)
     1b6:	40 e0       	ldi	r20, 0x00	; 0
     1b8:	50 e0       	ldi	r21, 0x00	; 0
     1ba:	80 e9       	ldi	r24, 0x90	; 144
     1bc:	90 ed       	ldi	r25, 0xD0	; 208
     1be:	a3 e0       	ldi	r26, 0x03	; 3
     1c0:	b0 e0       	ldi	r27, 0x00	; 0
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     1c2:	bc 01       	movw	r22, r24
    {
        if (try_conf == 1)
     1c4:	cd 01       	movw	r24, r26
     1c6:	0e 94 b7 10 	call	0x216e	; 0x216e <__divmodsi4>
     1ca:	da 01       	movw	r26, r20
        {
            Can_reset();
     1cc:	c9 01       	movw	r24, r18
     1ce:	81 50       	subi	r24, 0x01	; 1
     1d0:	f8 01       	movw	r30, r16
     1d2:	80 83       	st	Z, r24
     1d4:	80 e0       	ldi	r24, 0x00	; 0
            conf_index++;
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	90 93 69 02 	sts	0x0269, r25
     1dc:	80 93 68 02 	sts	0x0268, r24
            ovrtim_flag=0;
     1e0:	80 e0       	ldi	r24, 0x00	; 0

            //! --- CANBTx registers update (sjw = phs2/2, 3 sample points)
            CANBT1 = ((brp-1) << BRP);
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	90 93 67 02 	sts	0x0267, r25
     1e8:	80 93 66 02 	sts	0x0266, r24
     1ec:	2a 96       	adiw	r28, 0x0a	; 10
     1ee:	0f b6       	in	r0, 0x3f	; 63
            CANBT2 = (((phs2 >> 1)-1) << SJW) |((prs-1) << PRS);
     1f0:	f8 94       	cli
     1f2:	de bf       	out	0x3e, r29	; 62
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	cd bf       	out	0x3d, r28	; 61
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	1f 91       	pop	r17
     1fe:	0f 91       	pop	r16
     200:	08 95       	ret

00000202 <uart_SendByteStream>:
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	00 d0       	rcall	.+0      	; 0x208 <uart_SendByteStream+0x6>
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
     210:	7b 83       	std	Y+3, r23	; 0x03
     212:	6a 83       	std	Y+2, r22	; 0x02
     214:	00 00       	nop
     216:	89 ec       	ldi	r24, 0xC9	; 201
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	fc 01       	movw	r30, r24
     21c:	80 81       	ld	r24, Z
     21e:	88 2f       	mov	r24, r24
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	80 71       	andi	r24, 0x10	; 16
     224:	99 27       	eor	r25, r25
            CANBT3 = (((phs2-1) << PHS2) | ((phs1-1) << PHS1) | (1<<SMP));
     226:	89 2b       	or	r24, r25
     228:	b1 f7       	brne	.-20     	; 0x216 <uart_SendByteStream+0x14>
     22a:	82 ed       	ldi	r24, 0xD2	; 210
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	29 81       	ldd	r18, Y+1	; 0x01
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	df 91       	pop	r29
     23c:	cf 91       	pop	r28
     23e:	08 95       	ret

00000240 <uart_GetByteStream>:
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	00 d0       	rcall	.+0      	; 0x246 <uart_GetByteStream+0x6>
     246:	cd b7       	in	r28, 0x3d	; 61
     248:	de b7       	in	r29, 0x3e	; 62
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	89 83       	std	Y+1, r24	; 0x01
     24e:	00 00       	nop
     250:	89 ec       	ldi	r24, 0xC9	; 201
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	fc 01       	movw	r30, r24
     256:	80 81       	ld	r24, Z

            //! --- Set CAN-Timer - Used for time-out
            //!     There are 641 (0x281) possible evaluations. The first one provides the faster
            //!         the faster bit timing, the last one gives the slower. It is necessary to
            //!         modulate the time-out versus bit timing (0x281>>3=0x50, matching an U8).
            CANTCON = (uint8_t)(conf_index >> 3);
     258:	88 2f       	mov	r24, r24
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	80 71       	andi	r24, 0x10	; 16
     25e:	99 27       	eor	r25, r25
     260:	89 2b       	or	r24, r25
     262:	b1 f7       	brne	.-20     	; 0x250 <uart_GetByteStream+0x10>
     264:	82 ed       	ldi	r24, 0xD2	; 210
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	fc 01       	movw	r30, r24
     26a:	80 81       	ld	r24, Z
     26c:	0f 90       	pop	r0
     26e:	0f 90       	pop	r0

            //! --- MOb configuration
            Can_set_mob(MOB_0);                 //! Use MOb-0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <logEvent>:
     276:	cf 93       	push	r28
            CANSTMOB = 0;                       //! Reset MOb status (undone by "Can_reset()")
     278:	df 93       	push	r29
     27a:	00 d0       	rcall	.+0      	; 0x27c <logEvent+0x6>
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
            CANCDMOB = (MOB_Rx_ENA  << CONMOB); //! MOb 0 in receive mode
     280:	9a 83       	std	Y+2, r25	; 0x02
     282:	89 83       	std	Y+1, r24	; 0x01
     284:	e0 91 5d 02 	lds	r30, 0x025D
     288:	f0 91 5e 02 	lds	r31, 0x025E

            //! CAN controller configuration
            CANGCON = (1<<LISTEN) | (1<<ENASTB);//! Enable CAN controller in "listen" mode
     28c:	80 91 5f 02 	lds	r24, 0x025F
     290:	68 2f       	mov	r22, r24
     292:	70 e0       	ldi	r23, 0x00	; 0
            while ((CANGSTA & (1<<ENFG)) == 0); //! Wait for Enable OK
     294:	80 91 60 02 	lds	r24, 0x0260
     298:	48 2f       	mov	r20, r24
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	80 91 61 02 	lds	r24, 0x0261
     2a0:	28 2f       	mov	r18, r24
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	80 91 62 02 	lds	r24, 0x0262
     2a8:	90 91 63 02 	lds	r25, 0x0263
            CANGIT = 0xFF;                      //! Reset General errors and OVRTIM flag
     2ac:	af 2f       	mov	r26, r31
     2ae:	af 93       	push	r26
     2b0:	ef 93       	push	r30
     2b2:	e7 2f       	mov	r30, r23
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     2b4:	ef 93       	push	r30
        {
            u8_temp0 = CANSTMOB;
     2b6:	6f 93       	push	r22
     2b8:	65 2f       	mov	r22, r21
     2ba:	6f 93       	push	r22
     2bc:	4f 93       	push	r20
     2be:	43 2f       	mov	r20, r19
            //! --- RxOK received ?
            if ((u8_temp0 & (1<<RXOK)) != 0)
     2c0:	4f 93       	push	r20
     2c2:	2f 93       	push	r18
     2c4:	29 2f       	mov	r18, r25
     2c6:	2f 93       	push	r18
     2c8:	8f 93       	push	r24
     2ca:	86 e1       	ldi	r24, 0x16	; 22
     2cc:	91 e0       	ldi	r25, 0x01	; 1
            {   //! --- It is the successful output of "can_auto_baudrate" function
                wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     2ce:	89 2f       	mov	r24, r25
                evaluate = 0;       //! Will skip "while (evaluate ..." loop
     2d0:	8f 93       	push	r24
                bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     2d2:	86 e1       	ldi	r24, 0x16	; 22
                bt_performed = 1;   //! Return flag = TRUE
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	8f 93       	push	r24
                DISABLE_MOB;        //! Disable MOb-0
     2d8:	0e 94 21 11 	call	0x2242	; 0x2242 <printf>
     2dc:	8d b7       	in	r24, 0x3d	; 61
     2de:	9e b7       	in	r25, 0x3e	; 62
     2e0:	0c 96       	adiw	r24, 0x0c	; 12
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
                CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     2ea:	cd bf       	out	0x3d, r28	; 61
     2ec:	8a 81       	ldd	r24, Y+2	; 0x02
     2ee:	8f 93       	push	r24
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
                while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     2f2:	8f 93       	push	r24
     2f4:	0e 94 21 11 	call	0x2242	; 0x2242 <printf>
     2f8:	0f 90       	pop	r0
     2fa:	0f 90       	pop	r0
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <__vector_12>:
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
            }
             //! --- Else stop if any errors
             else
            {
                //! --- MOb error ?
                if ((u8_temp0 & ((1<<BERR)|(1<<SERR)|(1<<CERR)|(1<<FERR)|(1<<AERR))) !=0)
     30a:	00 90 5f 00 	lds	r0, 0x005F
     30e:	0f 92       	push	r0
     310:	11 24       	eor	r1, r1
     312:	2f 93       	push	r18
     314:	8f 93       	push	r24
     316:	9f 93       	push	r25
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     318:	cf 93       	push	r28
     31a:	df 93       	push	r29
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     31c:	cd b7       	in	r28, 0x3d	; 61
                }

                u8_temp0 = CANGIT;
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	80 91 30 02 	lds	r24, 0x0230
     324:	90 91 31 02 	lds	r25, 0x0231

                //! --- Time_out reached ?
                if ((u8_temp0 & (1<<OVRTIM)) !=0 )
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	90 93 31 02 	sts	0x0231, r25
     32e:	80 93 30 02 	sts	0x0230, r24
     332:	80 91 5d 02 	lds	r24, 0x025D
                {
                    if (ovrtim_flag==0)
     336:	90 91 5e 02 	lds	r25, 0x025E
     33a:	01 96       	adiw	r24, 0x01	; 1
                    {
                        //! --- First Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     33c:	90 93 5e 02 	sts	0x025E, r25
     340:	80 93 5d 02 	sts	0x025D, r24
     344:	80 91 5d 02 	lds	r24, 0x025D
     348:	90 91 5e 02 	lds	r25, 0x025E
     34c:	88 3e       	cpi	r24, 0xE8	; 232
                        ovrtim_flag++;
     34e:	93 40       	sbci	r25, 0x03	; 3
     350:	70 f1       	brcs	.+92     	; 0x3ae <__vector_12+0xa8>
     352:	80 91 5f 02 	lds	r24, 0x025F
                    }
                    else
                    {
                        //! --- Second Time_out
                        CANGIT |= (1<<OVRTIM);  // Reset OVRTIM
     356:	8f 5f       	subi	r24, 0xFF	; 255
     358:	80 93 5f 02 	sts	0x025F, r24
     35c:	10 92 5e 02 	sts	0x025E, r1
     360:	10 92 5d 02 	sts	0x025D, r1
     364:	80 91 5f 02 	lds	r24, 0x025F
                        evaluate = 1;           //! Will enter in "while (evaluate ..." loop
     368:	8c 33       	cpi	r24, 0x3C	; 60
     36a:	08 f1       	brcs	.+66     	; 0x3ae <__vector_12+0xa8>
                        wait_for_rx = 0;        //! Out of "while (wait_for_rx ..." loop
     36c:	80 91 60 02 	lds	r24, 0x0260
                    }
                }

                //! --- General error ?
                if ((u8_temp0 & ((1<<SERG)|(1<<CERG)|(1<<FERG)|(1<<AERG))) !=0)
     370:	8f 5f       	subi	r24, 0xFF	; 255
     372:	80 93 60 02 	sts	0x0260, r24
     376:	10 92 5f 02 	sts	0x025F, r1
     37a:	80 91 60 02 	lds	r24, 0x0260
                {
                    evaluate = 1;       //! Will enter in "while (evaluate ..." loop
     37e:	8c 33       	cpi	r24, 0x3C	; 60
                    wait_for_rx = 0;    //! Out of "while (wait_for_rx ..." loop
     380:	b0 f0       	brcs	.+44     	; 0x3ae <__vector_12+0xa8>
                    try_conf = 1;       //! Try this configuration
     382:	80 91 61 02 	lds	r24, 0x0261
        //! --- WAIT_FOR_RX LOOP:
        //!     ================
        //!     Try to perform a CAN message reception in "LISTEN" mode without error and
        //!     before a time_out done by CAN-Timer.
        //!     Else gives the hand to "EVALUATE LOOP" to have a new set of bit timing.
        while (wait_for_rx == 1)
     386:	8f 5f       	subi	r24, 0xFF	; 255
     388:	80 93 61 02 	sts	0x0261, r24
     38c:	10 92 60 02 	sts	0x0260, r1
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
        {
            if (phs1_inc != 0) phs1++;
     390:	80 91 61 02 	lds	r24, 0x0261
     394:	88 31       	cpi	r24, 0x18	; 24
     396:	58 f0       	brcs	.+22     	; 0x3ae <__vector_12+0xa8>
     398:	80 91 62 02 	lds	r24, 0x0262
            phs1_inc = 1;
     39c:	90 91 63 02 	lds	r25, 0x0263

            // --- The following test takes into account the previous incrementation of phs1
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	90 93 63 02 	sts	0x0263, r25
     3a6:	80 93 62 02 	sts	0x0262, r24
     3aa:	10 92 61 02 	sts	0x0261, r1
            {
                phs1 = PHS1_MIN;
     3ae:	df 91       	pop	r29
                phs2 = PHS2_MIN;
     3b0:	cf 91       	pop	r28
     3b2:	9f 91       	pop	r25
                phs1_inc = 0;
     3b4:	8f 91       	pop	r24
                if (ntq != NTQ_MAX) ntq++;
     3b6:	2f 91       	pop	r18
     3b8:	0f 90       	pop	r0
     3ba:	00 92 5f 00 	sts	0x005F, r0
     3be:	0f 90       	pop	r0
     3c0:	1f 90       	pop	r1
     3c2:	18 95       	reti

000003c4 <__vector_17>:
                else
                {
                    ntq = NTQ_MIN;
     3c4:	1f 92       	push	r1
     3c6:	0f 92       	push	r0
                    if (brp != BRP_MAX) brp++;
     3c8:	00 90 5f 00 	lds	r0, 0x005F
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	cd b7       	in	r28, 0x3d	; 61
                    else
                    {
                        //! --- It is the failing of "can_auto_baudrate" function
                        evaluate = 0;       //! Out of "while (evaluate ..." loop
     3d6:	de b7       	in	r29, 0x3e	; 62
                        bt_performed = 0;   //! Return flag = FALSE
     3d8:	df 91       	pop	r29
                        bt_not_found = 0;   //! Out of "while (bt_not_found ..." loop
     3da:	cf 91       	pop	r28
                        DISABLE_MOB;        //! Disable MOb-0
     3dc:	0f 90       	pop	r0
     3de:	00 92 5f 00 	sts	0x005F, r0
     3e2:	0f 90       	pop	r0
     3e4:	1f 90       	pop	r1
     3e6:	18 95       	reti

000003e8 <can_clear_all_mob>:
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <can_clear_all_mob+0x6>
                        CANGCON = 0x00;     //! Disable CAN controller & reset "listen" mode
     3ee:	1f 92       	push	r1
     3f0:	cd b7       	in	r28, 0x3d	; 61
     3f2:	de b7       	in	r29, 0x3e	; 62
     3f4:	19 82       	std	Y+1, r1	; 0x01
                        while ((CANGSTA & (1<<ENFG)) != 0); //! Wait for Disable OK
     3f6:	1d c0       	rjmp	.+58     	; 0x432 <can_clear_all_mob+0x4a>
     3f8:	8d ee       	ldi	r24, 0xED	; 237
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	29 81       	ldd	r18, Y+1	; 0x01
     3fe:	22 95       	swap	r18
     400:	20 7f       	andi	r18, 0xF0	; 240
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
     406:	8e ee       	ldi	r24, 0xEE	; 238
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	9b 83       	std	Y+3, r25	; 0x03
            if ((phs1 > PHS1_MAX) && (phs2 >= PHS2_MAX))
            {
                phs1 = PHS1_MIN;
                phs2 = PHS2_MIN;
                phs1_inc = 0;
                if (ntq != NTQ_MAX) ntq++;
     40c:	8a 83       	std	Y+2, r24	; 0x02
                }
            }
            else    // if (phs1 > PHS1_MAX ...
            {
                //! --- If psh1 > 5 then phs1 =phs2 or =phs2+1, else phs1=phs2
                if (phs1>5)
     40e:	09 c0       	rjmp	.+18     	; 0x422 <can_clear_all_mob+0x3a>
     410:	8a 81       	ldd	r24, Y+2	; 0x02
     412:	9b 81       	ldd	r25, Y+3	; 0x03
                {
                    if (phs1>(phs2+1)) phs1=(++phs2);
     414:	fc 01       	movw	r30, r24
     416:	10 82       	st	Z, r1
     418:	8a 81       	ldd	r24, Y+2	; 0x02
     41a:	9b 81       	ldd	r25, Y+3	; 0x03
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	9b 83       	std	Y+3, r25	; 0x03
     420:	8a 83       	std	Y+2, r24	; 0x02
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	9b 81       	ldd	r25, Y+3	; 0x03
     426:	88 3f       	cpi	r24, 0xF8	; 248
     428:	91 05       	cpc	r25, r1
     42a:	90 f3       	brcs	.-28     	; 0x410 <can_clear_all_mob+0x28>
     42c:	89 81       	ldd	r24, Y+1	; 0x01
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	89 83       	std	Y+1, r24	; 0x01
     432:	89 81       	ldd	r24, Y+1	; 0x01
                }
                else
                {
                phs2=phs1;
     434:	86 30       	cpi	r24, 0x06	; 6
     436:	00 f3       	brcs	.-64     	; 0x3f8 <can_clear_all_mob+0x10>
                }
                prs = ntq - ( phs1 + phs2 + 1 );
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <can_get_mob_free>:
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	00 d0       	rcall	.+0      	; 0x44a <can_get_mob_free+0x6>

                //! --- Test PRS limits
                if ((prs <= PRS_MAX) && (prs >= PRS_MIN))
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	8d ee       	ldi	r24, 0xED	; 237
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
                {
                    //! --- Values  accepted if  80% >= sampling point >= 75%
                    if (((phs2<<2) >= (1+prs+phs1)) && ((phs2+phs2+phs2) <= (1+prs+phs1)))
     456:	8a 83       	std	Y+2, r24	; 0x02
     458:	19 82       	std	Y+1, r1	; 0x01
     45a:	1b c0       	rjmp	.+54     	; 0x492 <can_get_mob_free+0x4e>
     45c:	8d ee       	ldi	r24, 0xED	; 237
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	29 81       	ldd	r18, Y+1	; 0x01
     462:	22 95       	swap	r18
     464:	20 7f       	andi	r18, 0xF0	; 240
     466:	fc 01       	movw	r30, r24
     468:	20 83       	st	Z, r18
     46a:	8f ee       	ldi	r24, 0xEF	; 239
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	fc 01       	movw	r30, r24
     470:	80 81       	ld	r24, Z
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	80 7c       	andi	r24, 0xC0	; 192
     478:	99 27       	eor	r25, r25
     47a:	89 2b       	or	r24, r25
     47c:	39 f4       	brne	.+14     	; 0x48c <can_get_mob_free+0x48>
     47e:	8d ee       	ldi	r24, 0xED	; 237
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	2a 81       	ldd	r18, Y+2	; 0x02
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <can_get_mob_free+0x60>
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	8f 5f       	subi	r24, 0xFF	; 255
     490:	89 83       	std	Y+1, r24	; 0x01
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	86 30       	cpi	r24, 0x06	; 6
     496:	10 f3       	brcs	.-60     	; 0x45c <can_get_mob_free+0x18>
     498:	8d ee       	ldi	r24, 0xED	; 237
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	2a 81       	ldd	r18, Y+2	; 0x02
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
     4a2:	8f ef       	ldi	r24, 0xFF	; 255
     4a4:	0f 90       	pop	r0
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <can_get_mob_status>:
     4ae:	cf 93       	push	r28
     4b0:	df 93       	push	r29
     4b2:	00 d0       	rcall	.+0      	; 0x4b4 <can_get_mob_status+0x6>
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
                    {
                        evaluate = 0;     //! Out of "while (evaluate ..." loop &
     4b8:	8f ee       	ldi	r24, 0xEF	; 239
                        wait_for_rx = 1;  //!    new "while (bt_not_found ..." loop
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	fc 01       	movw	r30, r24
        //!     then Phase2=Phase1 and if Phase1>5, Phase1 can be equal to Phase2 or
        //!     Phase2+1. After this, the number of TQ is increased up to its high
        //!     limit and after it is the Prescaler. During the computing high (80%)
        //!     and low (75%) limits of sampling point location are tested. SJW and
        //!     the number of sampling points are not calculated in this loop.
        while (evaluate == 1)
     4be:	80 81       	ld	r24, Z
     4c0:	88 2f       	mov	r24, r24
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	80 7c       	andi	r24, 0xC0	; 192
    {
        Can_set_mob(u8_temp0);  //! Page index
        Can_clear_mob();        //! All MOb Registers = 0x00
    }

    while (bt_not_found == 1)
     4c6:	99 27       	eor	r25, r25
     4c8:	89 2b       	or	r24, r25
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <can_get_mob_status+0x22>
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
                }
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
     4ce:	1c c0       	rjmp	.+56     	; 0x508 <can_get_mob_status+0x5a>
}
     4d0:	8e ee       	ldi	r24, 0xEE	; 238
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	fc 01       	movw	r30, r24
     4d6:	80 81       	ld	r24, Z
     4d8:	89 83       	std	Y+1, r24	; 0x01
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	80 7e       	andi	r24, 0xE0	; 224
     4de:	8a 83       	std	Y+2, r24	; 0x02
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
    // If MOb is ENABLE, test if MOb is COMPLETED
    // - MOb Status = 0x20 then MOB_RX_COMPLETED
    // - MOb Status = 0x40 then MOB_TX_COMPLETED
    // - MOb Status = 0xA0 then MOB_RX_COMPLETED_DLCW
    mob_status = canstmob_copy & ((1<<DLCW)|(1<<TXOK)|(1<<RXOK));
    if ( (mob_status==MOB_RX_COMPLETED) ||   \
     4e2:	80 32       	cpi	r24, 0x20	; 32
     4e4:	31 f0       	breq	.+12     	; 0x4f2 <can_get_mob_status+0x44>
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	80 34       	cpi	r24, 0x40	; 64
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <can_get_mob_status+0x44>
         (mob_status==MOB_TX_COMPLETED) ||   \
     4ec:	8a 81       	ldd	r24, Y+2	; 0x02
     4ee:	80 3a       	cpi	r24, 0xA0	; 160
     4f0:	11 f4       	brne	.+4      	; 0x4f6 <can_get_mob_status+0x48>
         (mob_status==MOB_RX_COMPLETED_DLCW) ) { return(mob_status); }
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	09 c0       	rjmp	.+18     	; 0x508 <can_get_mob_status+0x5a>
    // - MOb Status bit_0 = MOB_ACK_ERROR
    // - MOb Status bit_1 = MOB_FORM_ERROR
    // - MOb Status bit_2 = MOB_CRC_ERROR
    // - MOb Status bit_3 = MOB_STUFF_ERROR
    // - MOb Status bit_4 = MOB_BIT_ERROR
    mob_status = canstmob_copy & ERR_MOB_MSK;
     4f6:	89 81       	ldd	r24, Y+1	; 0x01
     4f8:	8f 71       	andi	r24, 0x1F	; 31
     4fa:	8a 83       	std	Y+2, r24	; 0x02
    if (mob_status != 0) { return(mob_status); }
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	88 23       	and	r24, r24
     500:	11 f0       	breq	.+4      	; 0x506 <can_get_mob_status+0x58>
     502:	8a 81       	ldd	r24, Y+2	; 0x02
     504:	01 c0       	rjmp	.+2      	; 0x508 <can_get_mob_status+0x5a>

    // If CANSTMOB = 0 then MOB_NOT_COMPLETED
    return(MOB_NOT_COMPLETED);
     506:	80 e0       	ldi	r24, 0x00	; 0
}
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret

00000512 <can_get_data>:
//! @param CAN message data address.
//!
//! @return none.
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	00 d0       	rcall	.+0      	; 0x518 <can_get_data+0x6>
     518:	1f 92       	push	r1
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	9b 83       	std	Y+3, r25	; 0x03
     520:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	10 c0       	rjmp	.+32     	; 0x546 <can_get_data+0x34>
    {
        *(p_can_message_data + data_index) = CANMSG;
     526:	89 81       	ldd	r24, Y+1	; 0x01
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	2a 81       	ldd	r18, Y+2	; 0x02
     52e:	3b 81       	ldd	r19, Y+3	; 0x03
     530:	82 0f       	add	r24, r18
     532:	93 1f       	adc	r25, r19
     534:	2a ef       	ldi	r18, 0xFA	; 250
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
void can_get_data(uint8_t* p_can_message_data)
{
    uint8_t data_index;

    for (data_index = 0; data_index < (Can_get_dlc()); data_index++)
     540:	89 81       	ldd	r24, Y+1	; 0x01
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	89 83       	std	Y+1, r24	; 0x01
     546:	89 81       	ldd	r24, Y+1	; 0x01
     548:	28 2f       	mov	r18, r24
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	8f ee       	ldi	r24, 0xEF	; 239
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	fc 01       	movw	r30, r24
     552:	80 81       	ld	r24, Z
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	8f 70       	andi	r24, 0x0F	; 15
     55a:	99 27       	eor	r25, r25
     55c:	28 17       	cp	r18, r24
     55e:	39 07       	cpc	r19, r25
     560:	14 f3       	brlt	.-60     	; 0x526 <can_get_data+0x14>
    {
        *(p_can_message_data + data_index) = CANMSG;
    }
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	1f 92       	push	r1
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     57a:	88 ed       	ldi	r24, 0xD8	; 216
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
    Can_conf_bt();
     584:	82 ee       	ldi	r24, 0xE2	; 226
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	22 e0       	ldi	r18, 0x02	; 2
     58a:	fc 01       	movw	r30, r24
     58c:	20 83       	st	Z, r18
     58e:	83 ee       	ldi	r24, 0xE3	; 227
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	24 e0       	ldi	r18, 0x04	; 4
     594:	fc 01       	movw	r30, r24
     596:	20 83       	st	Z, r18
     598:	84 ee       	ldi	r24, 0xE4	; 228
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	23 e1       	ldi	r18, 0x13	; 19
     59e:	fc 01       	movw	r30, r24
     5a0:	20 83       	st	Z, r18
    return 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0f 90       	pop	r0
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     5ac:	cf 93       	push	r28
     5ae:	df 93       	push	r29
     5b0:	1f 92       	push	r1
     5b2:	cd b7       	in	r28, 0x3d	; 61
     5b4:	de b7       	in	r29, 0x3e	; 62
     5b6:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     5b8:	89 81       	ldd	r24, Y+1	; 0x01
     5ba:	0e 94 b7 02 	call	0x56e	; 0x56e <can_fixed_baudrate>
     5be:	88 23       	and	r24, r24
     5c0:	11 f4       	brne	.+4      	; 0x5c6 <can_init+0x1a>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     5c6:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     5ca:	88 ed       	ldi	r24, 0xD8	; 216
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	28 ed       	ldi	r18, 0xD8	; 216
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	f9 01       	movw	r30, r18
     5d4:	20 81       	ld	r18, Z
     5d6:	22 60       	ori	r18, 0x02	; 2
     5d8:	fc 01       	movw	r30, r24
     5da:	20 83       	st	Z, r18
    return (1);
     5dc:	81 e0       	ldi	r24, 0x01	; 1
}
     5de:	0f 90       	pop	r0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	08 95       	ret

000005e6 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	2a 97       	sbiw	r28, 0x0a	; 10
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	9a 87       	std	Y+10, r25	; 0x0a
     5fc:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     5fe:	89 85       	ldd	r24, Y+9	; 0x09
     600:	9a 85       	ldd	r25, Y+10	; 0x0a
     602:	fc 01       	movw	r30, r24
     604:	81 81       	ldd	r24, Z+1	; 0x01
     606:	8c 30       	cpi	r24, 0x0C	; 12
     608:	39 f5       	brne	.+78     	; 0x658 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     60a:	89 85       	ldd	r24, Y+9	; 0x09
     60c:	9a 85       	ldd	r25, Y+10	; 0x0a
     60e:	fc 01       	movw	r30, r24
     610:	81 85       	ldd	r24, Z+9	; 0x09
     612:	80 36       	cpi	r24, 0x60	; 96
     614:	d9 f4       	brne	.+54     	; 0x64c <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     616:	8d ee       	ldi	r24, 0xED	; 237
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	29 85       	ldd	r18, Y+9	; 0x09
     61c:	3a 85       	ldd	r19, Y+10	; 0x0a
     61e:	f9 01       	movw	r30, r18
     620:	20 81       	ld	r18, Z
     622:	22 95       	swap	r18
     624:	20 7f       	andi	r18, 0xF0	; 240
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
      Can_mob_abort();
     62a:	8f ee       	ldi	r24, 0xEF	; 239
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	2f ee       	ldi	r18, 0xEF	; 239
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	f9 01       	movw	r30, r18
     634:	20 81       	ld	r18, Z
     636:	2f 73       	andi	r18, 0x3F	; 63
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     63c:	8e ee       	ldi	r24, 0xEE	; 238
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	fc 01       	movw	r30, r24
     642:	10 82       	st	Z, r1
      cmd->handle = 0;
     644:	89 85       	ldd	r24, Y+9	; 0x09
     646:	9a 85       	ldd	r25, Y+10	; 0x0a
     648:	fc 01       	movw	r30, r24
     64a:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     64c:	89 85       	ldd	r24, Y+9	; 0x09
     64e:	9a 85       	ldd	r25, Y+10	; 0x0a
     650:	fc 01       	movw	r30, r24
     652:	11 86       	std	Z+9, r1	; 0x09
     654:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__stack+0x11ff>
  }
  else
  {
    mob_handle = can_get_mob_free();
     658:	0e 94 22 02 	call	0x444	; 0x444 <can_get_mob_free>
     65c:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     65e:	8c 81       	ldd	r24, Y+4	; 0x04
     660:	8f 3f       	cpi	r24, 0xFF	; 255
     662:	11 f4       	brne	.+4      	; 0x668 <can_cmd+0x82>
     664:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__stack+0x11f1>
    {
      cmd->status = MOB_PENDING; 
     668:	89 85       	ldd	r24, Y+9	; 0x09
     66a:	9a 85       	ldd	r25, Y+10	; 0x0a
     66c:	20 e6       	ldi	r18, 0x60	; 96
     66e:	fc 01       	movw	r30, r24
     670:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	9a 85       	ldd	r25, Y+10	; 0x0a
     676:	2c 81       	ldd	r18, Y+4	; 0x04
     678:	fc 01       	movw	r30, r24
     67a:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     67c:	8d ee       	ldi	r24, 0xED	; 237
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	2c 81       	ldd	r18, Y+4	; 0x04
     682:	22 95       	swap	r18
     684:	20 7f       	andi	r18, 0xF0	; 240
     686:	fc 01       	movw	r30, r24
     688:	20 83       	st	Z, r18
      Can_clear_mob();
     68a:	8e ee       	ldi	r24, 0xEE	; 238
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	9b 83       	std	Y+3, r25	; 0x03
     690:	8a 83       	std	Y+2, r24	; 0x02
     692:	09 c0       	rjmp	.+18     	; 0x6a6 <can_cmd+0xc0>
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	9b 81       	ldd	r25, Y+3	; 0x03
     698:	fc 01       	movw	r30, r24
     69a:	10 82       	st	Z, r1
     69c:	8a 81       	ldd	r24, Y+2	; 0x02
     69e:	9b 81       	ldd	r25, Y+3	; 0x03
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	9b 83       	std	Y+3, r25	; 0x03
     6a4:	8a 83       	std	Y+2, r24	; 0x02
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	9b 81       	ldd	r25, Y+3	; 0x03
     6aa:	88 3f       	cpi	r24, 0xF8	; 248
     6ac:	91 05       	cpc	r25, r1
     6ae:	90 f3       	brcs	.-28     	; 0x694 <can_cmd+0xae>
          
      switch (cmd->cmd)
     6b0:	89 85       	ldd	r24, Y+9	; 0x09
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	fc 01       	movw	r30, r24
     6b6:	81 81       	ldd	r24, Z+1	; 0x01
     6b8:	88 2f       	mov	r24, r24
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	09 2e       	mov	r0, r25
     6be:	00 0c       	add	r0, r0
     6c0:	aa 0b       	sbc	r26, r26
     6c2:	bb 0b       	sbc	r27, r27
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	2a e0       	ldi	r18, 0x0A	; 10
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	84 1b       	sub	r24, r20
     6ce:	95 0b       	sbc	r25, r21
     6d0:	28 17       	cp	r18, r24
     6d2:	39 07       	cpc	r19, r25
     6d4:	10 f4       	brcc	.+4      	; 0x6da <can_cmd+0xf4>
     6d6:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__stack+0x11e5>
     6da:	82 5c       	subi	r24, 0xC2	; 194
     6dc:	9f 4f       	sbci	r25, 0xFF	; 255
     6de:	fc 01       	movw	r30, r24
     6e0:	0c 94 d6 10 	jmp	0x21ac	; 0x21ac <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     6e4:	89 85       	ldd	r24, Y+9	; 0x09
     6e6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e8:	fc 01       	movw	r30, r24
     6ea:	83 85       	ldd	r24, Z+11	; 0x0b
     6ec:	88 23       	and	r24, r24
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <can_cmd+0x10c>
     6f0:	69 c0       	rjmp	.+210    	; 0x7c4 <can_cmd+0x1de>
     6f2:	83 ef       	ldi	r24, 0xF3	; 243
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	29 85       	ldd	r18, Y+9	; 0x09
     6f8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6fa:	2e 5f       	subi	r18, 0xFE	; 254
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
     6fe:	2d 5f       	subi	r18, 0xFD	; 253
     700:	3f 4f       	sbci	r19, 0xFF	; 255
     702:	f9 01       	movw	r30, r18
     704:	20 81       	ld	r18, Z
     706:	42 2f       	mov	r20, r18
     708:	44 0f       	add	r20, r20
     70a:	44 0f       	add	r20, r20
     70c:	44 0f       	add	r20, r20
     70e:	29 85       	ldd	r18, Y+9	; 0x09
     710:	3a 85       	ldd	r19, Y+10	; 0x0a
     712:	2e 5f       	subi	r18, 0xFE	; 254
     714:	3f 4f       	sbci	r19, 0xFF	; 255
     716:	2e 5f       	subi	r18, 0xFE	; 254
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	f9 01       	movw	r30, r18
     71c:	20 81       	ld	r18, Z
     71e:	22 95       	swap	r18
     720:	26 95       	lsr	r18
     722:	27 70       	andi	r18, 0x07	; 7
     724:	24 0f       	add	r18, r20
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
     72a:	82 ef       	ldi	r24, 0xF2	; 242
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	29 85       	ldd	r18, Y+9	; 0x09
     730:	3a 85       	ldd	r19, Y+10	; 0x0a
     732:	2e 5f       	subi	r18, 0xFE	; 254
     734:	3f 4f       	sbci	r19, 0xFF	; 255
     736:	2e 5f       	subi	r18, 0xFE	; 254
     738:	3f 4f       	sbci	r19, 0xFF	; 255
     73a:	f9 01       	movw	r30, r18
     73c:	20 81       	ld	r18, Z
     73e:	42 2f       	mov	r20, r18
     740:	44 0f       	add	r20, r20
     742:	44 0f       	add	r20, r20
     744:	44 0f       	add	r20, r20
     746:	29 85       	ldd	r18, Y+9	; 0x09
     748:	3a 85       	ldd	r19, Y+10	; 0x0a
     74a:	2e 5f       	subi	r18, 0xFE	; 254
     74c:	3f 4f       	sbci	r19, 0xFF	; 255
     74e:	2f 5f       	subi	r18, 0xFF	; 255
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	f9 01       	movw	r30, r18
     754:	20 81       	ld	r18, Z
     756:	22 95       	swap	r18
     758:	26 95       	lsr	r18
     75a:	27 70       	andi	r18, 0x07	; 7
     75c:	24 0f       	add	r18, r20
     75e:	fc 01       	movw	r30, r24
     760:	20 83       	st	Z, r18
     762:	81 ef       	ldi	r24, 0xF1	; 241
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	29 85       	ldd	r18, Y+9	; 0x09
     768:	3a 85       	ldd	r19, Y+10	; 0x0a
     76a:	2e 5f       	subi	r18, 0xFE	; 254
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	3f 4f       	sbci	r19, 0xFF	; 255
     772:	f9 01       	movw	r30, r18
     774:	20 81       	ld	r18, Z
     776:	42 2f       	mov	r20, r18
     778:	44 0f       	add	r20, r20
     77a:	44 0f       	add	r20, r20
     77c:	44 0f       	add	r20, r20
     77e:	29 85       	ldd	r18, Y+9	; 0x09
     780:	3a 85       	ldd	r19, Y+10	; 0x0a
     782:	2e 5f       	subi	r18, 0xFE	; 254
     784:	3f 4f       	sbci	r19, 0xFF	; 255
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	22 95       	swap	r18
     78c:	26 95       	lsr	r18
     78e:	27 70       	andi	r18, 0x07	; 7
     790:	24 0f       	add	r18, r20
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
     796:	80 ef       	ldi	r24, 0xF0	; 240
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	29 85       	ldd	r18, Y+9	; 0x09
     79c:	3a 85       	ldd	r19, Y+10	; 0x0a
     79e:	2e 5f       	subi	r18, 0xFE	; 254
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	f9 01       	movw	r30, r18
     7a4:	20 81       	ld	r18, Z
     7a6:	22 0f       	add	r18, r18
     7a8:	22 0f       	add	r18, r18
     7aa:	22 0f       	add	r18, r18
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	8f ee       	ldi	r24, 0xEF	; 239
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	2f ee       	ldi	r18, 0xEF	; 239
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	f9 01       	movw	r30, r18
     7ba:	20 81       	ld	r18, Z
     7bc:	20 61       	ori	r18, 0x10	; 16
     7be:	fc 01       	movw	r30, r24
     7c0:	20 83       	st	Z, r18
     7c2:	30 c0       	rjmp	.+96     	; 0x824 <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     7c4:	83 ef       	ldi	r24, 0xF3	; 243
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	29 85       	ldd	r18, Y+9	; 0x09
     7ca:	3a 85       	ldd	r19, Y+10	; 0x0a
     7cc:	2e 5f       	subi	r18, 0xFE	; 254
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
     7d4:	f9 01       	movw	r30, r18
     7d6:	20 81       	ld	r18, Z
     7d8:	42 2f       	mov	r20, r18
     7da:	42 95       	swap	r20
     7dc:	44 0f       	add	r20, r20
     7de:	40 7e       	andi	r20, 0xE0	; 224
     7e0:	29 85       	ldd	r18, Y+9	; 0x09
     7e2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7e4:	2e 5f       	subi	r18, 0xFE	; 254
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	f9 01       	movw	r30, r18
     7ea:	20 81       	ld	r18, Z
     7ec:	26 95       	lsr	r18
     7ee:	26 95       	lsr	r18
     7f0:	26 95       	lsr	r18
     7f2:	24 0f       	add	r18, r20
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	82 ef       	ldi	r24, 0xF2	; 242
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	29 85       	ldd	r18, Y+9	; 0x09
     7fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     800:	2e 5f       	subi	r18, 0xFE	; 254
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	22 95       	swap	r18
     80a:	22 0f       	add	r18, r18
     80c:	20 7e       	andi	r18, 0xE0	; 224
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
     812:	8f ee       	ldi	r24, 0xEF	; 239
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	2f ee       	ldi	r18, 0xEF	; 239
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	2f 7e       	andi	r18, 0xEF	; 239
     820:	fc 01       	movw	r30, r24
     822:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     824:	19 82       	std	Y+1, r1	; 0x01
     826:	13 c0       	rjmp	.+38     	; 0x84e <can_cmd+0x268>
     828:	8a ef       	ldi	r24, 0xFA	; 250
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	29 85       	ldd	r18, Y+9	; 0x09
     82e:	3a 85       	ldd	r19, Y+10	; 0x0a
     830:	f9 01       	movw	r30, r18
     832:	47 81       	ldd	r20, Z+7	; 0x07
     834:	50 85       	ldd	r21, Z+8	; 0x08
     836:	29 81       	ldd	r18, Y+1	; 0x01
     838:	22 2f       	mov	r18, r18
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	24 0f       	add	r18, r20
     83e:	35 1f       	adc	r19, r21
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	fc 01       	movw	r30, r24
     846:	20 83       	st	Z, r18
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	8f 5f       	subi	r24, 0xFF	; 255
     84c:	89 83       	std	Y+1, r24	; 0x01
     84e:	89 85       	ldd	r24, Y+9	; 0x09
     850:	9a 85       	ldd	r25, Y+10	; 0x0a
     852:	fc 01       	movw	r30, r24
     854:	96 81       	ldd	r25, Z+6	; 0x06
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	89 17       	cp	r24, r25
     85a:	30 f3       	brcs	.-52     	; 0x828 <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     85c:	89 85       	ldd	r24, Y+9	; 0x09
     85e:	9a 85       	ldd	r25, Y+10	; 0x0a
     860:	fc 01       	movw	r30, r24
     862:	82 85       	ldd	r24, Z+10	; 0x0a
     864:	88 23       	and	r24, r24
     866:	51 f0       	breq	.+20     	; 0x87c <can_cmd+0x296>
     868:	80 ef       	ldi	r24, 0xF0	; 240
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	20 ef       	ldi	r18, 0xF0	; 240
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	24 60       	ori	r18, 0x04	; 4
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
     87a:	09 c0       	rjmp	.+18     	; 0x88e <can_cmd+0x2a8>
            else Can_clear_rtr();    
     87c:	80 ef       	ldi	r24, 0xF0	; 240
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	20 ef       	ldi	r18, 0xF0	; 240
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	2b 7f       	andi	r18, 0xFB	; 251
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     88e:	8f ee       	ldi	r24, 0xEF	; 239
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	2f ee       	ldi	r18, 0xEF	; 239
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	40 81       	ld	r20, Z
     89a:	29 85       	ldd	r18, Y+9	; 0x09
     89c:	3a 85       	ldd	r19, Y+10	; 0x0a
     89e:	f9 01       	movw	r30, r18
     8a0:	26 81       	ldd	r18, Z+6	; 0x06
     8a2:	24 2b       	or	r18, r20
     8a4:	fc 01       	movw	r30, r24
     8a6:	20 83       	st	Z, r18
          Can_config_tx();
     8a8:	8f ee       	ldi	r24, 0xEF	; 239
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	2f ee       	ldi	r18, 0xEF	; 239
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	f9 01       	movw	r30, r18
     8b2:	20 81       	ld	r18, Z
     8b4:	2f 73       	andi	r18, 0x3F	; 63
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 83       	st	Z, r18
     8ba:	8f ee       	ldi	r24, 0xEF	; 239
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	2f ee       	ldi	r18, 0xEF	; 239
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	f9 01       	movw	r30, r18
     8c4:	20 81       	ld	r18, Z
     8c6:	20 64       	ori	r18, 0x40	; 64
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
          break;
     8cc:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     8d0:	89 85       	ldd	r24, Y+9	; 0x09
     8d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8d4:	fc 01       	movw	r30, r24
     8d6:	83 85       	ldd	r24, Z+11	; 0x0b
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <can_cmd+0x2f8>
     8dc:	69 c0       	rjmp	.+210    	; 0x9b0 <__stack+0xb1>
     8de:	83 ef       	ldi	r24, 0xF3	; 243
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	29 85       	ldd	r18, Y+9	; 0x09
     8e4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8e6:	2e 5f       	subi	r18, 0xFE	; 254
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	2d 5f       	subi	r18, 0xFD	; 253
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	f9 01       	movw	r30, r18
     8f0:	20 81       	ld	r18, Z
     8f2:	42 2f       	mov	r20, r18
     8f4:	44 0f       	add	r20, r20
     8f6:	44 0f       	add	r20, r20
     8f8:	44 0f       	add	r20, r20
     8fa:	29 85       	ldd	r18, Y+9	; 0x09
     8fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     8fe:	2e 5f       	subi	r18, 0xFE	; 254
     900:	3f 4f       	sbci	r19, 0xFF	; 255
     902:	2e 5f       	subi	r18, 0xFE	; 254
     904:	3f 4f       	sbci	r19, 0xFF	; 255
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	22 95       	swap	r18
     90c:	26 95       	lsr	r18
     90e:	27 70       	andi	r18, 0x07	; 7
     910:	24 0f       	add	r18, r20
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
     916:	82 ef       	ldi	r24, 0xF2	; 242
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	29 85       	ldd	r18, Y+9	; 0x09
     91c:	3a 85       	ldd	r19, Y+10	; 0x0a
     91e:	2e 5f       	subi	r18, 0xFE	; 254
     920:	3f 4f       	sbci	r19, 0xFF	; 255
     922:	2e 5f       	subi	r18, 0xFE	; 254
     924:	3f 4f       	sbci	r19, 0xFF	; 255
     926:	f9 01       	movw	r30, r18
     928:	20 81       	ld	r18, Z
     92a:	42 2f       	mov	r20, r18
     92c:	44 0f       	add	r20, r20
     92e:	44 0f       	add	r20, r20
     930:	44 0f       	add	r20, r20
     932:	29 85       	ldd	r18, Y+9	; 0x09
     934:	3a 85       	ldd	r19, Y+10	; 0x0a
     936:	2e 5f       	subi	r18, 0xFE	; 254
     938:	3f 4f       	sbci	r19, 0xFF	; 255
     93a:	2f 5f       	subi	r18, 0xFF	; 255
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	f9 01       	movw	r30, r18
     940:	20 81       	ld	r18, Z
     942:	22 95       	swap	r18
     944:	26 95       	lsr	r18
     946:	27 70       	andi	r18, 0x07	; 7
     948:	24 0f       	add	r18, r20
     94a:	fc 01       	movw	r30, r24
     94c:	20 83       	st	Z, r18
     94e:	81 ef       	ldi	r24, 0xF1	; 241
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	29 85       	ldd	r18, Y+9	; 0x09
     954:	3a 85       	ldd	r19, Y+10	; 0x0a
     956:	2e 5f       	subi	r18, 0xFE	; 254
     958:	3f 4f       	sbci	r19, 0xFF	; 255
     95a:	2f 5f       	subi	r18, 0xFF	; 255
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	42 2f       	mov	r20, r18
     964:	44 0f       	add	r20, r20
     966:	44 0f       	add	r20, r20
     968:	44 0f       	add	r20, r20
     96a:	29 85       	ldd	r18, Y+9	; 0x09
     96c:	3a 85       	ldd	r19, Y+10	; 0x0a
     96e:	2e 5f       	subi	r18, 0xFE	; 254
     970:	3f 4f       	sbci	r19, 0xFF	; 255
     972:	f9 01       	movw	r30, r18
     974:	20 81       	ld	r18, Z
     976:	22 95       	swap	r18
     978:	26 95       	lsr	r18
     97a:	27 70       	andi	r18, 0x07	; 7
     97c:	24 0f       	add	r18, r20
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
     982:	80 ef       	ldi	r24, 0xF0	; 240
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	29 85       	ldd	r18, Y+9	; 0x09
     988:	3a 85       	ldd	r19, Y+10	; 0x0a
     98a:	2e 5f       	subi	r18, 0xFE	; 254
     98c:	3f 4f       	sbci	r19, 0xFF	; 255
     98e:	f9 01       	movw	r30, r18
     990:	20 81       	ld	r18, Z
     992:	22 0f       	add	r18, r18
     994:	22 0f       	add	r18, r18
     996:	22 0f       	add	r18, r18
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
     99c:	8f ee       	ldi	r24, 0xEF	; 239
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	2f ee       	ldi	r18, 0xEF	; 239
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	20 81       	ld	r18, Z
     9a8:	20 61       	ori	r18, 0x10	; 16
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
     9ae:	30 c0       	rjmp	.+96     	; 0xa10 <__stack+0x111>
          else              { Can_set_std_id(cmd->id.std);}
     9b0:	83 ef       	ldi	r24, 0xF3	; 243
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	29 85       	ldd	r18, Y+9	; 0x09
     9b6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9b8:	2e 5f       	subi	r18, 0xFE	; 254
     9ba:	3f 4f       	sbci	r19, 0xFF	; 255
     9bc:	2f 5f       	subi	r18, 0xFF	; 255
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	f9 01       	movw	r30, r18
     9c2:	20 81       	ld	r18, Z
     9c4:	42 2f       	mov	r20, r18
     9c6:	42 95       	swap	r20
     9c8:	44 0f       	add	r20, r20
     9ca:	40 7e       	andi	r20, 0xE0	; 224
     9cc:	29 85       	ldd	r18, Y+9	; 0x09
     9ce:	3a 85       	ldd	r19, Y+10	; 0x0a
     9d0:	2e 5f       	subi	r18, 0xFE	; 254
     9d2:	3f 4f       	sbci	r19, 0xFF	; 255
     9d4:	f9 01       	movw	r30, r18
     9d6:	20 81       	ld	r18, Z
     9d8:	26 95       	lsr	r18
     9da:	26 95       	lsr	r18
     9dc:	26 95       	lsr	r18
     9de:	24 0f       	add	r18, r20
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	82 ef       	ldi	r24, 0xF2	; 242
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	29 85       	ldd	r18, Y+9	; 0x09
     9ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ec:	2e 5f       	subi	r18, 0xFE	; 254
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	f9 01       	movw	r30, r18
     9f2:	20 81       	ld	r18, Z
     9f4:	22 95       	swap	r18
     9f6:	22 0f       	add	r18, r18
     9f8:	20 7e       	andi	r18, 0xE0	; 224
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	8f ee       	ldi	r24, 0xEF	; 239
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	2f ee       	ldi	r18, 0xEF	; 239
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	f9 01       	movw	r30, r18
     a08:	20 81       	ld	r18, Z
     a0a:	2f 7e       	andi	r18, 0xEF	; 239
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     a10:	19 82       	std	Y+1, r1	; 0x01
     a12:	13 c0       	rjmp	.+38     	; 0xa3a <__stack+0x13b>
     a14:	8a ef       	ldi	r24, 0xFA	; 250
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	29 85       	ldd	r18, Y+9	; 0x09
     a1a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a1c:	f9 01       	movw	r30, r18
     a1e:	47 81       	ldd	r20, Z+7	; 0x07
     a20:	50 85       	ldd	r21, Z+8	; 0x08
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	22 2f       	mov	r18, r18
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	24 0f       	add	r18, r20
     a2a:	35 1f       	adc	r19, r21
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	fc 01       	movw	r30, r24
     a32:	20 83       	st	Z, r18
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	8f 5f       	subi	r24, 0xFF	; 255
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	89 85       	ldd	r24, Y+9	; 0x09
     a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a3e:	fc 01       	movw	r30, r24
     a40:	96 81       	ldd	r25, Z+6	; 0x06
     a42:	89 81       	ldd	r24, Y+1	; 0x01
     a44:	89 17       	cp	r24, r25
     a46:	30 f3       	brcs	.-52     	; 0xa14 <__stack+0x115>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     a48:	89 85       	ldd	r24, Y+9	; 0x09
     a4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     a4c:	fc 01       	movw	r30, r24
     a4e:	12 86       	std	Z+10, r1	; 0x0a
     a50:	80 ef       	ldi	r24, 0xF0	; 240
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	20 ef       	ldi	r18, 0xF0	; 240
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	f9 01       	movw	r30, r18
     a5a:	20 81       	ld	r18, Z
     a5c:	2b 7f       	andi	r18, 0xFB	; 251
     a5e:	fc 01       	movw	r30, r24
     a60:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a62:	8f ee       	ldi	r24, 0xEF	; 239
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	2f ee       	ldi	r18, 0xEF	; 239
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	f9 01       	movw	r30, r18
     a6c:	40 81       	ld	r20, Z
     a6e:	29 85       	ldd	r18, Y+9	; 0x09
     a70:	3a 85       	ldd	r19, Y+10	; 0x0a
     a72:	f9 01       	movw	r30, r18
     a74:	26 81       	ldd	r18, Z+6	; 0x06
     a76:	24 2b       	or	r18, r20
     a78:	fc 01       	movw	r30, r24
     a7a:	20 83       	st	Z, r18
          Can_config_tx();
     a7c:	8f ee       	ldi	r24, 0xEF	; 239
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	2f ee       	ldi	r18, 0xEF	; 239
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	2f 73       	andi	r18, 0x3F	; 63
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 83       	st	Z, r18
     a8e:	8f ee       	ldi	r24, 0xEF	; 239
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	2f ee       	ldi	r18, 0xEF	; 239
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	f9 01       	movw	r30, r18
     a98:	20 81       	ld	r18, Z
     a9a:	20 64       	ori	r18, 0x40	; 64
     a9c:	fc 01       	movw	r30, r24
     a9e:	20 83       	st	Z, r18
          break;
     aa0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     aa4:	89 85       	ldd	r24, Y+9	; 0x09
     aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
     aa8:	fc 01       	movw	r30, r24
     aaa:	83 85       	ldd	r24, Z+11	; 0x0b
     aac:	88 23       	and	r24, r24
     aae:	09 f4       	brne	.+2      	; 0xab2 <__stack+0x1b3>
     ab0:	69 c0       	rjmp	.+210    	; 0xb84 <__stack+0x285>
     ab2:	83 ef       	ldi	r24, 0xF3	; 243
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	2e 5f       	subi	r18, 0xFE	; 254
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	2d 5f       	subi	r18, 0xFD	; 253
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	f9 01       	movw	r30, r18
     ac4:	20 81       	ld	r18, Z
     ac6:	42 2f       	mov	r20, r18
     ac8:	44 0f       	add	r20, r20
     aca:	44 0f       	add	r20, r20
     acc:	44 0f       	add	r20, r20
     ace:	29 85       	ldd	r18, Y+9	; 0x09
     ad0:	3a 85       	ldd	r19, Y+10	; 0x0a
     ad2:	2e 5f       	subi	r18, 0xFE	; 254
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	2e 5f       	subi	r18, 0xFE	; 254
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	f9 01       	movw	r30, r18
     adc:	20 81       	ld	r18, Z
     ade:	22 95       	swap	r18
     ae0:	26 95       	lsr	r18
     ae2:	27 70       	andi	r18, 0x07	; 7
     ae4:	24 0f       	add	r18, r20
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	82 ef       	ldi	r24, 0xF2	; 242
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	29 85       	ldd	r18, Y+9	; 0x09
     af0:	3a 85       	ldd	r19, Y+10	; 0x0a
     af2:	2e 5f       	subi	r18, 0xFE	; 254
     af4:	3f 4f       	sbci	r19, 0xFF	; 255
     af6:	2e 5f       	subi	r18, 0xFE	; 254
     af8:	3f 4f       	sbci	r19, 0xFF	; 255
     afa:	f9 01       	movw	r30, r18
     afc:	20 81       	ld	r18, Z
     afe:	42 2f       	mov	r20, r18
     b00:	44 0f       	add	r20, r20
     b02:	44 0f       	add	r20, r20
     b04:	44 0f       	add	r20, r20
     b06:	29 85       	ldd	r18, Y+9	; 0x09
     b08:	3a 85       	ldd	r19, Y+10	; 0x0a
     b0a:	2e 5f       	subi	r18, 0xFE	; 254
     b0c:	3f 4f       	sbci	r19, 0xFF	; 255
     b0e:	2f 5f       	subi	r18, 0xFF	; 255
     b10:	3f 4f       	sbci	r19, 0xFF	; 255
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	22 95       	swap	r18
     b18:	26 95       	lsr	r18
     b1a:	27 70       	andi	r18, 0x07	; 7
     b1c:	24 0f       	add	r18, r20
     b1e:	fc 01       	movw	r30, r24
     b20:	20 83       	st	Z, r18
     b22:	81 ef       	ldi	r24, 0xF1	; 241
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	29 85       	ldd	r18, Y+9	; 0x09
     b28:	3a 85       	ldd	r19, Y+10	; 0x0a
     b2a:	2e 5f       	subi	r18, 0xFE	; 254
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	2f 5f       	subi	r18, 0xFF	; 255
     b30:	3f 4f       	sbci	r19, 0xFF	; 255
     b32:	f9 01       	movw	r30, r18
     b34:	20 81       	ld	r18, Z
     b36:	42 2f       	mov	r20, r18
     b38:	44 0f       	add	r20, r20
     b3a:	44 0f       	add	r20, r20
     b3c:	44 0f       	add	r20, r20
     b3e:	29 85       	ldd	r18, Y+9	; 0x09
     b40:	3a 85       	ldd	r19, Y+10	; 0x0a
     b42:	2e 5f       	subi	r18, 0xFE	; 254
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	22 95       	swap	r18
     b4c:	26 95       	lsr	r18
     b4e:	27 70       	andi	r18, 0x07	; 7
     b50:	24 0f       	add	r18, r20
     b52:	fc 01       	movw	r30, r24
     b54:	20 83       	st	Z, r18
     b56:	80 ef       	ldi	r24, 0xF0	; 240
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	29 85       	ldd	r18, Y+9	; 0x09
     b5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b5e:	2e 5f       	subi	r18, 0xFE	; 254
     b60:	3f 4f       	sbci	r19, 0xFF	; 255
     b62:	f9 01       	movw	r30, r18
     b64:	20 81       	ld	r18, Z
     b66:	22 0f       	add	r18, r18
     b68:	22 0f       	add	r18, r18
     b6a:	22 0f       	add	r18, r18
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
     b70:	8f ee       	ldi	r24, 0xEF	; 239
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	2f ee       	ldi	r18, 0xEF	; 239
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	f9 01       	movw	r30, r18
     b7a:	20 81       	ld	r18, Z
     b7c:	20 61       	ori	r18, 0x10	; 16
     b7e:	fc 01       	movw	r30, r24
     b80:	20 83       	st	Z, r18
     b82:	30 c0       	rjmp	.+96     	; 0xbe4 <__stack+0x2e5>
          else              { Can_set_std_id(cmd->id.std);}
     b84:	83 ef       	ldi	r24, 0xF3	; 243
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	29 85       	ldd	r18, Y+9	; 0x09
     b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b8c:	2e 5f       	subi	r18, 0xFE	; 254
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	f9 01       	movw	r30, r18
     b96:	20 81       	ld	r18, Z
     b98:	42 2f       	mov	r20, r18
     b9a:	42 95       	swap	r20
     b9c:	44 0f       	add	r20, r20
     b9e:	40 7e       	andi	r20, 0xE0	; 224
     ba0:	29 85       	ldd	r18, Y+9	; 0x09
     ba2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ba4:	2e 5f       	subi	r18, 0xFE	; 254
     ba6:	3f 4f       	sbci	r19, 0xFF	; 255
     ba8:	f9 01       	movw	r30, r18
     baa:	20 81       	ld	r18, Z
     bac:	26 95       	lsr	r18
     bae:	26 95       	lsr	r18
     bb0:	26 95       	lsr	r18
     bb2:	24 0f       	add	r18, r20
     bb4:	fc 01       	movw	r30, r24
     bb6:	20 83       	st	Z, r18
     bb8:	82 ef       	ldi	r24, 0xF2	; 242
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	29 85       	ldd	r18, Y+9	; 0x09
     bbe:	3a 85       	ldd	r19, Y+10	; 0x0a
     bc0:	2e 5f       	subi	r18, 0xFE	; 254
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	f9 01       	movw	r30, r18
     bc6:	20 81       	ld	r18, Z
     bc8:	22 95       	swap	r18
     bca:	22 0f       	add	r18, r18
     bcc:	20 7e       	andi	r18, 0xE0	; 224
     bce:	fc 01       	movw	r30, r24
     bd0:	20 83       	st	Z, r18
     bd2:	8f ee       	ldi	r24, 0xEF	; 239
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	2f ee       	ldi	r18, 0xEF	; 239
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	2f 7e       	andi	r18, 0xEF	; 239
     be0:	fc 01       	movw	r30, r24
     be2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     be4:	89 85       	ldd	r24, Y+9	; 0x09
     be6:	9a 85       	ldd	r25, Y+10	; 0x0a
     be8:	21 e0       	ldi	r18, 0x01	; 1
     bea:	fc 01       	movw	r30, r24
     bec:	22 87       	std	Z+10, r18	; 0x0a
     bee:	80 ef       	ldi	r24, 0xF0	; 240
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	20 ef       	ldi	r18, 0xF0	; 240
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	f9 01       	movw	r30, r18
     bf8:	20 81       	ld	r18, Z
     bfa:	24 60       	ori	r18, 0x04	; 4
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c00:	8f ee       	ldi	r24, 0xEF	; 239
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	2f ee       	ldi	r18, 0xEF	; 239
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	f9 01       	movw	r30, r18
     c0a:	40 81       	ld	r20, Z
     c0c:	29 85       	ldd	r18, Y+9	; 0x09
     c0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c10:	f9 01       	movw	r30, r18
     c12:	26 81       	ldd	r18, Z+6	; 0x06
     c14:	24 2b       	or	r18, r20
     c16:	fc 01       	movw	r30, r24
     c18:	20 83       	st	Z, r18
          Can_config_tx();
     c1a:	8f ee       	ldi	r24, 0xEF	; 239
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	2f ee       	ldi	r18, 0xEF	; 239
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	f9 01       	movw	r30, r18
     c24:	20 81       	ld	r18, Z
     c26:	2f 73       	andi	r18, 0x3F	; 63
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
     c2c:	8f ee       	ldi	r24, 0xEF	; 239
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	2f ee       	ldi	r18, 0xEF	; 239
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	20 64       	ori	r18, 0x40	; 64
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 83       	st	Z, r18
          break;
     c3e:	57 c7       	rjmp	.+3758   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     c40:	1d 82       	std	Y+5, r1	; 0x05
     c42:	1e 82       	std	Y+6, r1	; 0x06
     c44:	1f 82       	std	Y+7, r1	; 0x07
     c46:	18 86       	std	Y+8, r1	; 0x08
     c48:	27 ef       	ldi	r18, 0xF7	; 247
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	ce 01       	movw	r24, r28
     c4e:	05 96       	adiw	r24, 0x05	; 5
     c50:	03 96       	adiw	r24, 0x03	; 3
     c52:	fc 01       	movw	r30, r24
     c54:	80 81       	ld	r24, Z
     c56:	48 2f       	mov	r20, r24
     c58:	44 0f       	add	r20, r20
     c5a:	44 0f       	add	r20, r20
     c5c:	44 0f       	add	r20, r20
     c5e:	ce 01       	movw	r24, r28
     c60:	05 96       	adiw	r24, 0x05	; 5
     c62:	02 96       	adiw	r24, 0x02	; 2
     c64:	fc 01       	movw	r30, r24
     c66:	80 81       	ld	r24, Z
     c68:	82 95       	swap	r24
     c6a:	86 95       	lsr	r24
     c6c:	87 70       	andi	r24, 0x07	; 7
     c6e:	84 0f       	add	r24, r20
     c70:	f9 01       	movw	r30, r18
     c72:	80 83       	st	Z, r24
     c74:	26 ef       	ldi	r18, 0xF6	; 246
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	ce 01       	movw	r24, r28
     c7a:	05 96       	adiw	r24, 0x05	; 5
     c7c:	02 96       	adiw	r24, 0x02	; 2
     c7e:	fc 01       	movw	r30, r24
     c80:	80 81       	ld	r24, Z
     c82:	48 2f       	mov	r20, r24
     c84:	44 0f       	add	r20, r20
     c86:	44 0f       	add	r20, r20
     c88:	44 0f       	add	r20, r20
     c8a:	ce 01       	movw	r24, r28
     c8c:	05 96       	adiw	r24, 0x05	; 5
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	fc 01       	movw	r30, r24
     c92:	80 81       	ld	r24, Z
     c94:	82 95       	swap	r24
     c96:	86 95       	lsr	r24
     c98:	87 70       	andi	r24, 0x07	; 7
     c9a:	84 0f       	add	r24, r20
     c9c:	f9 01       	movw	r30, r18
     c9e:	80 83       	st	Z, r24
     ca0:	25 ef       	ldi	r18, 0xF5	; 245
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	ce 01       	movw	r24, r28
     ca6:	05 96       	adiw	r24, 0x05	; 5
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	44 0f       	add	r20, r20
     cb2:	44 0f       	add	r20, r20
     cb4:	44 0f       	add	r20, r20
     cb6:	ce 01       	movw	r24, r28
     cb8:	05 96       	adiw	r24, 0x05	; 5
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	82 95       	swap	r24
     cc0:	86 95       	lsr	r24
     cc2:	87 70       	andi	r24, 0x07	; 7
     cc4:	84 0f       	add	r24, r20
     cc6:	f9 01       	movw	r30, r18
     cc8:	80 83       	st	Z, r24
     cca:	84 ef       	ldi	r24, 0xF4	; 244
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	9e 01       	movw	r18, r28
     cd0:	2b 5f       	subi	r18, 0xFB	; 251
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	f9 01       	movw	r30, r18
     cd6:	20 81       	ld	r18, Z
     cd8:	22 0f       	add	r18, r18
     cda:	22 0f       	add	r18, r18
     cdc:	22 0f       	add	r18, r18
     cde:	fc 01       	movw	r30, r24
     ce0:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     ce2:	8f ee       	ldi	r24, 0xEF	; 239
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	2f ee       	ldi	r18, 0xEF	; 239
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	f9 01       	movw	r30, r18
     cec:	40 81       	ld	r20, Z
     cee:	29 85       	ldd	r18, Y+9	; 0x09
     cf0:	3a 85       	ldd	r19, Y+10	; 0x0a
     cf2:	f9 01       	movw	r30, r18
     cf4:	26 81       	ldd	r18, Z+6	; 0x06
     cf6:	24 2b       	or	r18, r20
     cf8:	fc 01       	movw	r30, r24
     cfa:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     cfc:	84 ef       	ldi	r24, 0xF4	; 244
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	24 ef       	ldi	r18, 0xF4	; 244
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	f9 01       	movw	r30, r18
     d06:	20 81       	ld	r18, Z
     d08:	2b 7f       	andi	r18, 0xFB	; 251
     d0a:	fc 01       	movw	r30, r24
     d0c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d0e:	84 ef       	ldi	r24, 0xF4	; 244
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	24 ef       	ldi	r18, 0xF4	; 244
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	f9 01       	movw	r30, r18
     d18:	20 81       	ld	r18, Z
     d1a:	2e 7f       	andi	r18, 0xFE	; 254
     d1c:	fc 01       	movw	r30, r24
     d1e:	20 83       	st	Z, r18
          Can_config_rx();       
     d20:	8f ee       	ldi	r24, 0xEF	; 239
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	2f ee       	ldi	r18, 0xEF	; 239
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	f9 01       	movw	r30, r18
     d2a:	20 81       	ld	r18, Z
     d2c:	2f 73       	andi	r18, 0x3F	; 63
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
     d32:	8f ee       	ldi	r24, 0xEF	; 239
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	2f ee       	ldi	r18, 0xEF	; 239
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	f9 01       	movw	r30, r18
     d3c:	20 81       	ld	r18, Z
     d3e:	20 68       	ori	r18, 0x80	; 128
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
          break;
     d44:	d4 c6       	rjmp	.+3496   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     d46:	1d 82       	std	Y+5, r1	; 0x05
     d48:	1e 82       	std	Y+6, r1	; 0x06
     d4a:	1f 82       	std	Y+7, r1	; 0x07
     d4c:	18 86       	std	Y+8, r1	; 0x08
     d4e:	27 ef       	ldi	r18, 0xF7	; 247
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	ce 01       	movw	r24, r28
     d54:	05 96       	adiw	r24, 0x05	; 5
     d56:	03 96       	adiw	r24, 0x03	; 3
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	44 0f       	add	r20, r20
     d60:	44 0f       	add	r20, r20
     d62:	44 0f       	add	r20, r20
     d64:	ce 01       	movw	r24, r28
     d66:	05 96       	adiw	r24, 0x05	; 5
     d68:	02 96       	adiw	r24, 0x02	; 2
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	82 95       	swap	r24
     d70:	86 95       	lsr	r24
     d72:	87 70       	andi	r24, 0x07	; 7
     d74:	84 0f       	add	r24, r20
     d76:	f9 01       	movw	r30, r18
     d78:	80 83       	st	Z, r24
     d7a:	26 ef       	ldi	r18, 0xF6	; 246
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	ce 01       	movw	r24, r28
     d80:	05 96       	adiw	r24, 0x05	; 5
     d82:	02 96       	adiw	r24, 0x02	; 2
     d84:	fc 01       	movw	r30, r24
     d86:	80 81       	ld	r24, Z
     d88:	48 2f       	mov	r20, r24
     d8a:	44 0f       	add	r20, r20
     d8c:	44 0f       	add	r20, r20
     d8e:	44 0f       	add	r20, r20
     d90:	ce 01       	movw	r24, r28
     d92:	05 96       	adiw	r24, 0x05	; 5
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	fc 01       	movw	r30, r24
     d98:	80 81       	ld	r24, Z
     d9a:	82 95       	swap	r24
     d9c:	86 95       	lsr	r24
     d9e:	87 70       	andi	r24, 0x07	; 7
     da0:	84 0f       	add	r24, r20
     da2:	f9 01       	movw	r30, r18
     da4:	80 83       	st	Z, r24
     da6:	25 ef       	ldi	r18, 0xF5	; 245
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	ce 01       	movw	r24, r28
     dac:	05 96       	adiw	r24, 0x05	; 5
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	fc 01       	movw	r30, r24
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	44 0f       	add	r20, r20
     db8:	44 0f       	add	r20, r20
     dba:	44 0f       	add	r20, r20
     dbc:	ce 01       	movw	r24, r28
     dbe:	05 96       	adiw	r24, 0x05	; 5
     dc0:	fc 01       	movw	r30, r24
     dc2:	80 81       	ld	r24, Z
     dc4:	82 95       	swap	r24
     dc6:	86 95       	lsr	r24
     dc8:	87 70       	andi	r24, 0x07	; 7
     dca:	84 0f       	add	r24, r20
     dcc:	f9 01       	movw	r30, r18
     dce:	80 83       	st	Z, r24
     dd0:	84 ef       	ldi	r24, 0xF4	; 244
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	9e 01       	movw	r18, r28
     dd6:	2b 5f       	subi	r18, 0xFB	; 251
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	f9 01       	movw	r30, r18
     ddc:	20 81       	ld	r18, Z
     dde:	22 0f       	add	r18, r18
     de0:	22 0f       	add	r18, r18
     de2:	22 0f       	add	r18, r18
     de4:	fc 01       	movw	r30, r24
     de6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     de8:	8f ee       	ldi	r24, 0xEF	; 239
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	2f ee       	ldi	r18, 0xEF	; 239
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	f9 01       	movw	r30, r18
     df2:	40 81       	ld	r20, Z
     df4:	29 85       	ldd	r18, Y+9	; 0x09
     df6:	3a 85       	ldd	r19, Y+10	; 0x0a
     df8:	f9 01       	movw	r30, r18
     dfa:	26 81       	ldd	r18, Z+6	; 0x06
     dfc:	24 2b       	or	r18, r20
     dfe:	fc 01       	movw	r30, r24
     e00:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	fc 01       	movw	r30, r24
     e08:	12 86       	std	Z+10, r1	; 0x0a
     e0a:	84 ef       	ldi	r24, 0xF4	; 244
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	24 ef       	ldi	r18, 0xF4	; 244
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	24 60       	ori	r18, 0x04	; 4
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
     e1c:	80 ef       	ldi	r24, 0xF0	; 240
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	20 ef       	ldi	r18, 0xF0	; 240
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	f9 01       	movw	r30, r18
     e26:	20 81       	ld	r18, Z
     e28:	2b 7f       	andi	r18, 0xFB	; 251
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
          Can_clear_idemsk();
     e2e:	84 ef       	ldi	r24, 0xF4	; 244
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	24 ef       	ldi	r18, 0xF4	; 244
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	f9 01       	movw	r30, r18
     e38:	20 81       	ld	r18, Z
     e3a:	2e 7f       	andi	r18, 0xFE	; 254
     e3c:	fc 01       	movw	r30, r24
     e3e:	20 83       	st	Z, r18
          Can_config_rx();       
     e40:	8f ee       	ldi	r24, 0xEF	; 239
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	2f ee       	ldi	r18, 0xEF	; 239
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	f9 01       	movw	r30, r18
     e4a:	20 81       	ld	r18, Z
     e4c:	2f 73       	andi	r18, 0x3F	; 63
     e4e:	fc 01       	movw	r30, r24
     e50:	20 83       	st	Z, r18
     e52:	8f ee       	ldi	r24, 0xEF	; 239
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	2f ee       	ldi	r18, 0xEF	; 239
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	f9 01       	movw	r30, r18
     e5c:	20 81       	ld	r18, Z
     e5e:	20 68       	ori	r18, 0x80	; 128
     e60:	fc 01       	movw	r30, r24
     e62:	20 83       	st	Z, r18
          break;
     e64:	44 c6       	rjmp	.+3208   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     e66:	1d 82       	std	Y+5, r1	; 0x05
     e68:	1e 82       	std	Y+6, r1	; 0x06
     e6a:	1f 82       	std	Y+7, r1	; 0x07
     e6c:	18 86       	std	Y+8, r1	; 0x08
     e6e:	27 ef       	ldi	r18, 0xF7	; 247
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	ce 01       	movw	r24, r28
     e74:	05 96       	adiw	r24, 0x05	; 5
     e76:	03 96       	adiw	r24, 0x03	; 3
     e78:	fc 01       	movw	r30, r24
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	44 0f       	add	r20, r20
     e80:	44 0f       	add	r20, r20
     e82:	44 0f       	add	r20, r20
     e84:	ce 01       	movw	r24, r28
     e86:	05 96       	adiw	r24, 0x05	; 5
     e88:	02 96       	adiw	r24, 0x02	; 2
     e8a:	fc 01       	movw	r30, r24
     e8c:	80 81       	ld	r24, Z
     e8e:	82 95       	swap	r24
     e90:	86 95       	lsr	r24
     e92:	87 70       	andi	r24, 0x07	; 7
     e94:	84 0f       	add	r24, r20
     e96:	f9 01       	movw	r30, r18
     e98:	80 83       	st	Z, r24
     e9a:	26 ef       	ldi	r18, 0xF6	; 246
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	ce 01       	movw	r24, r28
     ea0:	05 96       	adiw	r24, 0x05	; 5
     ea2:	02 96       	adiw	r24, 0x02	; 2
     ea4:	fc 01       	movw	r30, r24
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	44 0f       	add	r20, r20
     eac:	44 0f       	add	r20, r20
     eae:	44 0f       	add	r20, r20
     eb0:	ce 01       	movw	r24, r28
     eb2:	05 96       	adiw	r24, 0x05	; 5
     eb4:	01 96       	adiw	r24, 0x01	; 1
     eb6:	fc 01       	movw	r30, r24
     eb8:	80 81       	ld	r24, Z
     eba:	82 95       	swap	r24
     ebc:	86 95       	lsr	r24
     ebe:	87 70       	andi	r24, 0x07	; 7
     ec0:	84 0f       	add	r24, r20
     ec2:	f9 01       	movw	r30, r18
     ec4:	80 83       	st	Z, r24
     ec6:	25 ef       	ldi	r18, 0xF5	; 245
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	ce 01       	movw	r24, r28
     ecc:	05 96       	adiw	r24, 0x05	; 5
     ece:	01 96       	adiw	r24, 0x01	; 1
     ed0:	fc 01       	movw	r30, r24
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	44 0f       	add	r20, r20
     ed8:	44 0f       	add	r20, r20
     eda:	44 0f       	add	r20, r20
     edc:	ce 01       	movw	r24, r28
     ede:	05 96       	adiw	r24, 0x05	; 5
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	86 95       	lsr	r24
     ee8:	87 70       	andi	r24, 0x07	; 7
     eea:	84 0f       	add	r24, r20
     eec:	f9 01       	movw	r30, r18
     eee:	80 83       	st	Z, r24
     ef0:	84 ef       	ldi	r24, 0xF4	; 244
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9e 01       	movw	r18, r28
     ef6:	2b 5f       	subi	r18, 0xFB	; 251
     ef8:	3f 4f       	sbci	r19, 0xFF	; 255
     efa:	f9 01       	movw	r30, r18
     efc:	20 81       	ld	r18, Z
     efe:	22 0f       	add	r18, r18
     f00:	22 0f       	add	r18, r18
     f02:	22 0f       	add	r18, r18
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     f08:	8f ee       	ldi	r24, 0xEF	; 239
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	2f ee       	ldi	r18, 0xEF	; 239
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	f9 01       	movw	r30, r18
     f12:	40 81       	ld	r20, Z
     f14:	29 85       	ldd	r18, Y+9	; 0x09
     f16:	3a 85       	ldd	r19, Y+10	; 0x0a
     f18:	f9 01       	movw	r30, r18
     f1a:	26 81       	ldd	r18, Z+6	; 0x06
     f1c:	24 2b       	or	r18, r20
     f1e:	fc 01       	movw	r30, r24
     f20:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     f22:	89 85       	ldd	r24, Y+9	; 0x09
     f24:	9a 85       	ldd	r25, Y+10	; 0x0a
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	fc 01       	movw	r30, r24
     f2a:	22 87       	std	Z+10, r18	; 0x0a
     f2c:	84 ef       	ldi	r24, 0xF4	; 244
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	24 ef       	ldi	r18, 0xF4	; 244
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	f9 01       	movw	r30, r18
     f36:	20 81       	ld	r18, Z
     f38:	24 60       	ori	r18, 0x04	; 4
     f3a:	fc 01       	movw	r30, r24
     f3c:	20 83       	st	Z, r18
     f3e:	80 ef       	ldi	r24, 0xF0	; 240
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	20 ef       	ldi	r18, 0xF0	; 240
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	f9 01       	movw	r30, r18
     f48:	20 81       	ld	r18, Z
     f4a:	24 60       	ori	r18, 0x04	; 4
     f4c:	fc 01       	movw	r30, r24
     f4e:	20 83       	st	Z, r18
          Can_clear_rplv();
     f50:	8f ee       	ldi	r24, 0xEF	; 239
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	2f ee       	ldi	r18, 0xEF	; 239
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	f9 01       	movw	r30, r18
     f5a:	20 81       	ld	r18, Z
     f5c:	2f 7d       	andi	r18, 0xDF	; 223
     f5e:	fc 01       	movw	r30, r24
     f60:	20 83       	st	Z, r18
          Can_clear_idemsk();
     f62:	84 ef       	ldi	r24, 0xF4	; 244
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	24 ef       	ldi	r18, 0xF4	; 244
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	f9 01       	movw	r30, r18
     f6c:	20 81       	ld	r18, Z
     f6e:	2e 7f       	andi	r18, 0xFE	; 254
     f70:	fc 01       	movw	r30, r24
     f72:	20 83       	st	Z, r18
          Can_config_rx();       
     f74:	8f ee       	ldi	r24, 0xEF	; 239
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	2f ee       	ldi	r18, 0xEF	; 239
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	2f 73       	andi	r18, 0x3F	; 63
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
     f86:	8f ee       	ldi	r24, 0xEF	; 239
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2f ee       	ldi	r18, 0xEF	; 239
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	f9 01       	movw	r30, r18
     f90:	20 81       	ld	r18, Z
     f92:	20 68       	ori	r18, 0x80	; 128
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
          break;
     f98:	aa c5       	rjmp	.+2900   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     f9a:	89 85       	ldd	r24, Y+9	; 0x09
     f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f9e:	fc 01       	movw	r30, r24
     fa0:	83 85       	ldd	r24, Z+11	; 0x0b
     fa2:	88 23       	and	r24, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <__stack+0x6a9>
     fa6:	69 c0       	rjmp	.+210    	; 0x107a <__stack+0x77b>
     fa8:	83 ef       	ldi	r24, 0xF3	; 243
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	29 85       	ldd	r18, Y+9	; 0x09
     fae:	3a 85       	ldd	r19, Y+10	; 0x0a
     fb0:	2e 5f       	subi	r18, 0xFE	; 254
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	2d 5f       	subi	r18, 0xFD	; 253
     fb6:	3f 4f       	sbci	r19, 0xFF	; 255
     fb8:	f9 01       	movw	r30, r18
     fba:	20 81       	ld	r18, Z
     fbc:	42 2f       	mov	r20, r18
     fbe:	44 0f       	add	r20, r20
     fc0:	44 0f       	add	r20, r20
     fc2:	44 0f       	add	r20, r20
     fc4:	29 85       	ldd	r18, Y+9	; 0x09
     fc6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fc8:	2e 5f       	subi	r18, 0xFE	; 254
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	2e 5f       	subi	r18, 0xFE	; 254
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	f9 01       	movw	r30, r18
     fd2:	20 81       	ld	r18, Z
     fd4:	22 95       	swap	r18
     fd6:	26 95       	lsr	r18
     fd8:	27 70       	andi	r18, 0x07	; 7
     fda:	24 0f       	add	r18, r20
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
     fe0:	82 ef       	ldi	r24, 0xF2	; 242
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	29 85       	ldd	r18, Y+9	; 0x09
     fe6:	3a 85       	ldd	r19, Y+10	; 0x0a
     fe8:	2e 5f       	subi	r18, 0xFE	; 254
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	2e 5f       	subi	r18, 0xFE	; 254
     fee:	3f 4f       	sbci	r19, 0xFF	; 255
     ff0:	f9 01       	movw	r30, r18
     ff2:	20 81       	ld	r18, Z
     ff4:	42 2f       	mov	r20, r18
     ff6:	44 0f       	add	r20, r20
     ff8:	44 0f       	add	r20, r20
     ffa:	44 0f       	add	r20, r20
     ffc:	29 85       	ldd	r18, Y+9	; 0x09
     ffe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1000:	2e 5f       	subi	r18, 0xFE	; 254
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	2f 5f       	subi	r18, 0xFF	; 255
    1006:	3f 4f       	sbci	r19, 0xFF	; 255
    1008:	f9 01       	movw	r30, r18
    100a:	20 81       	ld	r18, Z
    100c:	22 95       	swap	r18
    100e:	26 95       	lsr	r18
    1010:	27 70       	andi	r18, 0x07	; 7
    1012:	24 0f       	add	r18, r20
    1014:	fc 01       	movw	r30, r24
    1016:	20 83       	st	Z, r18
    1018:	81 ef       	ldi	r24, 0xF1	; 241
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	29 85       	ldd	r18, Y+9	; 0x09
    101e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1020:	2e 5f       	subi	r18, 0xFE	; 254
    1022:	3f 4f       	sbci	r19, 0xFF	; 255
    1024:	2f 5f       	subi	r18, 0xFF	; 255
    1026:	3f 4f       	sbci	r19, 0xFF	; 255
    1028:	f9 01       	movw	r30, r18
    102a:	20 81       	ld	r18, Z
    102c:	42 2f       	mov	r20, r18
    102e:	44 0f       	add	r20, r20
    1030:	44 0f       	add	r20, r20
    1032:	44 0f       	add	r20, r20
    1034:	29 85       	ldd	r18, Y+9	; 0x09
    1036:	3a 85       	ldd	r19, Y+10	; 0x0a
    1038:	2e 5f       	subi	r18, 0xFE	; 254
    103a:	3f 4f       	sbci	r19, 0xFF	; 255
    103c:	f9 01       	movw	r30, r18
    103e:	20 81       	ld	r18, Z
    1040:	22 95       	swap	r18
    1042:	26 95       	lsr	r18
    1044:	27 70       	andi	r18, 0x07	; 7
    1046:	24 0f       	add	r18, r20
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
    104c:	80 ef       	ldi	r24, 0xF0	; 240
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	29 85       	ldd	r18, Y+9	; 0x09
    1052:	3a 85       	ldd	r19, Y+10	; 0x0a
    1054:	2e 5f       	subi	r18, 0xFE	; 254
    1056:	3f 4f       	sbci	r19, 0xFF	; 255
    1058:	f9 01       	movw	r30, r18
    105a:	20 81       	ld	r18, Z
    105c:	22 0f       	add	r18, r18
    105e:	22 0f       	add	r18, r18
    1060:	22 0f       	add	r18, r18
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
    1066:	8f ee       	ldi	r24, 0xEF	; 239
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	2f ee       	ldi	r18, 0xEF	; 239
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	f9 01       	movw	r30, r18
    1070:	20 81       	ld	r18, Z
    1072:	20 61       	ori	r18, 0x10	; 16
    1074:	fc 01       	movw	r30, r24
    1076:	20 83       	st	Z, r18
    1078:	30 c0       	rjmp	.+96     	; 0x10da <__stack+0x7db>
          else              { Can_set_std_id(cmd->id.std);}
    107a:	83 ef       	ldi	r24, 0xF3	; 243
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	29 85       	ldd	r18, Y+9	; 0x09
    1080:	3a 85       	ldd	r19, Y+10	; 0x0a
    1082:	2e 5f       	subi	r18, 0xFE	; 254
    1084:	3f 4f       	sbci	r19, 0xFF	; 255
    1086:	2f 5f       	subi	r18, 0xFF	; 255
    1088:	3f 4f       	sbci	r19, 0xFF	; 255
    108a:	f9 01       	movw	r30, r18
    108c:	20 81       	ld	r18, Z
    108e:	42 2f       	mov	r20, r18
    1090:	42 95       	swap	r20
    1092:	44 0f       	add	r20, r20
    1094:	40 7e       	andi	r20, 0xE0	; 224
    1096:	29 85       	ldd	r18, Y+9	; 0x09
    1098:	3a 85       	ldd	r19, Y+10	; 0x0a
    109a:	2e 5f       	subi	r18, 0xFE	; 254
    109c:	3f 4f       	sbci	r19, 0xFF	; 255
    109e:	f9 01       	movw	r30, r18
    10a0:	20 81       	ld	r18, Z
    10a2:	26 95       	lsr	r18
    10a4:	26 95       	lsr	r18
    10a6:	26 95       	lsr	r18
    10a8:	24 0f       	add	r18, r20
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 83       	st	Z, r18
    10ae:	82 ef       	ldi	r24, 0xF2	; 242
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	29 85       	ldd	r18, Y+9	; 0x09
    10b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b6:	2e 5f       	subi	r18, 0xFE	; 254
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	f9 01       	movw	r30, r18
    10bc:	20 81       	ld	r18, Z
    10be:	22 95       	swap	r18
    10c0:	22 0f       	add	r18, r18
    10c2:	20 7e       	andi	r18, 0xE0	; 224
    10c4:	fc 01       	movw	r30, r24
    10c6:	20 83       	st	Z, r18
    10c8:	8f ee       	ldi	r24, 0xEF	; 239
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	2f ee       	ldi	r18, 0xEF	; 239
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	f9 01       	movw	r30, r18
    10d2:	20 81       	ld	r18, Z
    10d4:	2f 7e       	andi	r18, 0xEF	; 239
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    10da:	8f ef       	ldi	r24, 0xFF	; 255
    10dc:	9f ef       	ldi	r25, 0xFF	; 255
    10de:	dc 01       	movw	r26, r24
    10e0:	8d 83       	std	Y+5, r24	; 0x05
    10e2:	9e 83       	std	Y+6, r25	; 0x06
    10e4:	af 83       	std	Y+7, r26	; 0x07
    10e6:	b8 87       	std	Y+8, r27	; 0x08
    10e8:	27 ef       	ldi	r18, 0xF7	; 247
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	ce 01       	movw	r24, r28
    10ee:	05 96       	adiw	r24, 0x05	; 5
    10f0:	03 96       	adiw	r24, 0x03	; 3
    10f2:	fc 01       	movw	r30, r24
    10f4:	80 81       	ld	r24, Z
    10f6:	48 2f       	mov	r20, r24
    10f8:	44 0f       	add	r20, r20
    10fa:	44 0f       	add	r20, r20
    10fc:	44 0f       	add	r20, r20
    10fe:	ce 01       	movw	r24, r28
    1100:	05 96       	adiw	r24, 0x05	; 5
    1102:	02 96       	adiw	r24, 0x02	; 2
    1104:	fc 01       	movw	r30, r24
    1106:	80 81       	ld	r24, Z
    1108:	82 95       	swap	r24
    110a:	86 95       	lsr	r24
    110c:	87 70       	andi	r24, 0x07	; 7
    110e:	84 0f       	add	r24, r20
    1110:	f9 01       	movw	r30, r18
    1112:	80 83       	st	Z, r24
    1114:	26 ef       	ldi	r18, 0xF6	; 246
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	ce 01       	movw	r24, r28
    111a:	05 96       	adiw	r24, 0x05	; 5
    111c:	02 96       	adiw	r24, 0x02	; 2
    111e:	fc 01       	movw	r30, r24
    1120:	80 81       	ld	r24, Z
    1122:	48 2f       	mov	r20, r24
    1124:	44 0f       	add	r20, r20
    1126:	44 0f       	add	r20, r20
    1128:	44 0f       	add	r20, r20
    112a:	ce 01       	movw	r24, r28
    112c:	05 96       	adiw	r24, 0x05	; 5
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	fc 01       	movw	r30, r24
    1132:	80 81       	ld	r24, Z
    1134:	82 95       	swap	r24
    1136:	86 95       	lsr	r24
    1138:	87 70       	andi	r24, 0x07	; 7
    113a:	84 0f       	add	r24, r20
    113c:	f9 01       	movw	r30, r18
    113e:	80 83       	st	Z, r24
    1140:	25 ef       	ldi	r18, 0xF5	; 245
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	ce 01       	movw	r24, r28
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	fc 01       	movw	r30, r24
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	44 0f       	add	r20, r20
    1152:	44 0f       	add	r20, r20
    1154:	44 0f       	add	r20, r20
    1156:	ce 01       	movw	r24, r28
    1158:	05 96       	adiw	r24, 0x05	; 5
    115a:	fc 01       	movw	r30, r24
    115c:	80 81       	ld	r24, Z
    115e:	82 95       	swap	r24
    1160:	86 95       	lsr	r24
    1162:	87 70       	andi	r24, 0x07	; 7
    1164:	84 0f       	add	r24, r20
    1166:	f9 01       	movw	r30, r18
    1168:	80 83       	st	Z, r24
    116a:	84 ef       	ldi	r24, 0xF4	; 244
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	9e 01       	movw	r18, r28
    1170:	2b 5f       	subi	r18, 0xFB	; 251
    1172:	3f 4f       	sbci	r19, 0xFF	; 255
    1174:	f9 01       	movw	r30, r18
    1176:	20 81       	ld	r18, Z
    1178:	22 0f       	add	r18, r18
    117a:	22 0f       	add	r18, r18
    117c:	22 0f       	add	r18, r18
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1182:	8f ee       	ldi	r24, 0xEF	; 239
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	2f ee       	ldi	r18, 0xEF	; 239
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	f9 01       	movw	r30, r18
    118c:	40 81       	ld	r20, Z
    118e:	29 85       	ldd	r18, Y+9	; 0x09
    1190:	3a 85       	ldd	r19, Y+10	; 0x0a
    1192:	f9 01       	movw	r30, r18
    1194:	26 81       	ldd	r18, Z+6	; 0x06
    1196:	24 2b       	or	r18, r20
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    119c:	84 ef       	ldi	r24, 0xF4	; 244
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	24 ef       	ldi	r18, 0xF4	; 244
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	f9 01       	movw	r30, r18
    11a6:	20 81       	ld	r18, Z
    11a8:	2b 7f       	andi	r18, 0xFB	; 251
    11aa:	fc 01       	movw	r30, r24
    11ac:	20 83       	st	Z, r18
          Can_set_idemsk();
    11ae:	84 ef       	ldi	r24, 0xF4	; 244
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	24 ef       	ldi	r18, 0xF4	; 244
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	f9 01       	movw	r30, r18
    11b8:	20 81       	ld	r18, Z
    11ba:	21 60       	ori	r18, 0x01	; 1
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
          Can_config_rx();       
    11c0:	8f ee       	ldi	r24, 0xEF	; 239
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	2f ee       	ldi	r18, 0xEF	; 239
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	f9 01       	movw	r30, r18
    11ca:	20 81       	ld	r18, Z
    11cc:	2f 73       	andi	r18, 0x3F	; 63
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	8f ee       	ldi	r24, 0xEF	; 239
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2f ee       	ldi	r18, 0xEF	; 239
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	f9 01       	movw	r30, r18
    11dc:	20 81       	ld	r18, Z
    11de:	20 68       	ori	r18, 0x80	; 128
    11e0:	fc 01       	movw	r30, r24
    11e2:	20 83       	st	Z, r18
          break;
    11e4:	84 c4       	rjmp	.+2312   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    11e6:	89 85       	ldd	r24, Y+9	; 0x09
    11e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ea:	fc 01       	movw	r30, r24
    11ec:	83 85       	ldd	r24, Z+11	; 0x0b
    11ee:	88 23       	and	r24, r24
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__stack+0x8f5>
    11f2:	69 c0       	rjmp	.+210    	; 0x12c6 <__stack+0x9c7>
    11f4:	83 ef       	ldi	r24, 0xF3	; 243
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	29 85       	ldd	r18, Y+9	; 0x09
    11fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    11fc:	2e 5f       	subi	r18, 0xFE	; 254
    11fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1200:	2d 5f       	subi	r18, 0xFD	; 253
    1202:	3f 4f       	sbci	r19, 0xFF	; 255
    1204:	f9 01       	movw	r30, r18
    1206:	20 81       	ld	r18, Z
    1208:	42 2f       	mov	r20, r18
    120a:	44 0f       	add	r20, r20
    120c:	44 0f       	add	r20, r20
    120e:	44 0f       	add	r20, r20
    1210:	29 85       	ldd	r18, Y+9	; 0x09
    1212:	3a 85       	ldd	r19, Y+10	; 0x0a
    1214:	2e 5f       	subi	r18, 0xFE	; 254
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	2e 5f       	subi	r18, 0xFE	; 254
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	f9 01       	movw	r30, r18
    121e:	20 81       	ld	r18, Z
    1220:	22 95       	swap	r18
    1222:	26 95       	lsr	r18
    1224:	27 70       	andi	r18, 0x07	; 7
    1226:	24 0f       	add	r18, r20
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
    122c:	82 ef       	ldi	r24, 0xF2	; 242
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	29 85       	ldd	r18, Y+9	; 0x09
    1232:	3a 85       	ldd	r19, Y+10	; 0x0a
    1234:	2e 5f       	subi	r18, 0xFE	; 254
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	2e 5f       	subi	r18, 0xFE	; 254
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	f9 01       	movw	r30, r18
    123e:	20 81       	ld	r18, Z
    1240:	42 2f       	mov	r20, r18
    1242:	44 0f       	add	r20, r20
    1244:	44 0f       	add	r20, r20
    1246:	44 0f       	add	r20, r20
    1248:	29 85       	ldd	r18, Y+9	; 0x09
    124a:	3a 85       	ldd	r19, Y+10	; 0x0a
    124c:	2e 5f       	subi	r18, 0xFE	; 254
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	2f 5f       	subi	r18, 0xFF	; 255
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	f9 01       	movw	r30, r18
    1256:	20 81       	ld	r18, Z
    1258:	22 95       	swap	r18
    125a:	26 95       	lsr	r18
    125c:	27 70       	andi	r18, 0x07	; 7
    125e:	24 0f       	add	r18, r20
    1260:	fc 01       	movw	r30, r24
    1262:	20 83       	st	Z, r18
    1264:	81 ef       	ldi	r24, 0xF1	; 241
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	29 85       	ldd	r18, Y+9	; 0x09
    126a:	3a 85       	ldd	r19, Y+10	; 0x0a
    126c:	2e 5f       	subi	r18, 0xFE	; 254
    126e:	3f 4f       	sbci	r19, 0xFF	; 255
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	f9 01       	movw	r30, r18
    1276:	20 81       	ld	r18, Z
    1278:	42 2f       	mov	r20, r18
    127a:	44 0f       	add	r20, r20
    127c:	44 0f       	add	r20, r20
    127e:	44 0f       	add	r20, r20
    1280:	29 85       	ldd	r18, Y+9	; 0x09
    1282:	3a 85       	ldd	r19, Y+10	; 0x0a
    1284:	2e 5f       	subi	r18, 0xFE	; 254
    1286:	3f 4f       	sbci	r19, 0xFF	; 255
    1288:	f9 01       	movw	r30, r18
    128a:	20 81       	ld	r18, Z
    128c:	22 95       	swap	r18
    128e:	26 95       	lsr	r18
    1290:	27 70       	andi	r18, 0x07	; 7
    1292:	24 0f       	add	r18, r20
    1294:	fc 01       	movw	r30, r24
    1296:	20 83       	st	Z, r18
    1298:	80 ef       	ldi	r24, 0xF0	; 240
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	29 85       	ldd	r18, Y+9	; 0x09
    129e:	3a 85       	ldd	r19, Y+10	; 0x0a
    12a0:	2e 5f       	subi	r18, 0xFE	; 254
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	22 0f       	add	r18, r18
    12aa:	22 0f       	add	r18, r18
    12ac:	22 0f       	add	r18, r18
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	8f ee       	ldi	r24, 0xEF	; 239
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	2f ee       	ldi	r18, 0xEF	; 239
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	f9 01       	movw	r30, r18
    12bc:	20 81       	ld	r18, Z
    12be:	20 61       	ori	r18, 0x10	; 16
    12c0:	fc 01       	movw	r30, r24
    12c2:	20 83       	st	Z, r18
    12c4:	30 c0       	rjmp	.+96     	; 0x1326 <__stack+0xa27>
          else              { Can_set_std_id(cmd->id.std);}
    12c6:	83 ef       	ldi	r24, 0xF3	; 243
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	29 85       	ldd	r18, Y+9	; 0x09
    12cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ce:	2e 5f       	subi	r18, 0xFE	; 254
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	2f 5f       	subi	r18, 0xFF	; 255
    12d4:	3f 4f       	sbci	r19, 0xFF	; 255
    12d6:	f9 01       	movw	r30, r18
    12d8:	20 81       	ld	r18, Z
    12da:	42 2f       	mov	r20, r18
    12dc:	42 95       	swap	r20
    12de:	44 0f       	add	r20, r20
    12e0:	40 7e       	andi	r20, 0xE0	; 224
    12e2:	29 85       	ldd	r18, Y+9	; 0x09
    12e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	26 95       	lsr	r18
    12f0:	26 95       	lsr	r18
    12f2:	26 95       	lsr	r18
    12f4:	24 0f       	add	r18, r20
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	82 ef       	ldi	r24, 0xF2	; 242
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	29 85       	ldd	r18, Y+9	; 0x09
    1300:	3a 85       	ldd	r19, Y+10	; 0x0a
    1302:	2e 5f       	subi	r18, 0xFE	; 254
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	f9 01       	movw	r30, r18
    1308:	20 81       	ld	r18, Z
    130a:	22 95       	swap	r18
    130c:	22 0f       	add	r18, r18
    130e:	20 7e       	andi	r18, 0xE0	; 224
    1310:	fc 01       	movw	r30, r24
    1312:	20 83       	st	Z, r18
    1314:	8f ee       	ldi	r24, 0xEF	; 239
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	2f ee       	ldi	r18, 0xEF	; 239
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	f9 01       	movw	r30, r18
    131e:	20 81       	ld	r18, Z
    1320:	2f 7e       	andi	r18, 0xEF	; 239
    1322:	fc 01       	movw	r30, r24
    1324:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f ef       	ldi	r25, 0xFF	; 255
    132a:	dc 01       	movw	r26, r24
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	af 83       	std	Y+7, r26	; 0x07
    1332:	b8 87       	std	Y+8, r27	; 0x08
    1334:	27 ef       	ldi	r18, 0xF7	; 247
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	05 96       	adiw	r24, 0x05	; 5
    133c:	03 96       	adiw	r24, 0x03	; 3
    133e:	fc 01       	movw	r30, r24
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	44 0f       	add	r20, r20
    1346:	44 0f       	add	r20, r20
    1348:	44 0f       	add	r20, r20
    134a:	ce 01       	movw	r24, r28
    134c:	05 96       	adiw	r24, 0x05	; 5
    134e:	02 96       	adiw	r24, 0x02	; 2
    1350:	fc 01       	movw	r30, r24
    1352:	80 81       	ld	r24, Z
    1354:	82 95       	swap	r24
    1356:	86 95       	lsr	r24
    1358:	87 70       	andi	r24, 0x07	; 7
    135a:	84 0f       	add	r24, r20
    135c:	f9 01       	movw	r30, r18
    135e:	80 83       	st	Z, r24
    1360:	26 ef       	ldi	r18, 0xF6	; 246
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	ce 01       	movw	r24, r28
    1366:	05 96       	adiw	r24, 0x05	; 5
    1368:	02 96       	adiw	r24, 0x02	; 2
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	48 2f       	mov	r20, r24
    1370:	44 0f       	add	r20, r20
    1372:	44 0f       	add	r20, r20
    1374:	44 0f       	add	r20, r20
    1376:	ce 01       	movw	r24, r28
    1378:	05 96       	adiw	r24, 0x05	; 5
    137a:	01 96       	adiw	r24, 0x01	; 1
    137c:	fc 01       	movw	r30, r24
    137e:	80 81       	ld	r24, Z
    1380:	82 95       	swap	r24
    1382:	86 95       	lsr	r24
    1384:	87 70       	andi	r24, 0x07	; 7
    1386:	84 0f       	add	r24, r20
    1388:	f9 01       	movw	r30, r18
    138a:	80 83       	st	Z, r24
    138c:	25 ef       	ldi	r18, 0xF5	; 245
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	ce 01       	movw	r24, r28
    1392:	05 96       	adiw	r24, 0x05	; 5
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	fc 01       	movw	r30, r24
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	44 0f       	add	r20, r20
    139e:	44 0f       	add	r20, r20
    13a0:	44 0f       	add	r20, r20
    13a2:	ce 01       	movw	r24, r28
    13a4:	05 96       	adiw	r24, 0x05	; 5
    13a6:	fc 01       	movw	r30, r24
    13a8:	80 81       	ld	r24, Z
    13aa:	82 95       	swap	r24
    13ac:	86 95       	lsr	r24
    13ae:	87 70       	andi	r24, 0x07	; 7
    13b0:	84 0f       	add	r24, r20
    13b2:	f9 01       	movw	r30, r18
    13b4:	80 83       	st	Z, r24
    13b6:	84 ef       	ldi	r24, 0xF4	; 244
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9e 01       	movw	r18, r28
    13bc:	2b 5f       	subi	r18, 0xFB	; 251
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	22 0f       	add	r18, r18
    13c6:	22 0f       	add	r18, r18
    13c8:	22 0f       	add	r18, r18
    13ca:	fc 01       	movw	r30, r24
    13cc:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    13ce:	8f ee       	ldi	r24, 0xEF	; 239
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	2f ee       	ldi	r18, 0xEF	; 239
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	f9 01       	movw	r30, r18
    13d8:	40 81       	ld	r20, Z
    13da:	29 85       	ldd	r18, Y+9	; 0x09
    13dc:	3a 85       	ldd	r19, Y+10	; 0x0a
    13de:	f9 01       	movw	r30, r18
    13e0:	26 81       	ldd	r18, Z+6	; 0x06
    13e2:	24 2b       	or	r18, r20
    13e4:	fc 01       	movw	r30, r24
    13e6:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    13e8:	89 85       	ldd	r24, Y+9	; 0x09
    13ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ec:	fc 01       	movw	r30, r24
    13ee:	12 86       	std	Z+10, r1	; 0x0a
    13f0:	84 ef       	ldi	r24, 0xF4	; 244
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	24 ef       	ldi	r18, 0xF4	; 244
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	f9 01       	movw	r30, r18
    13fa:	20 81       	ld	r18, Z
    13fc:	24 60       	ori	r18, 0x04	; 4
    13fe:	fc 01       	movw	r30, r24
    1400:	20 83       	st	Z, r18
    1402:	80 ef       	ldi	r24, 0xF0	; 240
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	20 ef       	ldi	r18, 0xF0	; 240
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	f9 01       	movw	r30, r18
    140c:	20 81       	ld	r18, Z
    140e:	2b 7f       	andi	r18, 0xFB	; 251
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18
          Can_set_idemsk();
    1414:	84 ef       	ldi	r24, 0xF4	; 244
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	24 ef       	ldi	r18, 0xF4	; 244
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	f9 01       	movw	r30, r18
    141e:	20 81       	ld	r18, Z
    1420:	21 60       	ori	r18, 0x01	; 1
    1422:	fc 01       	movw	r30, r24
    1424:	20 83       	st	Z, r18
          Can_config_rx();       
    1426:	8f ee       	ldi	r24, 0xEF	; 239
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	2f ee       	ldi	r18, 0xEF	; 239
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	f9 01       	movw	r30, r18
    1430:	20 81       	ld	r18, Z
    1432:	2f 73       	andi	r18, 0x3F	; 63
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
    1438:	8f ee       	ldi	r24, 0xEF	; 239
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2f ee       	ldi	r18, 0xEF	; 239
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	20 68       	ori	r18, 0x80	; 128
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
          break;
    144a:	51 c3       	rjmp	.+1698   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    144c:	89 85       	ldd	r24, Y+9	; 0x09
    144e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1450:	fc 01       	movw	r30, r24
    1452:	83 85       	ldd	r24, Z+11	; 0x0b
    1454:	88 23       	and	r24, r24
    1456:	09 f4       	brne	.+2      	; 0x145a <__stack+0xb5b>
    1458:	69 c0       	rjmp	.+210    	; 0x152c <__stack+0xc2d>
    145a:	83 ef       	ldi	r24, 0xF3	; 243
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	29 85       	ldd	r18, Y+9	; 0x09
    1460:	3a 85       	ldd	r19, Y+10	; 0x0a
    1462:	2e 5f       	subi	r18, 0xFE	; 254
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	2d 5f       	subi	r18, 0xFD	; 253
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	f9 01       	movw	r30, r18
    146c:	20 81       	ld	r18, Z
    146e:	42 2f       	mov	r20, r18
    1470:	44 0f       	add	r20, r20
    1472:	44 0f       	add	r20, r20
    1474:	44 0f       	add	r20, r20
    1476:	29 85       	ldd	r18, Y+9	; 0x09
    1478:	3a 85       	ldd	r19, Y+10	; 0x0a
    147a:	2e 5f       	subi	r18, 0xFE	; 254
    147c:	3f 4f       	sbci	r19, 0xFF	; 255
    147e:	2e 5f       	subi	r18, 0xFE	; 254
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	f9 01       	movw	r30, r18
    1484:	20 81       	ld	r18, Z
    1486:	22 95       	swap	r18
    1488:	26 95       	lsr	r18
    148a:	27 70       	andi	r18, 0x07	; 7
    148c:	24 0f       	add	r18, r20
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
    1492:	82 ef       	ldi	r24, 0xF2	; 242
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	29 85       	ldd	r18, Y+9	; 0x09
    1498:	3a 85       	ldd	r19, Y+10	; 0x0a
    149a:	2e 5f       	subi	r18, 0xFE	; 254
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	2e 5f       	subi	r18, 0xFE	; 254
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	f9 01       	movw	r30, r18
    14a4:	20 81       	ld	r18, Z
    14a6:	42 2f       	mov	r20, r18
    14a8:	44 0f       	add	r20, r20
    14aa:	44 0f       	add	r20, r20
    14ac:	44 0f       	add	r20, r20
    14ae:	29 85       	ldd	r18, Y+9	; 0x09
    14b0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14b2:	2e 5f       	subi	r18, 0xFE	; 254
    14b4:	3f 4f       	sbci	r19, 0xFF	; 255
    14b6:	2f 5f       	subi	r18, 0xFF	; 255
    14b8:	3f 4f       	sbci	r19, 0xFF	; 255
    14ba:	f9 01       	movw	r30, r18
    14bc:	20 81       	ld	r18, Z
    14be:	22 95       	swap	r18
    14c0:	26 95       	lsr	r18
    14c2:	27 70       	andi	r18, 0x07	; 7
    14c4:	24 0f       	add	r18, r20
    14c6:	fc 01       	movw	r30, r24
    14c8:	20 83       	st	Z, r18
    14ca:	81 ef       	ldi	r24, 0xF1	; 241
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	29 85       	ldd	r18, Y+9	; 0x09
    14d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14d2:	2e 5f       	subi	r18, 0xFE	; 254
    14d4:	3f 4f       	sbci	r19, 0xFF	; 255
    14d6:	2f 5f       	subi	r18, 0xFF	; 255
    14d8:	3f 4f       	sbci	r19, 0xFF	; 255
    14da:	f9 01       	movw	r30, r18
    14dc:	20 81       	ld	r18, Z
    14de:	42 2f       	mov	r20, r18
    14e0:	44 0f       	add	r20, r20
    14e2:	44 0f       	add	r20, r20
    14e4:	44 0f       	add	r20, r20
    14e6:	29 85       	ldd	r18, Y+9	; 0x09
    14e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ea:	2e 5f       	subi	r18, 0xFE	; 254
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	f9 01       	movw	r30, r18
    14f0:	20 81       	ld	r18, Z
    14f2:	22 95       	swap	r18
    14f4:	26 95       	lsr	r18
    14f6:	27 70       	andi	r18, 0x07	; 7
    14f8:	24 0f       	add	r18, r20
    14fa:	fc 01       	movw	r30, r24
    14fc:	20 83       	st	Z, r18
    14fe:	80 ef       	ldi	r24, 0xF0	; 240
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	29 85       	ldd	r18, Y+9	; 0x09
    1504:	3a 85       	ldd	r19, Y+10	; 0x0a
    1506:	2e 5f       	subi	r18, 0xFE	; 254
    1508:	3f 4f       	sbci	r19, 0xFF	; 255
    150a:	f9 01       	movw	r30, r18
    150c:	20 81       	ld	r18, Z
    150e:	22 0f       	add	r18, r18
    1510:	22 0f       	add	r18, r18
    1512:	22 0f       	add	r18, r18
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
    1518:	8f ee       	ldi	r24, 0xEF	; 239
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	2f ee       	ldi	r18, 0xEF	; 239
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	f9 01       	movw	r30, r18
    1522:	20 81       	ld	r18, Z
    1524:	20 61       	ori	r18, 0x10	; 16
    1526:	fc 01       	movw	r30, r24
    1528:	20 83       	st	Z, r18
    152a:	30 c0       	rjmp	.+96     	; 0x158c <__stack+0xc8d>
          else              { Can_set_std_id(cmd->id.std);}
    152c:	83 ef       	ldi	r24, 0xF3	; 243
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	29 85       	ldd	r18, Y+9	; 0x09
    1532:	3a 85       	ldd	r19, Y+10	; 0x0a
    1534:	2e 5f       	subi	r18, 0xFE	; 254
    1536:	3f 4f       	sbci	r19, 0xFF	; 255
    1538:	2f 5f       	subi	r18, 0xFF	; 255
    153a:	3f 4f       	sbci	r19, 0xFF	; 255
    153c:	f9 01       	movw	r30, r18
    153e:	20 81       	ld	r18, Z
    1540:	42 2f       	mov	r20, r18
    1542:	42 95       	swap	r20
    1544:	44 0f       	add	r20, r20
    1546:	40 7e       	andi	r20, 0xE0	; 224
    1548:	29 85       	ldd	r18, Y+9	; 0x09
    154a:	3a 85       	ldd	r19, Y+10	; 0x0a
    154c:	2e 5f       	subi	r18, 0xFE	; 254
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	f9 01       	movw	r30, r18
    1552:	20 81       	ld	r18, Z
    1554:	26 95       	lsr	r18
    1556:	26 95       	lsr	r18
    1558:	26 95       	lsr	r18
    155a:	24 0f       	add	r18, r20
    155c:	fc 01       	movw	r30, r24
    155e:	20 83       	st	Z, r18
    1560:	82 ef       	ldi	r24, 0xF2	; 242
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	29 85       	ldd	r18, Y+9	; 0x09
    1566:	3a 85       	ldd	r19, Y+10	; 0x0a
    1568:	2e 5f       	subi	r18, 0xFE	; 254
    156a:	3f 4f       	sbci	r19, 0xFF	; 255
    156c:	f9 01       	movw	r30, r18
    156e:	20 81       	ld	r18, Z
    1570:	22 95       	swap	r18
    1572:	22 0f       	add	r18, r18
    1574:	20 7e       	andi	r18, 0xE0	; 224
    1576:	fc 01       	movw	r30, r24
    1578:	20 83       	st	Z, r18
    157a:	8f ee       	ldi	r24, 0xEF	; 239
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	2f ee       	ldi	r18, 0xEF	; 239
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	f9 01       	movw	r30, r18
    1584:	20 81       	ld	r18, Z
    1586:	2f 7e       	andi	r18, 0xEF	; 239
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    158c:	8f ef       	ldi	r24, 0xFF	; 255
    158e:	9f ef       	ldi	r25, 0xFF	; 255
    1590:	dc 01       	movw	r26, r24
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	af 83       	std	Y+7, r26	; 0x07
    1598:	b8 87       	std	Y+8, r27	; 0x08
    159a:	27 ef       	ldi	r18, 0xF7	; 247
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	ce 01       	movw	r24, r28
    15a0:	05 96       	adiw	r24, 0x05	; 5
    15a2:	03 96       	adiw	r24, 0x03	; 3
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	44 0f       	add	r20, r20
    15ac:	44 0f       	add	r20, r20
    15ae:	44 0f       	add	r20, r20
    15b0:	ce 01       	movw	r24, r28
    15b2:	05 96       	adiw	r24, 0x05	; 5
    15b4:	02 96       	adiw	r24, 0x02	; 2
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	82 95       	swap	r24
    15bc:	86 95       	lsr	r24
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	84 0f       	add	r24, r20
    15c2:	f9 01       	movw	r30, r18
    15c4:	80 83       	st	Z, r24
    15c6:	26 ef       	ldi	r18, 0xF6	; 246
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	ce 01       	movw	r24, r28
    15cc:	05 96       	adiw	r24, 0x05	; 5
    15ce:	02 96       	adiw	r24, 0x02	; 2
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	44 0f       	add	r20, r20
    15d8:	44 0f       	add	r20, r20
    15da:	44 0f       	add	r20, r20
    15dc:	ce 01       	movw	r24, r28
    15de:	05 96       	adiw	r24, 0x05	; 5
    15e0:	01 96       	adiw	r24, 0x01	; 1
    15e2:	fc 01       	movw	r30, r24
    15e4:	80 81       	ld	r24, Z
    15e6:	82 95       	swap	r24
    15e8:	86 95       	lsr	r24
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	84 0f       	add	r24, r20
    15ee:	f9 01       	movw	r30, r18
    15f0:	80 83       	st	Z, r24
    15f2:	25 ef       	ldi	r18, 0xF5	; 245
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	ce 01       	movw	r24, r28
    15f8:	05 96       	adiw	r24, 0x05	; 5
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	fc 01       	movw	r30, r24
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	44 0f       	add	r20, r20
    1604:	44 0f       	add	r20, r20
    1606:	44 0f       	add	r20, r20
    1608:	ce 01       	movw	r24, r28
    160a:	05 96       	adiw	r24, 0x05	; 5
    160c:	fc 01       	movw	r30, r24
    160e:	80 81       	ld	r24, Z
    1610:	82 95       	swap	r24
    1612:	86 95       	lsr	r24
    1614:	87 70       	andi	r24, 0x07	; 7
    1616:	84 0f       	add	r24, r20
    1618:	f9 01       	movw	r30, r18
    161a:	80 83       	st	Z, r24
    161c:	84 ef       	ldi	r24, 0xF4	; 244
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	9e 01       	movw	r18, r28
    1622:	2b 5f       	subi	r18, 0xFB	; 251
    1624:	3f 4f       	sbci	r19, 0xFF	; 255
    1626:	f9 01       	movw	r30, r18
    1628:	20 81       	ld	r18, Z
    162a:	22 0f       	add	r18, r18
    162c:	22 0f       	add	r18, r18
    162e:	22 0f       	add	r18, r18
    1630:	fc 01       	movw	r30, r24
    1632:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1634:	8f ee       	ldi	r24, 0xEF	; 239
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	2f ee       	ldi	r18, 0xEF	; 239
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	f9 01       	movw	r30, r18
    163e:	40 81       	ld	r20, Z
    1640:	29 85       	ldd	r18, Y+9	; 0x09
    1642:	3a 85       	ldd	r19, Y+10	; 0x0a
    1644:	f9 01       	movw	r30, r18
    1646:	26 81       	ldd	r18, Z+6	; 0x06
    1648:	24 2b       	or	r18, r20
    164a:	fc 01       	movw	r30, r24
    164c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    164e:	89 85       	ldd	r24, Y+9	; 0x09
    1650:	9a 85       	ldd	r25, Y+10	; 0x0a
    1652:	21 e0       	ldi	r18, 0x01	; 1
    1654:	fc 01       	movw	r30, r24
    1656:	22 87       	std	Z+10, r18	; 0x0a
    1658:	84 ef       	ldi	r24, 0xF4	; 244
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	24 ef       	ldi	r18, 0xF4	; 244
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	f9 01       	movw	r30, r18
    1662:	20 81       	ld	r18, Z
    1664:	24 60       	ori	r18, 0x04	; 4
    1666:	fc 01       	movw	r30, r24
    1668:	20 83       	st	Z, r18
    166a:	80 ef       	ldi	r24, 0xF0	; 240
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	20 ef       	ldi	r18, 0xF0	; 240
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	f9 01       	movw	r30, r18
    1674:	20 81       	ld	r18, Z
    1676:	24 60       	ori	r18, 0x04	; 4
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18
          Can_clear_rplv();
    167c:	8f ee       	ldi	r24, 0xEF	; 239
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	2f ee       	ldi	r18, 0xEF	; 239
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	f9 01       	movw	r30, r18
    1686:	20 81       	ld	r18, Z
    1688:	2f 7d       	andi	r18, 0xDF	; 223
    168a:	fc 01       	movw	r30, r24
    168c:	20 83       	st	Z, r18
          Can_set_idemsk();
    168e:	84 ef       	ldi	r24, 0xF4	; 244
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	24 ef       	ldi	r18, 0xF4	; 244
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	f9 01       	movw	r30, r18
    1698:	20 81       	ld	r18, Z
    169a:	21 60       	ori	r18, 0x01	; 1
    169c:	fc 01       	movw	r30, r24
    169e:	20 83       	st	Z, r18
          Can_config_rx();       
    16a0:	8f ee       	ldi	r24, 0xEF	; 239
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	2f ee       	ldi	r18, 0xEF	; 239
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	f9 01       	movw	r30, r18
    16aa:	20 81       	ld	r18, Z
    16ac:	2f 73       	andi	r18, 0x3F	; 63
    16ae:	fc 01       	movw	r30, r24
    16b0:	20 83       	st	Z, r18
    16b2:	8f ee       	ldi	r24, 0xEF	; 239
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	2f ee       	ldi	r18, 0xEF	; 239
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	f9 01       	movw	r30, r18
    16bc:	20 81       	ld	r18, Z
    16be:	20 68       	ori	r18, 0x80	; 128
    16c0:	fc 01       	movw	r30, r24
    16c2:	20 83       	st	Z, r18
          break;
    16c4:	14 c2       	rjmp	.+1064   	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    16c6:	19 82       	std	Y+1, r1	; 0x01
    16c8:	13 c0       	rjmp	.+38     	; 0x16f0 <__stack+0xdf1>
    16ca:	8a ef       	ldi	r24, 0xFA	; 250
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	29 85       	ldd	r18, Y+9	; 0x09
    16d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    16d2:	f9 01       	movw	r30, r18
    16d4:	47 81       	ldd	r20, Z+7	; 0x07
    16d6:	50 85       	ldd	r21, Z+8	; 0x08
    16d8:	29 81       	ldd	r18, Y+1	; 0x01
    16da:	22 2f       	mov	r18, r18
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	24 0f       	add	r18, r20
    16e0:	35 1f       	adc	r19, r21
    16e2:	f9 01       	movw	r30, r18
    16e4:	20 81       	ld	r18, Z
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	8f 5f       	subi	r24, 0xFF	; 255
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	89 85       	ldd	r24, Y+9	; 0x09
    16f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f4:	fc 01       	movw	r30, r24
    16f6:	96 81       	ldd	r25, Z+6	; 0x06
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	89 17       	cp	r24, r25
    16fc:	30 f3       	brcs	.-52     	; 0x16ca <__stack+0xdcb>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    16fe:	1d 82       	std	Y+5, r1	; 0x05
    1700:	1e 82       	std	Y+6, r1	; 0x06
    1702:	1f 82       	std	Y+7, r1	; 0x07
    1704:	18 86       	std	Y+8, r1	; 0x08
    1706:	27 ef       	ldi	r18, 0xF7	; 247
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	ce 01       	movw	r24, r28
    170c:	05 96       	adiw	r24, 0x05	; 5
    170e:	03 96       	adiw	r24, 0x03	; 3
    1710:	fc 01       	movw	r30, r24
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	44 0f       	add	r20, r20
    1718:	44 0f       	add	r20, r20
    171a:	44 0f       	add	r20, r20
    171c:	ce 01       	movw	r24, r28
    171e:	05 96       	adiw	r24, 0x05	; 5
    1720:	02 96       	adiw	r24, 0x02	; 2
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	82 95       	swap	r24
    1728:	86 95       	lsr	r24
    172a:	87 70       	andi	r24, 0x07	; 7
    172c:	84 0f       	add	r24, r20
    172e:	f9 01       	movw	r30, r18
    1730:	80 83       	st	Z, r24
    1732:	26 ef       	ldi	r18, 0xF6	; 246
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	ce 01       	movw	r24, r28
    1738:	05 96       	adiw	r24, 0x05	; 5
    173a:	02 96       	adiw	r24, 0x02	; 2
    173c:	fc 01       	movw	r30, r24
    173e:	80 81       	ld	r24, Z
    1740:	48 2f       	mov	r20, r24
    1742:	44 0f       	add	r20, r20
    1744:	44 0f       	add	r20, r20
    1746:	44 0f       	add	r20, r20
    1748:	ce 01       	movw	r24, r28
    174a:	05 96       	adiw	r24, 0x05	; 5
    174c:	01 96       	adiw	r24, 0x01	; 1
    174e:	fc 01       	movw	r30, r24
    1750:	80 81       	ld	r24, Z
    1752:	82 95       	swap	r24
    1754:	86 95       	lsr	r24
    1756:	87 70       	andi	r24, 0x07	; 7
    1758:	84 0f       	add	r24, r20
    175a:	f9 01       	movw	r30, r18
    175c:	80 83       	st	Z, r24
    175e:	25 ef       	ldi	r18, 0xF5	; 245
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	ce 01       	movw	r24, r28
    1764:	05 96       	adiw	r24, 0x05	; 5
    1766:	01 96       	adiw	r24, 0x01	; 1
    1768:	fc 01       	movw	r30, r24
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	44 0f       	add	r20, r20
    1770:	44 0f       	add	r20, r20
    1772:	44 0f       	add	r20, r20
    1774:	ce 01       	movw	r24, r28
    1776:	05 96       	adiw	r24, 0x05	; 5
    1778:	fc 01       	movw	r30, r24
    177a:	80 81       	ld	r24, Z
    177c:	82 95       	swap	r24
    177e:	86 95       	lsr	r24
    1780:	87 70       	andi	r24, 0x07	; 7
    1782:	84 0f       	add	r24, r20
    1784:	f9 01       	movw	r30, r18
    1786:	80 83       	st	Z, r24
    1788:	84 ef       	ldi	r24, 0xF4	; 244
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	9e 01       	movw	r18, r28
    178e:	2b 5f       	subi	r18, 0xFB	; 251
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	f9 01       	movw	r30, r18
    1794:	20 81       	ld	r18, Z
    1796:	22 0f       	add	r18, r18
    1798:	22 0f       	add	r18, r18
    179a:	22 0f       	add	r18, r18
    179c:	fc 01       	movw	r30, r24
    179e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    17a0:	8f ee       	ldi	r24, 0xEF	; 239
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2f ee       	ldi	r18, 0xEF	; 239
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	f9 01       	movw	r30, r18
    17aa:	40 81       	ld	r20, Z
    17ac:	29 85       	ldd	r18, Y+9	; 0x09
    17ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b0:	f9 01       	movw	r30, r18
    17b2:	26 81       	ldd	r18, Z+6	; 0x06
    17b4:	24 2b       	or	r18, r20
    17b6:	fc 01       	movw	r30, r24
    17b8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    17ba:	89 85       	ldd	r24, Y+9	; 0x09
    17bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	fc 01       	movw	r30, r24
    17c2:	22 87       	std	Z+10, r18	; 0x0a
    17c4:	84 ef       	ldi	r24, 0xF4	; 244
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	24 ef       	ldi	r18, 0xF4	; 244
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	f9 01       	movw	r30, r18
    17ce:	20 81       	ld	r18, Z
    17d0:	24 60       	ori	r18, 0x04	; 4
    17d2:	fc 01       	movw	r30, r24
    17d4:	20 83       	st	Z, r18
    17d6:	80 ef       	ldi	r24, 0xF0	; 240
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	20 ef       	ldi	r18, 0xF0	; 240
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	f9 01       	movw	r30, r18
    17e0:	20 81       	ld	r18, Z
    17e2:	24 60       	ori	r18, 0x04	; 4
    17e4:	fc 01       	movw	r30, r24
    17e6:	20 83       	st	Z, r18
          Can_set_rplv();
    17e8:	8f ee       	ldi	r24, 0xEF	; 239
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	2f ee       	ldi	r18, 0xEF	; 239
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	f9 01       	movw	r30, r18
    17f2:	20 81       	ld	r18, Z
    17f4:	20 62       	ori	r18, 0x20	; 32
    17f6:	fc 01       	movw	r30, r24
    17f8:	20 83       	st	Z, r18
          Can_clear_idemsk();
    17fa:	84 ef       	ldi	r24, 0xF4	; 244
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	24 ef       	ldi	r18, 0xF4	; 244
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	f9 01       	movw	r30, r18
    1804:	20 81       	ld	r18, Z
    1806:	2e 7f       	andi	r18, 0xFE	; 254
    1808:	fc 01       	movw	r30, r24
    180a:	20 83       	st	Z, r18
          Can_config_rx();       
    180c:	8f ee       	ldi	r24, 0xEF	; 239
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	2f ee       	ldi	r18, 0xEF	; 239
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	f9 01       	movw	r30, r18
    1816:	20 81       	ld	r18, Z
    1818:	2f 73       	andi	r18, 0x3F	; 63
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    181e:	8f ee       	ldi	r24, 0xEF	; 239
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	2f ee       	ldi	r18, 0xEF	; 239
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	f9 01       	movw	r30, r18
    1828:	20 81       	ld	r18, Z
    182a:	20 68       	ori	r18, 0x80	; 128
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
          break;
    1830:	5e c1       	rjmp	.+700    	; 0x1aee <__stack+0x11ef>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	fc 01       	movw	r30, r24
    1838:	83 85       	ldd	r24, Z+11	; 0x0b
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <__stack+0xf41>
    183e:	69 c0       	rjmp	.+210    	; 0x1912 <__stack+0x1013>
    1840:	83 ef       	ldi	r24, 0xF3	; 243
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	29 85       	ldd	r18, Y+9	; 0x09
    1846:	3a 85       	ldd	r19, Y+10	; 0x0a
    1848:	2e 5f       	subi	r18, 0xFE	; 254
    184a:	3f 4f       	sbci	r19, 0xFF	; 255
    184c:	2d 5f       	subi	r18, 0xFD	; 253
    184e:	3f 4f       	sbci	r19, 0xFF	; 255
    1850:	f9 01       	movw	r30, r18
    1852:	20 81       	ld	r18, Z
    1854:	42 2f       	mov	r20, r18
    1856:	44 0f       	add	r20, r20
    1858:	44 0f       	add	r20, r20
    185a:	44 0f       	add	r20, r20
    185c:	29 85       	ldd	r18, Y+9	; 0x09
    185e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1860:	2e 5f       	subi	r18, 0xFE	; 254
    1862:	3f 4f       	sbci	r19, 0xFF	; 255
    1864:	2e 5f       	subi	r18, 0xFE	; 254
    1866:	3f 4f       	sbci	r19, 0xFF	; 255
    1868:	f9 01       	movw	r30, r18
    186a:	20 81       	ld	r18, Z
    186c:	22 95       	swap	r18
    186e:	26 95       	lsr	r18
    1870:	27 70       	andi	r18, 0x07	; 7
    1872:	24 0f       	add	r18, r20
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
    1878:	82 ef       	ldi	r24, 0xF2	; 242
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	29 85       	ldd	r18, Y+9	; 0x09
    187e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1880:	2e 5f       	subi	r18, 0xFE	; 254
    1882:	3f 4f       	sbci	r19, 0xFF	; 255
    1884:	2e 5f       	subi	r18, 0xFE	; 254
    1886:	3f 4f       	sbci	r19, 0xFF	; 255
    1888:	f9 01       	movw	r30, r18
    188a:	20 81       	ld	r18, Z
    188c:	42 2f       	mov	r20, r18
    188e:	44 0f       	add	r20, r20
    1890:	44 0f       	add	r20, r20
    1892:	44 0f       	add	r20, r20
    1894:	29 85       	ldd	r18, Y+9	; 0x09
    1896:	3a 85       	ldd	r19, Y+10	; 0x0a
    1898:	2e 5f       	subi	r18, 0xFE	; 254
    189a:	3f 4f       	sbci	r19, 0xFF	; 255
    189c:	2f 5f       	subi	r18, 0xFF	; 255
    189e:	3f 4f       	sbci	r19, 0xFF	; 255
    18a0:	f9 01       	movw	r30, r18
    18a2:	20 81       	ld	r18, Z
    18a4:	22 95       	swap	r18
    18a6:	26 95       	lsr	r18
    18a8:	27 70       	andi	r18, 0x07	; 7
    18aa:	24 0f       	add	r18, r20
    18ac:	fc 01       	movw	r30, r24
    18ae:	20 83       	st	Z, r18
    18b0:	81 ef       	ldi	r24, 0xF1	; 241
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	29 85       	ldd	r18, Y+9	; 0x09
    18b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b8:	2e 5f       	subi	r18, 0xFE	; 254
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	2f 5f       	subi	r18, 0xFF	; 255
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	f9 01       	movw	r30, r18
    18c2:	20 81       	ld	r18, Z
    18c4:	42 2f       	mov	r20, r18
    18c6:	44 0f       	add	r20, r20
    18c8:	44 0f       	add	r20, r20
    18ca:	44 0f       	add	r20, r20
    18cc:	29 85       	ldd	r18, Y+9	; 0x09
    18ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    18d0:	2e 5f       	subi	r18, 0xFE	; 254
    18d2:	3f 4f       	sbci	r19, 0xFF	; 255
    18d4:	f9 01       	movw	r30, r18
    18d6:	20 81       	ld	r18, Z
    18d8:	22 95       	swap	r18
    18da:	26 95       	lsr	r18
    18dc:	27 70       	andi	r18, 0x07	; 7
    18de:	24 0f       	add	r18, r20
    18e0:	fc 01       	movw	r30, r24
    18e2:	20 83       	st	Z, r18
    18e4:	80 ef       	ldi	r24, 0xF0	; 240
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	29 85       	ldd	r18, Y+9	; 0x09
    18ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ec:	2e 5f       	subi	r18, 0xFE	; 254
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	f9 01       	movw	r30, r18
    18f2:	20 81       	ld	r18, Z
    18f4:	22 0f       	add	r18, r18
    18f6:	22 0f       	add	r18, r18
    18f8:	22 0f       	add	r18, r18
    18fa:	fc 01       	movw	r30, r24
    18fc:	20 83       	st	Z, r18
    18fe:	8f ee       	ldi	r24, 0xEF	; 239
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	2f ee       	ldi	r18, 0xEF	; 239
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	f9 01       	movw	r30, r18
    1908:	20 81       	ld	r18, Z
    190a:	20 61       	ori	r18, 0x10	; 16
    190c:	fc 01       	movw	r30, r24
    190e:	20 83       	st	Z, r18
    1910:	30 c0       	rjmp	.+96     	; 0x1972 <__stack+0x1073>
          else              { Can_set_std_id(cmd->id.std);}
    1912:	83 ef       	ldi	r24, 0xF3	; 243
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	29 85       	ldd	r18, Y+9	; 0x09
    1918:	3a 85       	ldd	r19, Y+10	; 0x0a
    191a:	2e 5f       	subi	r18, 0xFE	; 254
    191c:	3f 4f       	sbci	r19, 0xFF	; 255
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	3f 4f       	sbci	r19, 0xFF	; 255
    1922:	f9 01       	movw	r30, r18
    1924:	20 81       	ld	r18, Z
    1926:	42 2f       	mov	r20, r18
    1928:	42 95       	swap	r20
    192a:	44 0f       	add	r20, r20
    192c:	40 7e       	andi	r20, 0xE0	; 224
    192e:	29 85       	ldd	r18, Y+9	; 0x09
    1930:	3a 85       	ldd	r19, Y+10	; 0x0a
    1932:	2e 5f       	subi	r18, 0xFE	; 254
    1934:	3f 4f       	sbci	r19, 0xFF	; 255
    1936:	f9 01       	movw	r30, r18
    1938:	20 81       	ld	r18, Z
    193a:	26 95       	lsr	r18
    193c:	26 95       	lsr	r18
    193e:	26 95       	lsr	r18
    1940:	24 0f       	add	r18, r20
    1942:	fc 01       	movw	r30, r24
    1944:	20 83       	st	Z, r18
    1946:	82 ef       	ldi	r24, 0xF2	; 242
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	29 85       	ldd	r18, Y+9	; 0x09
    194c:	3a 85       	ldd	r19, Y+10	; 0x0a
    194e:	2e 5f       	subi	r18, 0xFE	; 254
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	f9 01       	movw	r30, r18
    1954:	20 81       	ld	r18, Z
    1956:	22 95       	swap	r18
    1958:	22 0f       	add	r18, r18
    195a:	20 7e       	andi	r18, 0xE0	; 224
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
    1960:	8f ee       	ldi	r24, 0xEF	; 239
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	2f ee       	ldi	r18, 0xEF	; 239
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	f9 01       	movw	r30, r18
    196a:	20 81       	ld	r18, Z
    196c:	2f 7e       	andi	r18, 0xEF	; 239
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1972:	19 82       	std	Y+1, r1	; 0x01
    1974:	13 c0       	rjmp	.+38     	; 0x199c <__stack+0x109d>
    1976:	8a ef       	ldi	r24, 0xFA	; 250
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	29 85       	ldd	r18, Y+9	; 0x09
    197c:	3a 85       	ldd	r19, Y+10	; 0x0a
    197e:	f9 01       	movw	r30, r18
    1980:	47 81       	ldd	r20, Z+7	; 0x07
    1982:	50 85       	ldd	r21, Z+8	; 0x08
    1984:	29 81       	ldd	r18, Y+1	; 0x01
    1986:	22 2f       	mov	r18, r18
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	24 0f       	add	r18, r20
    198c:	35 1f       	adc	r19, r21
    198e:	f9 01       	movw	r30, r18
    1990:	20 81       	ld	r18, Z
    1992:	fc 01       	movw	r30, r24
    1994:	20 83       	st	Z, r18
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	fc 01       	movw	r30, r24
    19a2:	96 81       	ldd	r25, Z+6	; 0x06
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	89 17       	cp	r24, r25
    19a8:	30 f3       	brcs	.-52     	; 0x1976 <__stack+0x1077>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    19aa:	8f ef       	ldi	r24, 0xFF	; 255
    19ac:	9f ef       	ldi	r25, 0xFF	; 255
    19ae:	dc 01       	movw	r26, r24
    19b0:	8d 83       	std	Y+5, r24	; 0x05
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	af 83       	std	Y+7, r26	; 0x07
    19b6:	b8 87       	std	Y+8, r27	; 0x08
    19b8:	27 ef       	ldi	r18, 0xF7	; 247
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	ce 01       	movw	r24, r28
    19be:	05 96       	adiw	r24, 0x05	; 5
    19c0:	03 96       	adiw	r24, 0x03	; 3
    19c2:	fc 01       	movw	r30, r24
    19c4:	80 81       	ld	r24, Z
    19c6:	48 2f       	mov	r20, r24
    19c8:	44 0f       	add	r20, r20
    19ca:	44 0f       	add	r20, r20
    19cc:	44 0f       	add	r20, r20
    19ce:	ce 01       	movw	r24, r28
    19d0:	05 96       	adiw	r24, 0x05	; 5
    19d2:	02 96       	adiw	r24, 0x02	; 2
    19d4:	fc 01       	movw	r30, r24
    19d6:	80 81       	ld	r24, Z
    19d8:	82 95       	swap	r24
    19da:	86 95       	lsr	r24
    19dc:	87 70       	andi	r24, 0x07	; 7
    19de:	84 0f       	add	r24, r20
    19e0:	f9 01       	movw	r30, r18
    19e2:	80 83       	st	Z, r24
    19e4:	26 ef       	ldi	r18, 0xF6	; 246
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	ce 01       	movw	r24, r28
    19ea:	05 96       	adiw	r24, 0x05	; 5
    19ec:	02 96       	adiw	r24, 0x02	; 2
    19ee:	fc 01       	movw	r30, r24
    19f0:	80 81       	ld	r24, Z
    19f2:	48 2f       	mov	r20, r24
    19f4:	44 0f       	add	r20, r20
    19f6:	44 0f       	add	r20, r20
    19f8:	44 0f       	add	r20, r20
    19fa:	ce 01       	movw	r24, r28
    19fc:	05 96       	adiw	r24, 0x05	; 5
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	fc 01       	movw	r30, r24
    1a02:	80 81       	ld	r24, Z
    1a04:	82 95       	swap	r24
    1a06:	86 95       	lsr	r24
    1a08:	87 70       	andi	r24, 0x07	; 7
    1a0a:	84 0f       	add	r24, r20
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	80 83       	st	Z, r24
    1a10:	25 ef       	ldi	r18, 0xF5	; 245
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	ce 01       	movw	r24, r28
    1a16:	05 96       	adiw	r24, 0x05	; 5
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	80 81       	ld	r24, Z
    1a1e:	48 2f       	mov	r20, r24
    1a20:	44 0f       	add	r20, r20
    1a22:	44 0f       	add	r20, r20
    1a24:	44 0f       	add	r20, r20
    1a26:	ce 01       	movw	r24, r28
    1a28:	05 96       	adiw	r24, 0x05	; 5
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	80 81       	ld	r24, Z
    1a2e:	82 95       	swap	r24
    1a30:	86 95       	lsr	r24
    1a32:	87 70       	andi	r24, 0x07	; 7
    1a34:	84 0f       	add	r24, r20
    1a36:	f9 01       	movw	r30, r18
    1a38:	80 83       	st	Z, r24
    1a3a:	84 ef       	ldi	r24, 0xF4	; 244
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9e 01       	movw	r18, r28
    1a40:	2b 5f       	subi	r18, 0xFB	; 251
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	f9 01       	movw	r30, r18
    1a46:	20 81       	ld	r18, Z
    1a48:	22 0f       	add	r18, r18
    1a4a:	22 0f       	add	r18, r18
    1a4c:	22 0f       	add	r18, r18
    1a4e:	fc 01       	movw	r30, r24
    1a50:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1a52:	8f ee       	ldi	r24, 0xEF	; 239
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	2f ee       	ldi	r18, 0xEF	; 239
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	f9 01       	movw	r30, r18
    1a5c:	40 81       	ld	r20, Z
    1a5e:	29 85       	ldd	r18, Y+9	; 0x09
    1a60:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a62:	f9 01       	movw	r30, r18
    1a64:	26 81       	ldd	r18, Z+6	; 0x06
    1a66:	24 2b       	or	r18, r20
    1a68:	fc 01       	movw	r30, r24
    1a6a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	21 e0       	ldi	r18, 0x01	; 1
    1a72:	fc 01       	movw	r30, r24
    1a74:	22 87       	std	Z+10, r18	; 0x0a
    1a76:	84 ef       	ldi	r24, 0xF4	; 244
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	24 ef       	ldi	r18, 0xF4	; 244
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	f9 01       	movw	r30, r18
    1a80:	20 81       	ld	r18, Z
    1a82:	24 60       	ori	r18, 0x04	; 4
    1a84:	fc 01       	movw	r30, r24
    1a86:	20 83       	st	Z, r18
    1a88:	80 ef       	ldi	r24, 0xF0	; 240
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	20 ef       	ldi	r18, 0xF0	; 240
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	f9 01       	movw	r30, r18
    1a92:	20 81       	ld	r18, Z
    1a94:	24 60       	ori	r18, 0x04	; 4
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 83       	st	Z, r18
          Can_set_rplv();
    1a9a:	8f ee       	ldi	r24, 0xEF	; 239
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	2f ee       	ldi	r18, 0xEF	; 239
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	20 81       	ld	r18, Z
    1aa6:	20 62       	ori	r18, 0x20	; 32
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	20 83       	st	Z, r18
          Can_set_idemsk();
    1aac:	84 ef       	ldi	r24, 0xF4	; 244
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	24 ef       	ldi	r18, 0xF4	; 244
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	f9 01       	movw	r30, r18
    1ab6:	20 81       	ld	r18, Z
    1ab8:	21 60       	ori	r18, 0x01	; 1
    1aba:	fc 01       	movw	r30, r24
    1abc:	20 83       	st	Z, r18
          Can_config_rx();       
    1abe:	8f ee       	ldi	r24, 0xEF	; 239
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	2f ee       	ldi	r18, 0xEF	; 239
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	f9 01       	movw	r30, r18
    1ac8:	20 81       	ld	r18, Z
    1aca:	2f 73       	andi	r18, 0x3F	; 63
    1acc:	fc 01       	movw	r30, r24
    1ace:	20 83       	st	Z, r18
    1ad0:	8f ee       	ldi	r24, 0xEF	; 239
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	2f ee       	ldi	r18, 0xEF	; 239
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	f9 01       	movw	r30, r18
    1ada:	20 81       	ld	r18, Z
    1adc:	20 68       	ori	r18, 0x80	; 128
    1ade:	fc 01       	movw	r30, r24
    1ae0:	20 83       	st	Z, r18
          break;
    1ae2:	05 c0       	rjmp	.+10     	; 0x1aee <__stack+0x11ef>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	fc 01       	movw	r30, r24
    1aea:	11 86       	std	Z+9, r1	; 0x09
          break;
    1aec:	00 00       	nop
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <__stack+0x11ff>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1af0:	89 85       	ldd	r24, Y+9	; 0x09
    1af2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af4:	2f e1       	ldi	r18, 0x1F	; 31
    1af6:	fc 01       	movw	r30, r24
    1af8:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1afa:	8f ef       	ldi	r24, 0xFF	; 255
    1afc:	01 c0       	rjmp	.+2      	; 0x1b00 <__stack+0x1201>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1afe:	80 e0       	ldi	r24, 0x00	; 0
}
    1b00:	2a 96       	adiw	r28, 0x0a	; 10
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	f8 94       	cli
    1b06:	de bf       	out	0x3e, r29	; 62
    1b08:	0f be       	out	0x3f, r0	; 63
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	08 95       	ret

00001b12 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1b12:	cf 93       	push	r28
    1b14:	df 93       	push	r29
    1b16:	00 d0       	rcall	.+0      	; 0x1b18 <can_get_status+0x6>
    1b18:	00 d0       	rcall	.+0      	; 0x1b1a <can_get_status+0x8>
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
    1b1e:	9c 83       	std	Y+4, r25	; 0x04
    1b20:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	fc 01       	movw	r30, r24
    1b28:	81 85       	ldd	r24, Z+9	; 0x09
    1b2a:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2e:	88 23       	and	r24, r24
    1b30:	31 f0       	breq	.+12     	; 0x1b3e <can_get_status+0x2c>
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	8f 31       	cpi	r24, 0x1F	; 31
    1b36:	19 f0       	breq	.+6      	; 0x1b3e <can_get_status+0x2c>
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3c:	11 f4       	brne	.+4      	; 0x1b42 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1b3e:	82 e0       	ldi	r24, 0x02	; 2
    1b40:	11 c1       	rjmp	.+546    	; 0x1d64 <can_get_status+0x252>
    }

    Can_set_mob(cmd->handle);
    1b42:	8d ee       	ldi	r24, 0xED	; 237
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	2b 81       	ldd	r18, Y+3	; 0x03
    1b48:	3c 81       	ldd	r19, Y+4	; 0x04
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	20 81       	ld	r18, Z
    1b4e:	22 95       	swap	r18
    1b50:	20 7f       	andi	r18, 0xF0	; 240
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1b56:	0e 94 57 02 	call	0x4ae	; 0x4ae <can_get_mob_status>
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	88 2f       	mov	r24, r24
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	80 32       	cpi	r24, 0x20	; 32
    1b64:	91 05       	cpc	r25, r1
    1b66:	89 f0       	breq	.+34     	; 0x1b8a <can_get_status+0x78>
    1b68:	81 32       	cpi	r24, 0x21	; 33
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	1c f4       	brge	.+6      	; 0x1b74 <can_get_status+0x62>
    1b6e:	89 2b       	or	r24, r25
    1b70:	49 f0       	breq	.+18     	; 0x1b84 <can_get_status+0x72>
    1b72:	e2 c0       	rjmp	.+452    	; 0x1d38 <can_get_status+0x226>
    1b74:	80 34       	cpi	r24, 0x40	; 64
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <can_get_status+0x6a>
    1b7a:	ca c0       	rjmp	.+404    	; 0x1d10 <can_get_status+0x1fe>
    1b7c:	80 3a       	cpi	r24, 0xA0	; 160
    1b7e:	91 05       	cpc	r25, r1
    1b80:	21 f0       	breq	.+8      	; 0x1b8a <can_get_status+0x78>
    1b82:	da c0       	rjmp	.+436    	; 0x1d38 <can_get_status+0x226>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	89 83       	std	Y+1, r24	; 0x01
            break;
    1b88:	ec c0       	rjmp	.+472    	; 0x1d62 <can_get_status+0x250>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1b8a:	8f ee       	ldi	r24, 0xEF	; 239
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	fc 01       	movw	r30, r24
    1b90:	80 81       	ld	r24, Z
    1b92:	28 2f       	mov	r18, r24
    1b94:	2f 70       	andi	r18, 0x0F	; 15
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	87 81       	ldd	r24, Z+7	; 0x07
    1ba6:	90 85       	ldd	r25, Z+8	; 0x08
    1ba8:	0e 94 89 02 	call	0x512	; 0x512 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1bac:	80 ef       	ldi	r24, 0xF0	; 240
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	80 81       	ld	r24, Z
    1bb4:	88 2f       	mov	r24, r24
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	84 70       	andi	r24, 0x04	; 4
    1bba:	99 27       	eor	r25, r25
    1bbc:	95 95       	asr	r25
    1bbe:	87 95       	ror	r24
    1bc0:	95 95       	asr	r25
    1bc2:	87 95       	ror	r24
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	fc 01       	movw	r30, r24
    1bcc:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1bce:	8f ee       	ldi	r24, 0xEF	; 239
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	80 81       	ld	r24, Z
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	80 71       	andi	r24, 0x10	; 16
    1bdc:	99 27       	eor	r25, r25
    1bde:	95 95       	asr	r25
    1be0:	87 95       	ror	r24
    1be2:	95 95       	asr	r25
    1be4:	87 95       	ror	r24
    1be6:	95 95       	asr	r25
    1be8:	87 95       	ror	r24
    1bea:	95 95       	asr	r25
    1bec:	87 95       	ror	r24
    1bee:	89 2b       	or	r24, r25
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <can_get_status+0xe2>
    1bf2:	54 c0       	rjmp	.+168    	; 0x1c9c <can_get_status+0x18a>
            {
                cmd->ctrl.ide = 1; // extended frame
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	21 e0       	ldi	r18, 0x01	; 1
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	02 96       	adiw	r24, 0x02	; 2
    1c04:	03 96       	adiw	r24, 0x03	; 3
    1c06:	23 ef       	ldi	r18, 0xF3	; 243
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	f9 01       	movw	r30, r18
    1c0c:	20 81       	ld	r18, Z
    1c0e:	26 95       	lsr	r18
    1c10:	26 95       	lsr	r18
    1c12:	26 95       	lsr	r18
    1c14:	fc 01       	movw	r30, r24
    1c16:	20 83       	st	Z, r18
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	02 96       	adiw	r24, 0x02	; 2
    1c1e:	02 96       	adiw	r24, 0x02	; 2
    1c20:	22 ef       	ldi	r18, 0xF2	; 242
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	f9 01       	movw	r30, r18
    1c26:	20 81       	ld	r18, Z
    1c28:	42 2f       	mov	r20, r18
    1c2a:	46 95       	lsr	r20
    1c2c:	46 95       	lsr	r20
    1c2e:	46 95       	lsr	r20
    1c30:	23 ef       	ldi	r18, 0xF3	; 243
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	f9 01       	movw	r30, r18
    1c36:	20 81       	ld	r18, Z
    1c38:	22 95       	swap	r18
    1c3a:	22 0f       	add	r18, r18
    1c3c:	20 7e       	andi	r18, 0xE0	; 224
    1c3e:	24 0f       	add	r18, r20
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	02 96       	adiw	r24, 0x02	; 2
    1c4a:	01 96       	adiw	r24, 0x01	; 1
    1c4c:	21 ef       	ldi	r18, 0xF1	; 241
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	f9 01       	movw	r30, r18
    1c52:	20 81       	ld	r18, Z
    1c54:	42 2f       	mov	r20, r18
    1c56:	46 95       	lsr	r20
    1c58:	46 95       	lsr	r20
    1c5a:	46 95       	lsr	r20
    1c5c:	22 ef       	ldi	r18, 0xF2	; 242
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	f9 01       	movw	r30, r18
    1c62:	20 81       	ld	r18, Z
    1c64:	22 95       	swap	r18
    1c66:	22 0f       	add	r18, r18
    1c68:	20 7e       	andi	r18, 0xE0	; 224
    1c6a:	24 0f       	add	r18, r20
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	20 83       	st	Z, r18
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	02 96       	adiw	r24, 0x02	; 2
    1c76:	20 ef       	ldi	r18, 0xF0	; 240
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	f9 01       	movw	r30, r18
    1c7c:	20 81       	ld	r18, Z
    1c7e:	42 2f       	mov	r20, r18
    1c80:	46 95       	lsr	r20
    1c82:	46 95       	lsr	r20
    1c84:	46 95       	lsr	r20
    1c86:	21 ef       	ldi	r18, 0xF1	; 241
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	20 81       	ld	r18, Z
    1c8e:	22 95       	swap	r18
    1c90:	22 0f       	add	r18, r18
    1c92:	20 7e       	andi	r18, 0xE0	; 224
    1c94:	24 0f       	add	r18, r20
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18
    1c9a:	26 c0       	rjmp	.+76     	; 0x1ce8 <can_get_status+0x1d6>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	02 96       	adiw	r24, 0x02	; 2
    1caa:	01 96       	adiw	r24, 0x01	; 1
    1cac:	23 ef       	ldi	r18, 0xF3	; 243
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	22 95       	swap	r18
    1cb6:	26 95       	lsr	r18
    1cb8:	27 70       	andi	r18, 0x07	; 7
    1cba:	fc 01       	movw	r30, r24
    1cbc:	20 83       	st	Z, r18
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc2:	02 96       	adiw	r24, 0x02	; 2
    1cc4:	22 ef       	ldi	r18, 0xF2	; 242
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	f9 01       	movw	r30, r18
    1cca:	20 81       	ld	r18, Z
    1ccc:	42 2f       	mov	r20, r18
    1cce:	42 95       	swap	r20
    1cd0:	46 95       	lsr	r20
    1cd2:	47 70       	andi	r20, 0x07	; 7
    1cd4:	23 ef       	ldi	r18, 0xF3	; 243
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	f9 01       	movw	r30, r18
    1cda:	20 81       	ld	r18, Z
    1cdc:	22 0f       	add	r18, r18
    1cde:	22 0f       	add	r18, r18
    1ce0:	22 0f       	add	r18, r18
    1ce2:	24 0f       	add	r18, r20
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	2a 81       	ldd	r18, Y+2	; 0x02
    1cee:	fc 01       	movw	r30, r24
    1cf0:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1cf2:	8f ee       	ldi	r24, 0xEF	; 239
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	2f ee       	ldi	r18, 0xEF	; 239
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	f9 01       	movw	r30, r18
    1cfc:	20 81       	ld	r18, Z
    1cfe:	2f 73       	andi	r18, 0x3F	; 63
    1d00:	fc 01       	movw	r30, r24
    1d02:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d04:	8e ee       	ldi	r24, 0xEE	; 238
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	fc 01       	movw	r30, r24
    1d0a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
            break;
    1d0e:	29 c0       	rjmp	.+82     	; 0x1d62 <can_get_status+0x250>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1d10:	8b 81       	ldd	r24, Y+3	; 0x03
    1d12:	9c 81       	ldd	r25, Y+4	; 0x04
    1d14:	2a 81       	ldd	r18, Y+2	; 0x02
    1d16:	fc 01       	movw	r30, r24
    1d18:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1d1a:	8f ee       	ldi	r24, 0xEF	; 239
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	2f ee       	ldi	r18, 0xEF	; 239
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	f9 01       	movw	r30, r18
    1d24:	20 81       	ld	r18, Z
    1d26:	2f 73       	andi	r18, 0x3F	; 63
    1d28:	fc 01       	movw	r30, r24
    1d2a:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d2c:	8e ee       	ldi	r24, 0xEE	; 238
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	fc 01       	movw	r30, r24
    1d32:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1d34:	19 82       	std	Y+1, r1	; 0x01
            break;
    1d36:	15 c0       	rjmp	.+42     	; 0x1d62 <can_get_status+0x250>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1d42:	8f ee       	ldi	r24, 0xEF	; 239
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	2f ee       	ldi	r18, 0xEF	; 239
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	20 81       	ld	r18, Z
    1d4e:	2f 73       	andi	r18, 0x3F	; 63
    1d50:	fc 01       	movw	r30, r24
    1d52:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1d54:	8e ee       	ldi	r24, 0xEE	; 238
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	fc 01       	movw	r30, r24
    1d5a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
    1d5e:	89 83       	std	Y+1, r24	; 0x01
            break;
    1d60:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1d62:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	08 95       	ret

00001d72 <main>:
void can_rxMessage(void);
void can_txMessage(uint8_t *txData, uint16_t id);
void can_logEvent(st_cmd_t *msg);

/* -- main -- */
int main(void) {			
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    /********** System Initilization **********/
	timer1_init();
    1d7a:	0e 94 87 00 	call	0x10e	; 0x10e <timer1_init>
	gpio_init();	
    1d7e:	0e 94 68 00 	call	0xd0	; 0xd0 <gpio_init>
	uart_init(UART_BAUD_RATE);
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	9b e4       	ldi	r25, 0x4B	; 75
    1d86:	0e 94 a7 00 	call	0x14e	; 0x14e <uart_init>
	sei();
    1d8a:	78 94       	sei
	canInitFlag = can_init(0);
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	0e 94 d6 02 	call	0x5ac	; 0x5ac <can_init>
    1d92:	80 93 58 02 	sts	0x0258, r24
	
	printf("CAN Bus monitor program for ECET 32300 and 42301\n\r");
    1d96:	82 e3       	ldi	r24, 0x32	; 50
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	89 2f       	mov	r24, r25
    1d9c:	8f 93       	push	r24
    1d9e:	82 e3       	ldi	r24, 0x32	; 50
    1da0:	91 e0       	ldi	r25, 0x01	; 1
    1da2:	8f 93       	push	r24
    1da4:	0e 94 21 11 	call	0x2242	; 0x2242 <printf>
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
	/************** System Loop **************/	
    while(1) 
	{	
		can_state = CAN_TX_ACTIVE;
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	80 93 37 02 	sts	0x0237, r24
		switch(can_state) 
    1db2:	80 91 37 02 	lds	r24, 0x0237
    1db6:	88 2f       	mov	r24, r24
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	19 f0       	breq	.+6      	; 0x1dc6 <main+0x54>
    1dc0:	02 97       	sbiw	r24, 0x02	; 2
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <main+0x5a>
		{
			case CAN_INACTIVE:
				// TODO:: implement menu system to select modes
				break;
    1dc4:	0a c0       	rjmp	.+20     	; 0x1dda <main+0x68>
				
			case CAN_RX_ACTIVE:
				can_rxMessage();
    1dc6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <can_rxMessage>
				break;
    1dca:	07 c0       	rjmp	.+14     	; 0x1dda <main+0x68>
				
			case CAN_TX_ACTIVE:
				can_txMessage(Data_to_send, MY_ID);
    1dcc:	63 e2       	ldi	r22, 0x23	; 35
    1dce:	71 e0       	ldi	r23, 0x01	; 1
    1dd0:	8e e0       	ldi	r24, 0x0E	; 14
    1dd2:	91 e0       	ldi	r25, 0x01	; 1
    1dd4:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <can_txMessage>
				break;
    1dd8:	00 00       	nop
		}
	}
    1dda:	e8 cf       	rjmp	.-48     	; 0x1dac <main+0x3a>

00001ddc <can_rxMessage>:
	}
	return(1);
}

void can_rxMessage(void) 
{
    1ddc:	cf 93       	push	r28
    1dde:	df 93       	push	r29
    1de0:	1f 92       	push	r1
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
	/* Init Rx Data */
	rx_message.pt_data = &canDataBuffer_rx[0];
    1de6:	88 e3       	ldi	r24, 0x38	; 56
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	90 93 48 02 	sts	0x0248, r25
    1dee:	80 93 47 02 	sts	0x0247, r24
	for(uint8_t i=0; i < DATA_BUFFER_SIZE_RX; i++) 
    1df2:	19 82       	std	Y+1, r1	; 0x01
    1df4:	0a c0       	rjmp	.+20     	; 0x1e0a <can_rxMessage+0x2e>
	{
		canDataBuffer_rx[i] = 0;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	88 5c       	subi	r24, 0xC8	; 200
    1dfe:	9d 4f       	sbci	r25, 0xFD	; 253
    1e00:	fc 01       	movw	r30, r24
    1e02:	10 82       	st	Z, r1

void can_rxMessage(void) 
{
	/* Init Rx Data */
	rx_message.pt_data = &canDataBuffer_rx[0];
	for(uint8_t i=0; i < DATA_BUFFER_SIZE_RX; i++) 
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	8f 5f       	subi	r24, 0xFF	; 255
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	98 f3       	brcs	.-26     	; 0x1df6 <can_rxMessage+0x1a>
	{
		canDataBuffer_rx[i] = 0;
	}
	/* Set to Rx Command */
	rx_message.cmd = CMD_RX;
    1e10:	84 e0       	ldi	r24, 0x04	; 4
    1e12:	80 93 41 02 	sts	0x0241, r24
	
	/* Enable Rx */
	while(can_cmd(&rx_message) != CAN_CMD_ACCEPTED);
    1e16:	00 00       	nop
    1e18:	80 e4       	ldi	r24, 0x40	; 64
    1e1a:	92 e0       	ldi	r25, 0x02	; 2
    1e1c:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <can_cmd>
    1e20:	88 23       	and	r24, r24
    1e22:	d1 f7       	brne	.-12     	; 0x1e18 <can_rxMessage+0x3c>
	
	/* Wait for Rx Complete */
	while(1) 
	{
		u8_temp = can_get_status(&rx_message);
    1e24:	80 e4       	ldi	r24, 0x40	; 64
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <can_get_status>
    1e2c:	80 93 64 02 	sts	0x0264, r24
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;	// break out of loop
    1e30:	80 91 64 02 	lds	r24, 0x0264
    1e34:	81 30       	cpi	r24, 0x01	; 1
    1e36:	91 f0       	breq	.+36     	; 0x1e5c <can_rxMessage+0x80>
    1e38:	00 00       	nop
	}
	//if(u8_temp == CAN_STATUS_ERROR) break;	// break out of function
	
	//logEvent("CAN Message Received");
	can_logEvent(&rx_message);
    1e3a:	80 e4       	ldi	r24, 0x40	; 64
    1e3c:	92 e0       	ldi	r25, 0x02	; 2
    1e3e:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <can_logEvent>
	
	if((rx_message.id.ext == 0) || (rx_message.id.std == 0)) 
    1e42:	80 91 42 02 	lds	r24, 0x0242
    1e46:	90 91 43 02 	lds	r25, 0x0243
    1e4a:	a0 91 44 02 	lds	r26, 0x0244
    1e4e:	b0 91 45 02 	lds	r27, 0x0245
    1e52:	89 2b       	or	r24, r25
    1e54:	8a 2b       	or	r24, r26
    1e56:	8b 2b       	or	r24, r27
    1e58:	41 f0       	breq	.+16     	; 0x1e6a <can_rxMessage+0x8e>
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <can_rxMessage+0x82>
	/* Wait for Rx Complete */
	while(1) 
	{
		u8_temp = can_get_status(&rx_message);
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;	// break out of loop
	}
    1e5c:	e3 cf       	rjmp	.-58     	; 0x1e24 <can_rxMessage+0x48>
	//if(u8_temp == CAN_STATUS_ERROR) break;	// break out of function
	
	//logEvent("CAN Message Received");
	can_logEvent(&rx_message);
	
	if((rx_message.id.ext == 0) || (rx_message.id.std == 0)) 
    1e5e:	80 91 42 02 	lds	r24, 0x0242
    1e62:	90 91 43 02 	lds	r25, 0x0243
    1e66:	89 2b       	or	r24, r25
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <can_rxMessage+0x96>
	{
		logEvent("CAN ERROR Simulation, broke out of loop");
    1e6a:	86 ec       	ldi	r24, 0xC6	; 198
    1e6c:	91 e0       	ldi	r25, 0x01	; 1
    1e6e:	0e 94 3b 01 	call	0x276	; 0x276 <logEvent>
	}
}
    1e72:	0f 90       	pop	r0
    1e74:	df 91       	pop	r29
    1e76:	cf 91       	pop	r28
    1e78:	08 95       	ret

00001e7a <can_txMessage>:

void can_txMessage(uint8_t *txData, uint16_t id)
{
    1e7a:	cf 93       	push	r28
    1e7c:	df 93       	push	r29
    1e7e:	00 d0       	rcall	.+0      	; 0x1e80 <can_txMessage+0x6>
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <can_txMessage+0x8>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <can_txMessage+0xa>
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    1e8c:	7e 83       	std	Y+6, r23	; 0x06
    1e8e:	6d 83       	std	Y+5, r22	; 0x05
	/* Copy Data into CAN Buffer */
	uint8_t buffer_size = sizeof(&txData);
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8_t i=0; i < buffer_size; i++)
    1e94:	19 82       	std	Y+1, r1	; 0x01
    1e96:	13 c0       	rjmp	.+38     	; 0x1ebe <can_txMessage+0x44>
	{
		canDataBuffer_tx[i] = txData[i];
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	88 2f       	mov	r24, r24
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	4b 81       	ldd	r20, Y+3	; 0x03
    1ea0:	5c 81       	ldd	r21, Y+4	; 0x04
    1ea2:	29 81       	ldd	r18, Y+1	; 0x01
    1ea4:	22 2f       	mov	r18, r18
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	24 0f       	add	r18, r20
    1eaa:	35 1f       	adc	r19, r21
    1eac:	f9 01       	movw	r30, r18
    1eae:	20 81       	ld	r18, Z
    1eb0:	87 5a       	subi	r24, 0xA7	; 167
    1eb2:	9d 4f       	sbci	r25, 0xFD	; 253
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	20 83       	st	Z, r18

void can_txMessage(uint8_t *txData, uint16_t id)
{
	/* Copy Data into CAN Buffer */
	uint8_t buffer_size = sizeof(&txData);
	for(uint8_t i=0; i < buffer_size; i++)
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	8f 5f       	subi	r24, 0xFF	; 255
    1ebc:	89 83       	std	Y+1, r24	; 0x01
    1ebe:	99 81       	ldd	r25, Y+1	; 0x01
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	98 17       	cp	r25, r24
    1ec4:	48 f3       	brcs	.-46     	; 0x1e98 <can_txMessage+0x1e>
	{
		canDataBuffer_tx[i] = txData[i];
	}
	
	/* Initialize Tx Data */
	tx_message.pt_data = &canDataBuffer_tx[0];	// pointer to first element in data buffer
    1ec6:	89 e5       	ldi	r24, 0x59	; 89
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	90 93 54 02 	sts	0x0254, r25
    1ece:	80 93 53 02 	sts	0x0253, r24
	tx_message.id.std = id;	// CAN message ID
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	90 93 4f 02 	sts	0x024F, r25
    1eda:	80 93 4e 02 	sts	0x024E, r24
	tx_message.ctrl.ide = 0; // Sends standard (2.0A) CAN frames
    1ede:	10 92 57 02 	sts	0x0257, r1
	tx_message.ctrl.rtr = 1; // No remote response requested
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 93 56 02 	sts	0x0256, r24
    tx_message.dlc = buffer_size; // Number of data bytes in data field
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	80 93 52 02 	sts	0x0252, r24
	
	/* Set to Tx Command */
	tx_message.cmd = CMD_TX_DATA; 
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	80 93 4d 02 	sts	0x024D, r24
		
	/* Wait for Tx Complete */
	while(can_cmd(&tx_message) != CAN_CMD_ACCEPTED);
    1ef4:	00 00       	nop
    1ef6:	8c e4       	ldi	r24, 0x4C	; 76
    1ef8:	92 e0       	ldi	r25, 0x02	; 2
    1efa:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <can_cmd>
    1efe:	88 23       	and	r24, r24
    1f00:	d1 f7       	brne	.-12     	; 0x1ef6 <can_txMessage+0x7c>
	while(1) 
	{
		u8_temp = can_get_status(&tx_message);
    1f02:	8c e4       	ldi	r24, 0x4C	; 76
    1f04:	92 e0       	ldi	r25, 0x02	; 2
    1f06:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <can_get_status>
    1f0a:	80 93 64 02 	sts	0x0264, r24
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;
    1f0e:	80 91 64 02 	lds	r24, 0x0264
    1f12:	81 30       	cpi	r24, 0x01	; 1
    1f14:	31 f0       	breq	.+12     	; 0x1f22 <can_txMessage+0xa8>
    1f16:	00 00       	nop
	}
	
	if(u8_temp == CAN_STATUS_ERROR)
    1f18:	80 91 64 02 	lds	r24, 0x0264
    1f1c:	82 30       	cpi	r24, 0x02	; 2
    1f1e:	39 f4       	brne	.+14     	; 0x1f2e <can_txMessage+0xb4>
    1f20:	01 c0       	rjmp	.+2      	; 0x1f24 <can_txMessage+0xaa>
	while(can_cmd(&tx_message) != CAN_CMD_ACCEPTED);
	while(1) 
	{
		u8_temp = can_get_status(&tx_message);
		if(u8_temp != CAN_STATUS_NOT_COMPLETED) break;
	}
    1f22:	ef cf       	rjmp	.-34     	; 0x1f02 <can_txMessage+0x88>
	
	if(u8_temp == CAN_STATUS_ERROR)
	{
		logEvent("CAN ERROR");
    1f24:	8e ee       	ldi	r24, 0xEE	; 238
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	0e 94 3b 01 	call	0x276	; 0x276 <logEvent>
    1f2c:	04 c0       	rjmp	.+8      	; 0x1f36 <can_txMessage+0xbc>
	}
	else
	{
		logEvent("Tx Complete");
    1f2e:	88 ef       	ldi	r24, 0xF8	; 248
    1f30:	91 e0       	ldi	r25, 0x01	; 1
    1f32:	0e 94 3b 01 	call	0x276	; 0x276 <logEvent>
	}	
		
	if((tx_message.id.ext == 0) || (tx_message.id.std == 0)) 
    1f36:	80 91 4e 02 	lds	r24, 0x024E
    1f3a:	90 91 4f 02 	lds	r25, 0x024F
    1f3e:	a0 91 50 02 	lds	r26, 0x0250
    1f42:	b0 91 51 02 	lds	r27, 0x0251
    1f46:	89 2b       	or	r24, r25
    1f48:	8a 2b       	or	r24, r26
    1f4a:	8b 2b       	or	r24, r27
    1f4c:	31 f0       	breq	.+12     	; 0x1f5a <can_txMessage+0xe0>
    1f4e:	80 91 4e 02 	lds	r24, 0x024E
    1f52:	90 91 4f 02 	lds	r25, 0x024F
    1f56:	89 2b       	or	r24, r25
    1f58:	21 f4       	brne	.+8      	; 0x1f62 <can_txMessage+0xe8>
	{
		logEvent("CAN ERROR Simulation, broke out of loop");
    1f5a:	86 ec       	ldi	r24, 0xC6	; 198
    1f5c:	91 e0       	ldi	r25, 0x01	; 1
    1f5e:	0e 94 3b 01 	call	0x276	; 0x276 <logEvent>
	}
}
    1f62:	26 96       	adiw	r28, 0x06	; 6
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	08 95       	ret

00001f74 <can_logEvent>:

void can_logEvent(st_cmd_t *msg) 
{
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	28 97       	sbiw	r28, 0x08	; 8
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	9a 83       	std	Y+2, r25	; 0x02
    1f92:	89 83       	std	Y+1, r24	; 0x01
	// static variables will hold their values to be printed each pass whether they have been updated in the current cycle or not
	static int16_t voltage = 0;
	static int16_t current = 0;
	static uint8_t highest_error = 0;
	
	if (msg->ctrl.ide) 
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	9a 81       	ldd	r25, Y+2	; 0x02
    1f98:	fc 01       	movw	r30, r24
    1f9a:	83 85       	ldd	r24, Z+11	; 0x0b
    1f9c:	88 23       	and	r24, r24
    1f9e:	09 f0       	breq	.+2      	; 0x1fa2 <can_logEvent+0x2e>
    1fa0:	c5 c0       	rjmp	.+394    	; 0x212c <can_logEvent+0x1b8>
	else 
	{
		

		// message 301h contains current and voltage values
		if (msg->id.std == 0x301)
    1fa2:	89 81       	ldd	r24, Y+1	; 0x01
    1fa4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	93 40       	sbci	r25, 0x03	; 3
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <can_logEvent+0x40>
    1fb2:	47 c0       	rjmp	.+142    	; 0x2042 <can_logEvent+0xce>
		{
						
			voltage = *(msg->pt_data + 2);					// get the upper 8-bit from the array
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	fc 01       	movw	r30, r24
    1fba:	87 81       	ldd	r24, Z+7	; 0x07
    1fbc:	90 85       	ldd	r25, Z+8	; 0x08
    1fbe:	02 96       	adiw	r24, 0x02	; 2
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	90 93 33 02 	sts	0x0233, r25
    1fcc:	80 93 32 02 	sts	0x0232, r24
			voltage = (voltage << 8) + *(msg->pt_data + 3);	// move the upper byte and add the lower byte - value is inflated by a factor of 10
    1fd0:	80 91 32 02 	lds	r24, 0x0232
    1fd4:	90 91 33 02 	lds	r25, 0x0233
    1fd8:	38 2f       	mov	r19, r24
    1fda:	22 27       	eor	r18, r18
    1fdc:	89 81       	ldd	r24, Y+1	; 0x01
    1fde:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	87 81       	ldd	r24, Z+7	; 0x07
    1fe4:	90 85       	ldd	r25, Z+8	; 0x08
    1fe6:	03 96       	adiw	r24, 0x03	; 3
    1fe8:	fc 01       	movw	r30, r24
    1fea:	80 81       	ld	r24, Z
    1fec:	88 2f       	mov	r24, r24
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	82 0f       	add	r24, r18
    1ff2:	93 1f       	adc	r25, r19
    1ff4:	90 93 33 02 	sts	0x0233, r25
    1ff8:	80 93 32 02 	sts	0x0232, r24
			
			current = *(msg->pt_data);						// get the upper of the current data
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	fc 01       	movw	r30, r24
    2002:	87 81       	ldd	r24, Z+7	; 0x07
    2004:	90 85       	ldd	r25, Z+8	; 0x08
    2006:	fc 01       	movw	r30, r24
    2008:	80 81       	ld	r24, Z
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	90 93 35 02 	sts	0x0235, r25
    2012:	80 93 34 02 	sts	0x0234, r24
			current = (current << 8) + *(msg->pt_data + 1);	// move the upper byte and add the lower byte - value is inflated by a factor of 10
    2016:	80 91 34 02 	lds	r24, 0x0234
    201a:	90 91 35 02 	lds	r25, 0x0235
    201e:	38 2f       	mov	r19, r24
    2020:	22 27       	eor	r18, r18
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	9a 81       	ldd	r25, Y+2	; 0x02
    2026:	fc 01       	movw	r30, r24
    2028:	87 81       	ldd	r24, Z+7	; 0x07
    202a:	90 85       	ldd	r25, Z+8	; 0x08
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	fc 01       	movw	r30, r24
    2030:	80 81       	ld	r24, Z
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	82 0f       	add	r24, r18
    2038:	93 1f       	adc	r25, r19
    203a:	90 93 35 02 	sts	0x0235, r25
    203e:	80 93 34 02 	sts	0x0234, r24
			
			//printf ("\n Volts = %d  Current = %d", voltage, current);
		}

		// message 610h contains the highest error reason code in byte 7
		if (msg->id.std == 0x610)
    2042:	89 81       	ldd	r24, Y+1	; 0x01
    2044:	9a 81       	ldd	r25, Y+2	; 0x02
    2046:	fc 01       	movw	r30, r24
    2048:	82 81       	ldd	r24, Z+2	; 0x02
    204a:	93 81       	ldd	r25, Z+3	; 0x03
    204c:	80 31       	cpi	r24, 0x10	; 16
    204e:	96 40       	sbci	r25, 0x06	; 6
    2050:	49 f4       	brne	.+18     	; 0x2064 <can_logEvent+0xf0>
		{
			highest_error = *(msg->pt_data + 7);
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	9a 81       	ldd	r25, Y+2	; 0x02
    2056:	fc 01       	movw	r30, r24
    2058:	87 81       	ldd	r24, Z+7	; 0x07
    205a:	90 85       	ldd	r25, Z+8	; 0x08
    205c:	fc 01       	movw	r30, r24
    205e:	87 81       	ldd	r24, Z+7	; 0x07
    2060:	80 93 36 02 	sts	0x0236, r24
		}
		
		printf ("\n %02d.%d VDC  %03d.%d Amps   Error = %02d", (voltage / 10), (voltage % 10), (current / 10), ((uint16_t) current %10), highest_error);
    2064:	80 91 36 02 	lds	r24, 0x0236
    2068:	e8 2f       	mov	r30, r24
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 91 34 02 	lds	r24, 0x0234
    2070:	90 91 35 02 	lds	r25, 0x0235
    2074:	ac 01       	movw	r20, r24
    2076:	9a 01       	movw	r18, r20
    2078:	ad ec       	ldi	r26, 0xCD	; 205
    207a:	bc ec       	ldi	r27, 0xCC	; 204
    207c:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__umulhisi3>
    2080:	9c 01       	movw	r18, r24
    2082:	36 95       	lsr	r19
    2084:	27 95       	ror	r18
    2086:	36 95       	lsr	r19
    2088:	27 95       	ror	r18
    208a:	36 95       	lsr	r19
    208c:	27 95       	ror	r18
    208e:	c9 01       	movw	r24, r18
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	9c 01       	movw	r18, r24
    2096:	22 0f       	add	r18, r18
    2098:	33 1f       	adc	r19, r19
    209a:	22 0f       	add	r18, r18
    209c:	33 1f       	adc	r19, r19
    209e:	82 0f       	add	r24, r18
    20a0:	93 1f       	adc	r25, r19
    20a2:	9a 01       	movw	r18, r20
    20a4:	28 1b       	sub	r18, r24
    20a6:	39 0b       	sbc	r19, r25
    20a8:	80 91 34 02 	lds	r24, 0x0234
    20ac:	90 91 35 02 	lds	r25, 0x0235
    20b0:	4a e0       	ldi	r20, 0x0A	; 10
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	ba 01       	movw	r22, r20
    20b6:	0e 94 a3 10 	call	0x2146	; 0x2146 <__divmodhi4>
    20ba:	cb 01       	movw	r24, r22
    20bc:	7c 01       	movw	r14, r24
    20be:	80 91 32 02 	lds	r24, 0x0232
    20c2:	90 91 33 02 	lds	r25, 0x0233
    20c6:	4a e0       	ldi	r20, 0x0A	; 10
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	ba 01       	movw	r22, r20
    20cc:	0e 94 a3 10 	call	0x2146	; 0x2146 <__divmodhi4>
    20d0:	8c 01       	movw	r16, r24
    20d2:	80 91 32 02 	lds	r24, 0x0232
    20d6:	90 91 33 02 	lds	r25, 0x0233
    20da:	4a e0       	ldi	r20, 0x0A	; 10
    20dc:	50 e0       	ldi	r21, 0x00	; 0
    20de:	ba 01       	movw	r22, r20
    20e0:	0e 94 a3 10 	call	0x2146	; 0x2146 <__divmodhi4>
    20e4:	cb 01       	movw	r24, r22
    20e6:	4f 2f       	mov	r20, r31
    20e8:	4f 93       	push	r20
    20ea:	4e 2f       	mov	r20, r30
    20ec:	4f 93       	push	r20
    20ee:	43 2f       	mov	r20, r19
    20f0:	4f 93       	push	r20
    20f2:	2f 93       	push	r18
    20f4:	2f 2d       	mov	r18, r15
    20f6:	2f 93       	push	r18
    20f8:	2e 2d       	mov	r18, r14
    20fa:	2f 93       	push	r18
    20fc:	21 2f       	mov	r18, r17
    20fe:	2f 93       	push	r18
    2100:	20 2f       	mov	r18, r16
    2102:	2f 93       	push	r18
    2104:	29 2f       	mov	r18, r25
    2106:	2f 93       	push	r18
    2108:	8f 93       	push	r24
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	92 e0       	ldi	r25, 0x02	; 2
    210e:	89 2f       	mov	r24, r25
    2110:	8f 93       	push	r24
    2112:	84 e0       	ldi	r24, 0x04	; 4
    2114:	92 e0       	ldi	r25, 0x02	; 2
    2116:	8f 93       	push	r24
    2118:	0e 94 21 11 	call	0x2242	; 0x2242 <printf>
    211c:	8d b7       	in	r24, 0x3d	; 61
    211e:	9e b7       	in	r25, 0x3e	; 62
    2120:	0c 96       	adiw	r24, 0x0c	; 12
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	de bf       	out	0x3e, r29	; 62
    2128:	0f be       	out	0x3f, r0	; 63
    212a:	cd bf       	out	0x3d, r28	; 61
		
	}
    212c:	28 96       	adiw	r28, 0x08	; 8
    212e:	0f b6       	in	r0, 0x3f	; 63
    2130:	f8 94       	cli
    2132:	de bf       	out	0x3e, r29	; 62
    2134:	0f be       	out	0x3f, r0	; 63
    2136:	cd bf       	out	0x3d, r28	; 61
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	08 95       	ret

00002146 <__divmodhi4>:
    2146:	97 fb       	bst	r25, 7
    2148:	07 2e       	mov	r0, r23
    214a:	16 f4       	brtc	.+4      	; 0x2150 <__divmodhi4+0xa>
    214c:	00 94       	com	r0
    214e:	07 d0       	rcall	.+14     	; 0x215e <__divmodhi4_neg1>
    2150:	77 fd       	sbrc	r23, 7
    2152:	09 d0       	rcall	.+18     	; 0x2166 <__divmodhi4_neg2>
    2154:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <__udivmodhi4>
    2158:	07 fc       	sbrc	r0, 7
    215a:	05 d0       	rcall	.+10     	; 0x2166 <__divmodhi4_neg2>
    215c:	3e f4       	brtc	.+14     	; 0x216c <__divmodhi4_exit>

0000215e <__divmodhi4_neg1>:
    215e:	90 95       	com	r25
    2160:	81 95       	neg	r24
    2162:	9f 4f       	sbci	r25, 0xFF	; 255
    2164:	08 95       	ret

00002166 <__divmodhi4_neg2>:
    2166:	70 95       	com	r23
    2168:	61 95       	neg	r22
    216a:	7f 4f       	sbci	r23, 0xFF	; 255

0000216c <__divmodhi4_exit>:
    216c:	08 95       	ret

0000216e <__divmodsi4>:
    216e:	05 2e       	mov	r0, r21
    2170:	97 fb       	bst	r25, 7
    2172:	1e f4       	brtc	.+6      	; 0x217a <__divmodsi4+0xc>
    2174:	00 94       	com	r0
    2176:	0e 94 ce 10 	call	0x219c	; 0x219c <__negsi2>
    217a:	57 fd       	sbrc	r21, 7
    217c:	07 d0       	rcall	.+14     	; 0x218c <__divmodsi4_neg2>
    217e:	0e 94 ff 10 	call	0x21fe	; 0x21fe <__udivmodsi4>
    2182:	07 fc       	sbrc	r0, 7
    2184:	03 d0       	rcall	.+6      	; 0x218c <__divmodsi4_neg2>
    2186:	4e f4       	brtc	.+18     	; 0x219a <__divmodsi4_exit>
    2188:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__negsi2>

0000218c <__divmodsi4_neg2>:
    218c:	50 95       	com	r21
    218e:	40 95       	com	r20
    2190:	30 95       	com	r19
    2192:	21 95       	neg	r18
    2194:	3f 4f       	sbci	r19, 0xFF	; 255
    2196:	4f 4f       	sbci	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255

0000219a <__divmodsi4_exit>:
    219a:	08 95       	ret

0000219c <__negsi2>:
    219c:	90 95       	com	r25
    219e:	80 95       	com	r24
    21a0:	70 95       	com	r23
    21a2:	61 95       	neg	r22
    21a4:	7f 4f       	sbci	r23, 0xFF	; 255
    21a6:	8f 4f       	sbci	r24, 0xFF	; 255
    21a8:	9f 4f       	sbci	r25, 0xFF	; 255
    21aa:	08 95       	ret

000021ac <__tablejump2__>:
    21ac:	ee 0f       	add	r30, r30
    21ae:	ff 1f       	adc	r31, r31
    21b0:	05 90       	lpm	r0, Z+
    21b2:	f4 91       	lpm	r31, Z
    21b4:	e0 2d       	mov	r30, r0
    21b6:	09 94       	ijmp

000021b8 <__umulhisi3>:
    21b8:	a2 9f       	mul	r26, r18
    21ba:	b0 01       	movw	r22, r0
    21bc:	b3 9f       	mul	r27, r19
    21be:	c0 01       	movw	r24, r0
    21c0:	a3 9f       	mul	r26, r19
    21c2:	70 0d       	add	r23, r0
    21c4:	81 1d       	adc	r24, r1
    21c6:	11 24       	eor	r1, r1
    21c8:	91 1d       	adc	r25, r1
    21ca:	b2 9f       	mul	r27, r18
    21cc:	70 0d       	add	r23, r0
    21ce:	81 1d       	adc	r24, r1
    21d0:	11 24       	eor	r1, r1
    21d2:	91 1d       	adc	r25, r1
    21d4:	08 95       	ret

000021d6 <__udivmodhi4>:
    21d6:	aa 1b       	sub	r26, r26
    21d8:	bb 1b       	sub	r27, r27
    21da:	51 e1       	ldi	r21, 0x11	; 17
    21dc:	07 c0       	rjmp	.+14     	; 0x21ec <__udivmodhi4_ep>

000021de <__udivmodhi4_loop>:
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	a6 17       	cp	r26, r22
    21e4:	b7 07       	cpc	r27, r23
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <__udivmodhi4_ep>
    21e8:	a6 1b       	sub	r26, r22
    21ea:	b7 0b       	sbc	r27, r23

000021ec <__udivmodhi4_ep>:
    21ec:	88 1f       	adc	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	5a 95       	dec	r21
    21f2:	a9 f7       	brne	.-22     	; 0x21de <__udivmodhi4_loop>
    21f4:	80 95       	com	r24
    21f6:	90 95       	com	r25
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	08 95       	ret

000021fe <__udivmodsi4>:
    21fe:	a1 e2       	ldi	r26, 0x21	; 33
    2200:	1a 2e       	mov	r1, r26
    2202:	aa 1b       	sub	r26, r26
    2204:	bb 1b       	sub	r27, r27
    2206:	fd 01       	movw	r30, r26
    2208:	0d c0       	rjmp	.+26     	; 0x2224 <__udivmodsi4_ep>

0000220a <__udivmodsi4_loop>:
    220a:	aa 1f       	adc	r26, r26
    220c:	bb 1f       	adc	r27, r27
    220e:	ee 1f       	adc	r30, r30
    2210:	ff 1f       	adc	r31, r31
    2212:	a2 17       	cp	r26, r18
    2214:	b3 07       	cpc	r27, r19
    2216:	e4 07       	cpc	r30, r20
    2218:	f5 07       	cpc	r31, r21
    221a:	20 f0       	brcs	.+8      	; 0x2224 <__udivmodsi4_ep>
    221c:	a2 1b       	sub	r26, r18
    221e:	b3 0b       	sbc	r27, r19
    2220:	e4 0b       	sbc	r30, r20
    2222:	f5 0b       	sbc	r31, r21

00002224 <__udivmodsi4_ep>:
    2224:	66 1f       	adc	r22, r22
    2226:	77 1f       	adc	r23, r23
    2228:	88 1f       	adc	r24, r24
    222a:	99 1f       	adc	r25, r25
    222c:	1a 94       	dec	r1
    222e:	69 f7       	brne	.-38     	; 0x220a <__udivmodsi4_loop>
    2230:	60 95       	com	r22
    2232:	70 95       	com	r23
    2234:	80 95       	com	r24
    2236:	90 95       	com	r25
    2238:	9b 01       	movw	r18, r22
    223a:	ac 01       	movw	r20, r24
    223c:	bd 01       	movw	r22, r26
    223e:	cf 01       	movw	r24, r30
    2240:	08 95       	ret

00002242 <printf>:
    2242:	a0 e0       	ldi	r26, 0x00	; 0
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e7 e2       	ldi	r30, 0x27	; 39
    2248:	f1 e1       	ldi	r31, 0x11	; 17
    224a:	0c 94 c5 13 	jmp	0x278a	; 0x278a <__prologue_saves__+0x20>
    224e:	ae 01       	movw	r20, r28
    2250:	4b 5f       	subi	r20, 0xFB	; 251
    2252:	5f 4f       	sbci	r21, 0xFF	; 255
    2254:	fa 01       	movw	r30, r20
    2256:	61 91       	ld	r22, Z+
    2258:	71 91       	ld	r23, Z+
    225a:	af 01       	movw	r20, r30
    225c:	80 91 68 02 	lds	r24, 0x0268
    2260:	90 91 69 02 	lds	r25, 0x0269
    2264:	0e 94 37 11 	call	0x226e	; 0x226e <vfprintf>
    2268:	e2 e0       	ldi	r30, 0x02	; 2
    226a:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__epilogue_restores__+0x20>

0000226e <vfprintf>:
    226e:	ac e0       	ldi	r26, 0x0C	; 12
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ed e3       	ldi	r30, 0x3D	; 61
    2274:	f1 e1       	ldi	r31, 0x11	; 17
    2276:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__prologue_saves__>
    227a:	7c 01       	movw	r14, r24
    227c:	6b 01       	movw	r12, r22
    227e:	8a 01       	movw	r16, r20
    2280:	fc 01       	movw	r30, r24
    2282:	17 82       	std	Z+7, r1	; 0x07
    2284:	16 82       	std	Z+6, r1	; 0x06
    2286:	83 81       	ldd	r24, Z+3	; 0x03
    2288:	81 ff       	sbrs	r24, 1
    228a:	bd c1       	rjmp	.+890    	; 0x2606 <vfprintf+0x398>
    228c:	ce 01       	movw	r24, r28
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	4c 01       	movw	r8, r24
    2292:	f7 01       	movw	r30, r14
    2294:	93 81       	ldd	r25, Z+3	; 0x03
    2296:	f6 01       	movw	r30, r12
    2298:	93 fd       	sbrc	r25, 3
    229a:	85 91       	lpm	r24, Z+
    229c:	93 ff       	sbrs	r25, 3
    229e:	81 91       	ld	r24, Z+
    22a0:	6f 01       	movw	r12, r30
    22a2:	88 23       	and	r24, r24
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <vfprintf+0x3a>
    22a6:	ab c1       	rjmp	.+854    	; 0x25fe <vfprintf+0x390>
    22a8:	85 32       	cpi	r24, 0x25	; 37
    22aa:	39 f4       	brne	.+14     	; 0x22ba <vfprintf+0x4c>
    22ac:	93 fd       	sbrc	r25, 3
    22ae:	85 91       	lpm	r24, Z+
    22b0:	93 ff       	sbrs	r25, 3
    22b2:	81 91       	ld	r24, Z+
    22b4:	6f 01       	movw	r12, r30
    22b6:	85 32       	cpi	r24, 0x25	; 37
    22b8:	29 f4       	brne	.+10     	; 0x22c4 <vfprintf+0x56>
    22ba:	b7 01       	movw	r22, r14
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    22c2:	e7 cf       	rjmp	.-50     	; 0x2292 <vfprintf+0x24>
    22c4:	51 2c       	mov	r5, r1
    22c6:	31 2c       	mov	r3, r1
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	20 32       	cpi	r18, 0x20	; 32
    22cc:	a0 f4       	brcc	.+40     	; 0x22f6 <vfprintf+0x88>
    22ce:	8b 32       	cpi	r24, 0x2B	; 43
    22d0:	69 f0       	breq	.+26     	; 0x22ec <vfprintf+0x7e>
    22d2:	30 f4       	brcc	.+12     	; 0x22e0 <vfprintf+0x72>
    22d4:	80 32       	cpi	r24, 0x20	; 32
    22d6:	59 f0       	breq	.+22     	; 0x22ee <vfprintf+0x80>
    22d8:	83 32       	cpi	r24, 0x23	; 35
    22da:	69 f4       	brne	.+26     	; 0x22f6 <vfprintf+0x88>
    22dc:	20 61       	ori	r18, 0x10	; 16
    22de:	2c c0       	rjmp	.+88     	; 0x2338 <vfprintf+0xca>
    22e0:	8d 32       	cpi	r24, 0x2D	; 45
    22e2:	39 f0       	breq	.+14     	; 0x22f2 <vfprintf+0x84>
    22e4:	80 33       	cpi	r24, 0x30	; 48
    22e6:	39 f4       	brne	.+14     	; 0x22f6 <vfprintf+0x88>
    22e8:	21 60       	ori	r18, 0x01	; 1
    22ea:	26 c0       	rjmp	.+76     	; 0x2338 <vfprintf+0xca>
    22ec:	22 60       	ori	r18, 0x02	; 2
    22ee:	24 60       	ori	r18, 0x04	; 4
    22f0:	23 c0       	rjmp	.+70     	; 0x2338 <vfprintf+0xca>
    22f2:	28 60       	ori	r18, 0x08	; 8
    22f4:	21 c0       	rjmp	.+66     	; 0x2338 <vfprintf+0xca>
    22f6:	27 fd       	sbrc	r18, 7
    22f8:	27 c0       	rjmp	.+78     	; 0x2348 <vfprintf+0xda>
    22fa:	30 ed       	ldi	r19, 0xD0	; 208
    22fc:	38 0f       	add	r19, r24
    22fe:	3a 30       	cpi	r19, 0x0A	; 10
    2300:	78 f4       	brcc	.+30     	; 0x2320 <vfprintf+0xb2>
    2302:	26 ff       	sbrs	r18, 6
    2304:	06 c0       	rjmp	.+12     	; 0x2312 <vfprintf+0xa4>
    2306:	fa e0       	ldi	r31, 0x0A	; 10
    2308:	5f 9e       	mul	r5, r31
    230a:	30 0d       	add	r19, r0
    230c:	11 24       	eor	r1, r1
    230e:	53 2e       	mov	r5, r19
    2310:	13 c0       	rjmp	.+38     	; 0x2338 <vfprintf+0xca>
    2312:	8a e0       	ldi	r24, 0x0A	; 10
    2314:	38 9e       	mul	r3, r24
    2316:	30 0d       	add	r19, r0
    2318:	11 24       	eor	r1, r1
    231a:	33 2e       	mov	r3, r19
    231c:	20 62       	ori	r18, 0x20	; 32
    231e:	0c c0       	rjmp	.+24     	; 0x2338 <vfprintf+0xca>
    2320:	8e 32       	cpi	r24, 0x2E	; 46
    2322:	21 f4       	brne	.+8      	; 0x232c <vfprintf+0xbe>
    2324:	26 fd       	sbrc	r18, 6
    2326:	6b c1       	rjmp	.+726    	; 0x25fe <vfprintf+0x390>
    2328:	20 64       	ori	r18, 0x40	; 64
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <vfprintf+0xca>
    232c:	8c 36       	cpi	r24, 0x6C	; 108
    232e:	11 f4       	brne	.+4      	; 0x2334 <vfprintf+0xc6>
    2330:	20 68       	ori	r18, 0x80	; 128
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0xca>
    2334:	88 36       	cpi	r24, 0x68	; 104
    2336:	41 f4       	brne	.+16     	; 0x2348 <vfprintf+0xda>
    2338:	f6 01       	movw	r30, r12
    233a:	93 fd       	sbrc	r25, 3
    233c:	85 91       	lpm	r24, Z+
    233e:	93 ff       	sbrs	r25, 3
    2340:	81 91       	ld	r24, Z+
    2342:	6f 01       	movw	r12, r30
    2344:	81 11       	cpse	r24, r1
    2346:	c1 cf       	rjmp	.-126    	; 0x22ca <vfprintf+0x5c>
    2348:	98 2f       	mov	r25, r24
    234a:	9f 7d       	andi	r25, 0xDF	; 223
    234c:	95 54       	subi	r25, 0x45	; 69
    234e:	93 30       	cpi	r25, 0x03	; 3
    2350:	28 f4       	brcc	.+10     	; 0x235c <vfprintf+0xee>
    2352:	0c 5f       	subi	r16, 0xFC	; 252
    2354:	1f 4f       	sbci	r17, 0xFF	; 255
    2356:	ff e3       	ldi	r31, 0x3F	; 63
    2358:	f9 83       	std	Y+1, r31	; 0x01
    235a:	0d c0       	rjmp	.+26     	; 0x2376 <vfprintf+0x108>
    235c:	83 36       	cpi	r24, 0x63	; 99
    235e:	31 f0       	breq	.+12     	; 0x236c <vfprintf+0xfe>
    2360:	83 37       	cpi	r24, 0x73	; 115
    2362:	71 f0       	breq	.+28     	; 0x2380 <vfprintf+0x112>
    2364:	83 35       	cpi	r24, 0x53	; 83
    2366:	09 f0       	breq	.+2      	; 0x236a <vfprintf+0xfc>
    2368:	5b c0       	rjmp	.+182    	; 0x2420 <vfprintf+0x1b2>
    236a:	22 c0       	rjmp	.+68     	; 0x23b0 <vfprintf+0x142>
    236c:	f8 01       	movw	r30, r16
    236e:	80 81       	ld	r24, Z
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	0e 5f       	subi	r16, 0xFE	; 254
    2374:	1f 4f       	sbci	r17, 0xFF	; 255
    2376:	44 24       	eor	r4, r4
    2378:	43 94       	inc	r4
    237a:	51 2c       	mov	r5, r1
    237c:	54 01       	movw	r10, r8
    237e:	15 c0       	rjmp	.+42     	; 0x23aa <vfprintf+0x13c>
    2380:	38 01       	movw	r6, r16
    2382:	f2 e0       	ldi	r31, 0x02	; 2
    2384:	6f 0e       	add	r6, r31
    2386:	71 1c       	adc	r7, r1
    2388:	f8 01       	movw	r30, r16
    238a:	a0 80       	ld	r10, Z
    238c:	b1 80       	ldd	r11, Z+1	; 0x01
    238e:	26 ff       	sbrs	r18, 6
    2390:	03 c0       	rjmp	.+6      	; 0x2398 <vfprintf+0x12a>
    2392:	65 2d       	mov	r22, r5
    2394:	70 e0       	ldi	r23, 0x00	; 0
    2396:	02 c0       	rjmp	.+4      	; 0x239c <vfprintf+0x12e>
    2398:	6f ef       	ldi	r22, 0xFF	; 255
    239a:	7f ef       	ldi	r23, 0xFF	; 255
    239c:	c5 01       	movw	r24, r10
    239e:	2c 87       	std	Y+12, r18	; 0x0c
    23a0:	0e 94 14 13 	call	0x2628	; 0x2628 <strnlen>
    23a4:	2c 01       	movw	r4, r24
    23a6:	83 01       	movw	r16, r6
    23a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    23aa:	2f 77       	andi	r18, 0x7F	; 127
    23ac:	22 2e       	mov	r2, r18
    23ae:	17 c0       	rjmp	.+46     	; 0x23de <vfprintf+0x170>
    23b0:	38 01       	movw	r6, r16
    23b2:	f2 e0       	ldi	r31, 0x02	; 2
    23b4:	6f 0e       	add	r6, r31
    23b6:	71 1c       	adc	r7, r1
    23b8:	f8 01       	movw	r30, r16
    23ba:	a0 80       	ld	r10, Z
    23bc:	b1 80       	ldd	r11, Z+1	; 0x01
    23be:	26 ff       	sbrs	r18, 6
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <vfprintf+0x15a>
    23c2:	65 2d       	mov	r22, r5
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <vfprintf+0x15e>
    23c8:	6f ef       	ldi	r22, 0xFF	; 255
    23ca:	7f ef       	ldi	r23, 0xFF	; 255
    23cc:	c5 01       	movw	r24, r10
    23ce:	2c 87       	std	Y+12, r18	; 0x0c
    23d0:	0e 94 09 13 	call	0x2612	; 0x2612 <strnlen_P>
    23d4:	2c 01       	movw	r4, r24
    23d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    23d8:	20 68       	ori	r18, 0x80	; 128
    23da:	22 2e       	mov	r2, r18
    23dc:	83 01       	movw	r16, r6
    23de:	23 fc       	sbrc	r2, 3
    23e0:	1b c0       	rjmp	.+54     	; 0x2418 <vfprintf+0x1aa>
    23e2:	83 2d       	mov	r24, r3
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	48 16       	cp	r4, r24
    23e8:	59 06       	cpc	r5, r25
    23ea:	b0 f4       	brcc	.+44     	; 0x2418 <vfprintf+0x1aa>
    23ec:	b7 01       	movw	r22, r14
    23ee:	80 e2       	ldi	r24, 0x20	; 32
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    23f6:	3a 94       	dec	r3
    23f8:	f4 cf       	rjmp	.-24     	; 0x23e2 <vfprintf+0x174>
    23fa:	f5 01       	movw	r30, r10
    23fc:	27 fc       	sbrc	r2, 7
    23fe:	85 91       	lpm	r24, Z+
    2400:	27 fe       	sbrs	r2, 7
    2402:	81 91       	ld	r24, Z+
    2404:	5f 01       	movw	r10, r30
    2406:	b7 01       	movw	r22, r14
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    240e:	31 10       	cpse	r3, r1
    2410:	3a 94       	dec	r3
    2412:	f1 e0       	ldi	r31, 0x01	; 1
    2414:	4f 1a       	sub	r4, r31
    2416:	51 08       	sbc	r5, r1
    2418:	41 14       	cp	r4, r1
    241a:	51 04       	cpc	r5, r1
    241c:	71 f7       	brne	.-36     	; 0x23fa <vfprintf+0x18c>
    241e:	e5 c0       	rjmp	.+458    	; 0x25ea <vfprintf+0x37c>
    2420:	84 36       	cpi	r24, 0x64	; 100
    2422:	11 f0       	breq	.+4      	; 0x2428 <vfprintf+0x1ba>
    2424:	89 36       	cpi	r24, 0x69	; 105
    2426:	39 f5       	brne	.+78     	; 0x2476 <vfprintf+0x208>
    2428:	f8 01       	movw	r30, r16
    242a:	27 ff       	sbrs	r18, 7
    242c:	07 c0       	rjmp	.+14     	; 0x243c <vfprintf+0x1ce>
    242e:	60 81       	ld	r22, Z
    2430:	71 81       	ldd	r23, Z+1	; 0x01
    2432:	82 81       	ldd	r24, Z+2	; 0x02
    2434:	93 81       	ldd	r25, Z+3	; 0x03
    2436:	0c 5f       	subi	r16, 0xFC	; 252
    2438:	1f 4f       	sbci	r17, 0xFF	; 255
    243a:	08 c0       	rjmp	.+16     	; 0x244c <vfprintf+0x1de>
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	07 2e       	mov	r0, r23
    2442:	00 0c       	add	r0, r0
    2444:	88 0b       	sbc	r24, r24
    2446:	99 0b       	sbc	r25, r25
    2448:	0e 5f       	subi	r16, 0xFE	; 254
    244a:	1f 4f       	sbci	r17, 0xFF	; 255
    244c:	2f 76       	andi	r18, 0x6F	; 111
    244e:	72 2e       	mov	r7, r18
    2450:	97 ff       	sbrs	r25, 7
    2452:	09 c0       	rjmp	.+18     	; 0x2466 <vfprintf+0x1f8>
    2454:	90 95       	com	r25
    2456:	80 95       	com	r24
    2458:	70 95       	com	r23
    245a:	61 95       	neg	r22
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	8f 4f       	sbci	r24, 0xFF	; 255
    2460:	9f 4f       	sbci	r25, 0xFF	; 255
    2462:	20 68       	ori	r18, 0x80	; 128
    2464:	72 2e       	mov	r7, r18
    2466:	2a e0       	ldi	r18, 0x0A	; 10
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	a4 01       	movw	r20, r8
    246c:	0e 94 57 13 	call	0x26ae	; 0x26ae <__ultoa_invert>
    2470:	a8 2e       	mov	r10, r24
    2472:	a8 18       	sub	r10, r8
    2474:	44 c0       	rjmp	.+136    	; 0x24fe <vfprintf+0x290>
    2476:	85 37       	cpi	r24, 0x75	; 117
    2478:	29 f4       	brne	.+10     	; 0x2484 <vfprintf+0x216>
    247a:	2f 7e       	andi	r18, 0xEF	; 239
    247c:	b2 2e       	mov	r11, r18
    247e:	2a e0       	ldi	r18, 0x0A	; 10
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	25 c0       	rjmp	.+74     	; 0x24ce <vfprintf+0x260>
    2484:	f2 2f       	mov	r31, r18
    2486:	f9 7f       	andi	r31, 0xF9	; 249
    2488:	bf 2e       	mov	r11, r31
    248a:	8f 36       	cpi	r24, 0x6F	; 111
    248c:	c1 f0       	breq	.+48     	; 0x24be <vfprintf+0x250>
    248e:	18 f4       	brcc	.+6      	; 0x2496 <vfprintf+0x228>
    2490:	88 35       	cpi	r24, 0x58	; 88
    2492:	79 f0       	breq	.+30     	; 0x24b2 <vfprintf+0x244>
    2494:	b4 c0       	rjmp	.+360    	; 0x25fe <vfprintf+0x390>
    2496:	80 37       	cpi	r24, 0x70	; 112
    2498:	19 f0       	breq	.+6      	; 0x24a0 <vfprintf+0x232>
    249a:	88 37       	cpi	r24, 0x78	; 120
    249c:	21 f0       	breq	.+8      	; 0x24a6 <vfprintf+0x238>
    249e:	af c0       	rjmp	.+350    	; 0x25fe <vfprintf+0x390>
    24a0:	2f 2f       	mov	r18, r31
    24a2:	20 61       	ori	r18, 0x10	; 16
    24a4:	b2 2e       	mov	r11, r18
    24a6:	b4 fe       	sbrs	r11, 4
    24a8:	0d c0       	rjmp	.+26     	; 0x24c4 <vfprintf+0x256>
    24aa:	8b 2d       	mov	r24, r11
    24ac:	84 60       	ori	r24, 0x04	; 4
    24ae:	b8 2e       	mov	r11, r24
    24b0:	09 c0       	rjmp	.+18     	; 0x24c4 <vfprintf+0x256>
    24b2:	24 ff       	sbrs	r18, 4
    24b4:	0a c0       	rjmp	.+20     	; 0x24ca <vfprintf+0x25c>
    24b6:	9f 2f       	mov	r25, r31
    24b8:	96 60       	ori	r25, 0x06	; 6
    24ba:	b9 2e       	mov	r11, r25
    24bc:	06 c0       	rjmp	.+12     	; 0x24ca <vfprintf+0x25c>
    24be:	28 e0       	ldi	r18, 0x08	; 8
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	05 c0       	rjmp	.+10     	; 0x24ce <vfprintf+0x260>
    24c4:	20 e1       	ldi	r18, 0x10	; 16
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	02 c0       	rjmp	.+4      	; 0x24ce <vfprintf+0x260>
    24ca:	20 e1       	ldi	r18, 0x10	; 16
    24cc:	32 e0       	ldi	r19, 0x02	; 2
    24ce:	f8 01       	movw	r30, r16
    24d0:	b7 fe       	sbrs	r11, 7
    24d2:	07 c0       	rjmp	.+14     	; 0x24e2 <vfprintf+0x274>
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	0c 5f       	subi	r16, 0xFC	; 252
    24de:	1f 4f       	sbci	r17, 0xFF	; 255
    24e0:	06 c0       	rjmp	.+12     	; 0x24ee <vfprintf+0x280>
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	0e 5f       	subi	r16, 0xFE	; 254
    24ec:	1f 4f       	sbci	r17, 0xFF	; 255
    24ee:	a4 01       	movw	r20, r8
    24f0:	0e 94 57 13 	call	0x26ae	; 0x26ae <__ultoa_invert>
    24f4:	a8 2e       	mov	r10, r24
    24f6:	a8 18       	sub	r10, r8
    24f8:	fb 2d       	mov	r31, r11
    24fa:	ff 77       	andi	r31, 0x7F	; 127
    24fc:	7f 2e       	mov	r7, r31
    24fe:	76 fe       	sbrs	r7, 6
    2500:	0b c0       	rjmp	.+22     	; 0x2518 <vfprintf+0x2aa>
    2502:	37 2d       	mov	r19, r7
    2504:	3e 7f       	andi	r19, 0xFE	; 254
    2506:	a5 14       	cp	r10, r5
    2508:	50 f4       	brcc	.+20     	; 0x251e <vfprintf+0x2b0>
    250a:	74 fe       	sbrs	r7, 4
    250c:	0a c0       	rjmp	.+20     	; 0x2522 <vfprintf+0x2b4>
    250e:	72 fc       	sbrc	r7, 2
    2510:	08 c0       	rjmp	.+16     	; 0x2522 <vfprintf+0x2b4>
    2512:	37 2d       	mov	r19, r7
    2514:	3e 7e       	andi	r19, 0xEE	; 238
    2516:	05 c0       	rjmp	.+10     	; 0x2522 <vfprintf+0x2b4>
    2518:	ba 2c       	mov	r11, r10
    251a:	37 2d       	mov	r19, r7
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <vfprintf+0x2b6>
    251e:	ba 2c       	mov	r11, r10
    2520:	01 c0       	rjmp	.+2      	; 0x2524 <vfprintf+0x2b6>
    2522:	b5 2c       	mov	r11, r5
    2524:	34 ff       	sbrs	r19, 4
    2526:	0d c0       	rjmp	.+26     	; 0x2542 <vfprintf+0x2d4>
    2528:	fe 01       	movw	r30, r28
    252a:	ea 0d       	add	r30, r10
    252c:	f1 1d       	adc	r31, r1
    252e:	80 81       	ld	r24, Z
    2530:	80 33       	cpi	r24, 0x30	; 48
    2532:	11 f4       	brne	.+4      	; 0x2538 <vfprintf+0x2ca>
    2534:	39 7e       	andi	r19, 0xE9	; 233
    2536:	09 c0       	rjmp	.+18     	; 0x254a <vfprintf+0x2dc>
    2538:	32 ff       	sbrs	r19, 2
    253a:	06 c0       	rjmp	.+12     	; 0x2548 <vfprintf+0x2da>
    253c:	b3 94       	inc	r11
    253e:	b3 94       	inc	r11
    2540:	04 c0       	rjmp	.+8      	; 0x254a <vfprintf+0x2dc>
    2542:	83 2f       	mov	r24, r19
    2544:	86 78       	andi	r24, 0x86	; 134
    2546:	09 f0       	breq	.+2      	; 0x254a <vfprintf+0x2dc>
    2548:	b3 94       	inc	r11
    254a:	33 fd       	sbrc	r19, 3
    254c:	13 c0       	rjmp	.+38     	; 0x2574 <vfprintf+0x306>
    254e:	30 ff       	sbrs	r19, 0
    2550:	06 c0       	rjmp	.+12     	; 0x255e <vfprintf+0x2f0>
    2552:	5a 2c       	mov	r5, r10
    2554:	b3 14       	cp	r11, r3
    2556:	18 f4       	brcc	.+6      	; 0x255e <vfprintf+0x2f0>
    2558:	53 0c       	add	r5, r3
    255a:	5b 18       	sub	r5, r11
    255c:	b3 2c       	mov	r11, r3
    255e:	b3 14       	cp	r11, r3
    2560:	68 f4       	brcc	.+26     	; 0x257c <vfprintf+0x30e>
    2562:	b7 01       	movw	r22, r14
    2564:	80 e2       	ldi	r24, 0x20	; 32
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	3c 87       	std	Y+12, r19	; 0x0c
    256a:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    256e:	b3 94       	inc	r11
    2570:	3c 85       	ldd	r19, Y+12	; 0x0c
    2572:	f5 cf       	rjmp	.-22     	; 0x255e <vfprintf+0x2f0>
    2574:	b3 14       	cp	r11, r3
    2576:	10 f4       	brcc	.+4      	; 0x257c <vfprintf+0x30e>
    2578:	3b 18       	sub	r3, r11
    257a:	01 c0       	rjmp	.+2      	; 0x257e <vfprintf+0x310>
    257c:	31 2c       	mov	r3, r1
    257e:	34 ff       	sbrs	r19, 4
    2580:	12 c0       	rjmp	.+36     	; 0x25a6 <vfprintf+0x338>
    2582:	b7 01       	movw	r22, r14
    2584:	80 e3       	ldi	r24, 0x30	; 48
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	3c 87       	std	Y+12, r19	; 0x0c
    258a:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    258e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2590:	32 ff       	sbrs	r19, 2
    2592:	17 c0       	rjmp	.+46     	; 0x25c2 <vfprintf+0x354>
    2594:	31 fd       	sbrc	r19, 1
    2596:	03 c0       	rjmp	.+6      	; 0x259e <vfprintf+0x330>
    2598:	88 e7       	ldi	r24, 0x78	; 120
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x334>
    259e:	88 e5       	ldi	r24, 0x58	; 88
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	b7 01       	movw	r22, r14
    25a4:	0c c0       	rjmp	.+24     	; 0x25be <vfprintf+0x350>
    25a6:	83 2f       	mov	r24, r19
    25a8:	86 78       	andi	r24, 0x86	; 134
    25aa:	59 f0       	breq	.+22     	; 0x25c2 <vfprintf+0x354>
    25ac:	31 ff       	sbrs	r19, 1
    25ae:	02 c0       	rjmp	.+4      	; 0x25b4 <vfprintf+0x346>
    25b0:	8b e2       	ldi	r24, 0x2B	; 43
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <vfprintf+0x348>
    25b4:	80 e2       	ldi	r24, 0x20	; 32
    25b6:	37 fd       	sbrc	r19, 7
    25b8:	8d e2       	ldi	r24, 0x2D	; 45
    25ba:	b7 01       	movw	r22, r14
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    25c2:	a5 14       	cp	r10, r5
    25c4:	38 f4       	brcc	.+14     	; 0x25d4 <vfprintf+0x366>
    25c6:	b7 01       	movw	r22, r14
    25c8:	80 e3       	ldi	r24, 0x30	; 48
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    25d0:	5a 94       	dec	r5
    25d2:	f7 cf       	rjmp	.-18     	; 0x25c2 <vfprintf+0x354>
    25d4:	aa 94       	dec	r10
    25d6:	f4 01       	movw	r30, r8
    25d8:	ea 0d       	add	r30, r10
    25da:	f1 1d       	adc	r31, r1
    25dc:	80 81       	ld	r24, Z
    25de:	b7 01       	movw	r22, r14
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    25e6:	a1 10       	cpse	r10, r1
    25e8:	f5 cf       	rjmp	.-22     	; 0x25d4 <vfprintf+0x366>
    25ea:	33 20       	and	r3, r3
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <vfprintf+0x382>
    25ee:	51 ce       	rjmp	.-862    	; 0x2292 <vfprintf+0x24>
    25f0:	b7 01       	movw	r22, r14
    25f2:	80 e2       	ldi	r24, 0x20	; 32
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 1f 13 	call	0x263e	; 0x263e <fputc>
    25fa:	3a 94       	dec	r3
    25fc:	f6 cf       	rjmp	.-20     	; 0x25ea <vfprintf+0x37c>
    25fe:	f7 01       	movw	r30, r14
    2600:	86 81       	ldd	r24, Z+6	; 0x06
    2602:	97 81       	ldd	r25, Z+7	; 0x07
    2604:	02 c0       	rjmp	.+4      	; 0x260a <vfprintf+0x39c>
    2606:	8f ef       	ldi	r24, 0xFF	; 255
    2608:	9f ef       	ldi	r25, 0xFF	; 255
    260a:	2c 96       	adiw	r28, 0x0c	; 12
    260c:	e2 e1       	ldi	r30, 0x12	; 18
    260e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__epilogue_restores__>

00002612 <strnlen_P>:
    2612:	fc 01       	movw	r30, r24
    2614:	05 90       	lpm	r0, Z+
    2616:	61 50       	subi	r22, 0x01	; 1
    2618:	70 40       	sbci	r23, 0x00	; 0
    261a:	01 10       	cpse	r0, r1
    261c:	d8 f7       	brcc	.-10     	; 0x2614 <strnlen_P+0x2>
    261e:	80 95       	com	r24
    2620:	90 95       	com	r25
    2622:	8e 0f       	add	r24, r30
    2624:	9f 1f       	adc	r25, r31
    2626:	08 95       	ret

00002628 <strnlen>:
    2628:	fc 01       	movw	r30, r24
    262a:	61 50       	subi	r22, 0x01	; 1
    262c:	70 40       	sbci	r23, 0x00	; 0
    262e:	01 90       	ld	r0, Z+
    2630:	01 10       	cpse	r0, r1
    2632:	d8 f7       	brcc	.-10     	; 0x262a <strnlen+0x2>
    2634:	80 95       	com	r24
    2636:	90 95       	com	r25
    2638:	8e 0f       	add	r24, r30
    263a:	9f 1f       	adc	r25, r31
    263c:	08 95       	ret

0000263e <fputc>:
    263e:	0f 93       	push	r16
    2640:	1f 93       	push	r17
    2642:	cf 93       	push	r28
    2644:	df 93       	push	r29
    2646:	fb 01       	movw	r30, r22
    2648:	23 81       	ldd	r18, Z+3	; 0x03
    264a:	21 fd       	sbrc	r18, 1
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <fputc+0x16>
    264e:	8f ef       	ldi	r24, 0xFF	; 255
    2650:	9f ef       	ldi	r25, 0xFF	; 255
    2652:	28 c0       	rjmp	.+80     	; 0x26a4 <fputc+0x66>
    2654:	22 ff       	sbrs	r18, 2
    2656:	16 c0       	rjmp	.+44     	; 0x2684 <fputc+0x46>
    2658:	46 81       	ldd	r20, Z+6	; 0x06
    265a:	57 81       	ldd	r21, Z+7	; 0x07
    265c:	24 81       	ldd	r18, Z+4	; 0x04
    265e:	35 81       	ldd	r19, Z+5	; 0x05
    2660:	42 17       	cp	r20, r18
    2662:	53 07       	cpc	r21, r19
    2664:	44 f4       	brge	.+16     	; 0x2676 <fputc+0x38>
    2666:	a0 81       	ld	r26, Z
    2668:	b1 81       	ldd	r27, Z+1	; 0x01
    266a:	9d 01       	movw	r18, r26
    266c:	2f 5f       	subi	r18, 0xFF	; 255
    266e:	3f 4f       	sbci	r19, 0xFF	; 255
    2670:	31 83       	std	Z+1, r19	; 0x01
    2672:	20 83       	st	Z, r18
    2674:	8c 93       	st	X, r24
    2676:	26 81       	ldd	r18, Z+6	; 0x06
    2678:	37 81       	ldd	r19, Z+7	; 0x07
    267a:	2f 5f       	subi	r18, 0xFF	; 255
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	37 83       	std	Z+7, r19	; 0x07
    2680:	26 83       	std	Z+6, r18	; 0x06
    2682:	10 c0       	rjmp	.+32     	; 0x26a4 <fputc+0x66>
    2684:	eb 01       	movw	r28, r22
    2686:	09 2f       	mov	r16, r25
    2688:	18 2f       	mov	r17, r24
    268a:	00 84       	ldd	r0, Z+8	; 0x08
    268c:	f1 85       	ldd	r31, Z+9	; 0x09
    268e:	e0 2d       	mov	r30, r0
    2690:	09 95       	icall
    2692:	89 2b       	or	r24, r25
    2694:	e1 f6       	brne	.-72     	; 0x264e <fputc+0x10>
    2696:	8e 81       	ldd	r24, Y+6	; 0x06
    2698:	9f 81       	ldd	r25, Y+7	; 0x07
    269a:	01 96       	adiw	r24, 0x01	; 1
    269c:	9f 83       	std	Y+7, r25	; 0x07
    269e:	8e 83       	std	Y+6, r24	; 0x06
    26a0:	81 2f       	mov	r24, r17
    26a2:	90 2f       	mov	r25, r16
    26a4:	df 91       	pop	r29
    26a6:	cf 91       	pop	r28
    26a8:	1f 91       	pop	r17
    26aa:	0f 91       	pop	r16
    26ac:	08 95       	ret

000026ae <__ultoa_invert>:
    26ae:	fa 01       	movw	r30, r20
    26b0:	aa 27       	eor	r26, r26
    26b2:	28 30       	cpi	r18, 0x08	; 8
    26b4:	51 f1       	breq	.+84     	; 0x270a <__ultoa_invert+0x5c>
    26b6:	20 31       	cpi	r18, 0x10	; 16
    26b8:	81 f1       	breq	.+96     	; 0x271a <__ultoa_invert+0x6c>
    26ba:	e8 94       	clt
    26bc:	6f 93       	push	r22
    26be:	6e 7f       	andi	r22, 0xFE	; 254
    26c0:	6e 5f       	subi	r22, 0xFE	; 254
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	8f 4f       	sbci	r24, 0xFF	; 255
    26c6:	9f 4f       	sbci	r25, 0xFF	; 255
    26c8:	af 4f       	sbci	r26, 0xFF	; 255
    26ca:	b1 e0       	ldi	r27, 0x01	; 1
    26cc:	3e d0       	rcall	.+124    	; 0x274a <__ultoa_invert+0x9c>
    26ce:	b4 e0       	ldi	r27, 0x04	; 4
    26d0:	3c d0       	rcall	.+120    	; 0x274a <__ultoa_invert+0x9c>
    26d2:	67 0f       	add	r22, r23
    26d4:	78 1f       	adc	r23, r24
    26d6:	89 1f       	adc	r24, r25
    26d8:	9a 1f       	adc	r25, r26
    26da:	a1 1d       	adc	r26, r1
    26dc:	68 0f       	add	r22, r24
    26de:	79 1f       	adc	r23, r25
    26e0:	8a 1f       	adc	r24, r26
    26e2:	91 1d       	adc	r25, r1
    26e4:	a1 1d       	adc	r26, r1
    26e6:	6a 0f       	add	r22, r26
    26e8:	71 1d       	adc	r23, r1
    26ea:	81 1d       	adc	r24, r1
    26ec:	91 1d       	adc	r25, r1
    26ee:	a1 1d       	adc	r26, r1
    26f0:	20 d0       	rcall	.+64     	; 0x2732 <__ultoa_invert+0x84>
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <__ultoa_invert+0x48>
    26f4:	68 94       	set
    26f6:	3f 91       	pop	r19
    26f8:	2a e0       	ldi	r18, 0x0A	; 10
    26fa:	26 9f       	mul	r18, r22
    26fc:	11 24       	eor	r1, r1
    26fe:	30 19       	sub	r19, r0
    2700:	30 5d       	subi	r19, 0xD0	; 208
    2702:	31 93       	st	Z+, r19
    2704:	de f6       	brtc	.-74     	; 0x26bc <__ultoa_invert+0xe>
    2706:	cf 01       	movw	r24, r30
    2708:	08 95       	ret
    270a:	46 2f       	mov	r20, r22
    270c:	47 70       	andi	r20, 0x07	; 7
    270e:	40 5d       	subi	r20, 0xD0	; 208
    2710:	41 93       	st	Z+, r20
    2712:	b3 e0       	ldi	r27, 0x03	; 3
    2714:	0f d0       	rcall	.+30     	; 0x2734 <__ultoa_invert+0x86>
    2716:	c9 f7       	brne	.-14     	; 0x270a <__ultoa_invert+0x5c>
    2718:	f6 cf       	rjmp	.-20     	; 0x2706 <__ultoa_invert+0x58>
    271a:	46 2f       	mov	r20, r22
    271c:	4f 70       	andi	r20, 0x0F	; 15
    271e:	40 5d       	subi	r20, 0xD0	; 208
    2720:	4a 33       	cpi	r20, 0x3A	; 58
    2722:	18 f0       	brcs	.+6      	; 0x272a <__ultoa_invert+0x7c>
    2724:	49 5d       	subi	r20, 0xD9	; 217
    2726:	31 fd       	sbrc	r19, 1
    2728:	40 52       	subi	r20, 0x20	; 32
    272a:	41 93       	st	Z+, r20
    272c:	02 d0       	rcall	.+4      	; 0x2732 <__ultoa_invert+0x84>
    272e:	a9 f7       	brne	.-22     	; 0x271a <__ultoa_invert+0x6c>
    2730:	ea cf       	rjmp	.-44     	; 0x2706 <__ultoa_invert+0x58>
    2732:	b4 e0       	ldi	r27, 0x04	; 4
    2734:	a6 95       	lsr	r26
    2736:	97 95       	ror	r25
    2738:	87 95       	ror	r24
    273a:	77 95       	ror	r23
    273c:	67 95       	ror	r22
    273e:	ba 95       	dec	r27
    2740:	c9 f7       	brne	.-14     	; 0x2734 <__ultoa_invert+0x86>
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	61 05       	cpc	r22, r1
    2746:	71 05       	cpc	r23, r1
    2748:	08 95       	ret
    274a:	9b 01       	movw	r18, r22
    274c:	ac 01       	movw	r20, r24
    274e:	0a 2e       	mov	r0, r26
    2750:	06 94       	lsr	r0
    2752:	57 95       	ror	r21
    2754:	47 95       	ror	r20
    2756:	37 95       	ror	r19
    2758:	27 95       	ror	r18
    275a:	ba 95       	dec	r27
    275c:	c9 f7       	brne	.-14     	; 0x2750 <__ultoa_invert+0xa2>
    275e:	62 0f       	add	r22, r18
    2760:	73 1f       	adc	r23, r19
    2762:	84 1f       	adc	r24, r20
    2764:	95 1f       	adc	r25, r21
    2766:	a0 1d       	adc	r26, r0
    2768:	08 95       	ret

0000276a <__prologue_saves__>:
    276a:	2f 92       	push	r2
    276c:	3f 92       	push	r3
    276e:	4f 92       	push	r4
    2770:	5f 92       	push	r5
    2772:	6f 92       	push	r6
    2774:	7f 92       	push	r7
    2776:	8f 92       	push	r8
    2778:	9f 92       	push	r9
    277a:	af 92       	push	r10
    277c:	bf 92       	push	r11
    277e:	cf 92       	push	r12
    2780:	df 92       	push	r13
    2782:	ef 92       	push	r14
    2784:	ff 92       	push	r15
    2786:	0f 93       	push	r16
    2788:	1f 93       	push	r17
    278a:	cf 93       	push	r28
    278c:	df 93       	push	r29
    278e:	cd b7       	in	r28, 0x3d	; 61
    2790:	de b7       	in	r29, 0x3e	; 62
    2792:	ca 1b       	sub	r28, r26
    2794:	db 0b       	sbc	r29, r27
    2796:	0f b6       	in	r0, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	de bf       	out	0x3e, r29	; 62
    279c:	0f be       	out	0x3f, r0	; 63
    279e:	cd bf       	out	0x3d, r28	; 61
    27a0:	09 94       	ijmp

000027a2 <__epilogue_restores__>:
    27a2:	2a 88       	ldd	r2, Y+18	; 0x12
    27a4:	39 88       	ldd	r3, Y+17	; 0x11
    27a6:	48 88       	ldd	r4, Y+16	; 0x10
    27a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    27aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    27ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    27b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    27b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    27b4:	b9 84       	ldd	r11, Y+9	; 0x09
    27b6:	c8 84       	ldd	r12, Y+8	; 0x08
    27b8:	df 80       	ldd	r13, Y+7	; 0x07
    27ba:	ee 80       	ldd	r14, Y+6	; 0x06
    27bc:	fd 80       	ldd	r15, Y+5	; 0x05
    27be:	0c 81       	ldd	r16, Y+4	; 0x04
    27c0:	1b 81       	ldd	r17, Y+3	; 0x03
    27c2:	aa 81       	ldd	r26, Y+2	; 0x02
    27c4:	b9 81       	ldd	r27, Y+1	; 0x01
    27c6:	ce 0f       	add	r28, r30
    27c8:	d1 1d       	adc	r29, r1
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	ed 01       	movw	r28, r26
    27d6:	08 95       	ret

000027d8 <_exit>:
    27d8:	f8 94       	cli

000027da <__stop_program>:
    27da:	ff cf       	rjmp	.-2      	; 0x27da <__stop_program>
